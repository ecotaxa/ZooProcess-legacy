// --------------------------- Zooprocess_visualize_uvp5_profiles_from_tsv -----------------------------------------------
version = "7.22";
date = "2016/06/19";

// A partir des TSV du HD seulement

args = 	getArgument();
arg = 	split(args," ");
path = arg[0];
instrum = arg[1];
appel = arg[2];
tsv_file = arg[3];
pathmeta = path+"\\meta\\";
pathresults = path+"\\results\\";
dirprocessed = 	pathresults;
nbgraph = 2;
lissage = false;

// --------------- Metadata -----------------------------------------
metafile = "no";
filelist = getFileList(pathmeta);
for (i=0; i<filelist.length ; i++) {	
	ctrl = startsWith(filelist[i],"uvp5_header_");
	ctrl_end = endsWith(filelist[i],".txt");
	if (ctrl == 1 && ctrl_end == 1) { metafile = filelist[i];		} // if
} // for
if (metafile == "no") {	aa =	getBoolean("Press ''Cancel'' now and Fill in metadata first. ");	} // if
open(path+"\\meta\\"+metafile);
wait(100);
metadata = getInfo();
run('Close');
array = split(metadata,"\n");

// --------------------- SELECTION MANUELLE DU PROFIL -----------------------
listsel = newArray(1);
listsel[0] = appel;
fin = 1;
if (appel == "root") {
	// --------------- Liste des profiles disponibles -------------------
	j = 0;
	filelist = getFileList(pathresults);
	list = newArray(filelist.length);
	for (i=0; i<filelist.length ; i++) {	
		if (endsWith(filelist[i],"_datfile.txt")) {
			long = lengthOf(filelist[i]);
			aa = substring(filelist[i],0,long-12);
			if (File.exists(pathresults+aa+"_histo.tsv")) {rr = filelist[i]; 	list[j] = rr;	j = j + 1;		} // if
		}
	} // for
	if (j==0) { 
		aa = getBoolean("No histo.tsv file to process in "+pathresults+". \nPress CANCEL to abort !          ");
	} //
	else { 	listsel = newArray(j);
		for (k=0;k<listsel.length ;k++) {	rr = list[k];	tt = substring(rr,0,lengthOf(rr)-12);  	listsel[k] = tt;		} // for
	} // else
	// --------------- Choix profile ------------------------------------
	Dialog.create("UVP5 profiles            version :  "+version);
	Dialog.addMessage("-------------------------------------------------------------------------------------      ");
	Dialog.addMessage("Instrument :  "+instrum);
	Dialog.addMessage("Project :        "+path);
	Dialog.addMessage("-------------------------------------------------------------------------------------      ");
//	Dialog.addMessage("SELECT PROFILE to PLOT");
	Dialog.addChoice("    SELECT PROFILE to PLOT",       listsel           );
	Dialog.addMessage("or ");
	Dialog.addCheckbox("PLOT ALL",false);
	Dialog.addMessage("-------------------------------------------------------------------------------------      ");
	Dialog.show;
	appel = 		Dialog.getChoice();
	plot_all = 		Dialog.getCheckbox();
	
	// -------------------------------- Un ou plusieurs ---------------------------------------------
	if (plot_all == true ) {	fin = j; 		}
}


// ================================= Boucle sur les profils ======================================
for(t = 0; t < fin ; t++) {
	appel = listsel[t];
	// --------------- Recherche firstimg et profile (station) pour le profile ---------------
	firstimg = "no";
	for (i=1; i<array.length ; i++) { 
		ligne = replace(array[i],";"," ");
		ligne = split(ligne,"\ ");
		Cruise = 	ligne[0];
		Ship = 		ligne[1];
		Filename = 	ligne[2];
		Profile_id =	ligne[3];
		Firstimage =	ligne[8];
		Imagevol =	ligne[9];
		Aa =		parseFloat(ligne[10]);
		Expo =		parseFloat(ligne[11]);
		if (ligne.length == 21 ){	Lastimage =	ligne[18];	Yoyo_opt = ligne[19];		Stationid = ligne[20];		} // if
		else { 				Lastimage =	99999999999;	Yoyo_opt = "N";			Stationid = Profile_id;	} // else
		Filename = 	toString(Filename);
		Profile_id =	toString(Profile_id);
		if (startsWith(appel,Profile_id)) {
			firstimg = Firstimage;	
			profile = Profile_id;		
			volimage = Imagevol;	
			lastimage = Lastimage;	
			stationid = Stationid;
		} // if
	}// for
	if (firstimg == "no") {aa = getBoolean("First image not found in "+Profile_id+" \nPress Cancel to abort !   ");		} // if
	profile = toString(profile);
	firstimg = parseInt(firstimg);
	volimage = parseFloat(volimage);
	
	// ------------ NOMS des fichiers --------------------
	datfilename = appel+"_datfile.txt"; 
	histo_file = appel+"_histo.tsv";
	
	//------------- Ouverture du fichier datfile.txt ----------------
	//	aa = getBoolean(dirprocessed +datfilename);
	open(dirprocessed +datfilename);
	wait(500);
	selectWindow(datfilename);
	data = getInfo();
	ligne = split(data,"\n");
	run("Close");
	
	// ------------ Recherche Heure debut et fin correspondant firstimg et lastimg -------
	index = 1;
	while(index < ligne.length) {
		dataline_read = ligne[index];
		//	aa = getBoolean(dataline_read);
		dataline = 	replace(dataline_read,";"," ");
		dataline = 	split(dataline,"\ ");
		imgnb = 	dataline[0];
		imgnb = 	parseInt(imgnb);
		// ----------- DATA entre premiere et dernière image ---------------
		if (imgnb < firstimg) 	{	time_deb = dataline[1];	}
		else if	 (imgnb <= lastimage) {	time_end = dataline[1];	}
		index++;
	}// 
	time_deb = 	replace(time_deb,"_"," ");
	time_deb = 	split(time_deb,"\ ");
	time_deb_nb = 	parseInt(time_deb[0]);
	time_end = 	replace(time_end,"_"," ");
	time_end = 	split(time_end,"\ ");
	time_end_nb = 	parseInt(time_end[0]);
	
	// --------------- Ouverture fichier HISTO -------------------
	open(pathresults +histo_file);
	wait(500);
	selectWindow(histo_file);
	data = getInfo();
	ligne = split(data,"\n");
	run("Close");
	
	// --------------- Vecteurs ---------------------------
	DATA = 		newArray(ligne.length);
	
	// --------------- Sélection lignes concernées --------
	index = 1;
	j = 0;
	prevdepth = -1;
	depthmax = 0;
	while(index < ligne.length) {
		dataline_read = ligne[index];
		//	aa = getBoolean(dataline_read);
		data_line = split(dataline_read,"\t");
		
		Time_deb_txt = data_line[1];
		data = replace(Time_deb_txt,"_"," ");
		data = split(data,"\ ");	
		Time_deb = parseInt(data[0]);
		
		Time_end_txt = data_line[1];
		data = replace(Time_end_txt,"_"," ");
		data = split(data,"\ ");	
		Time_end = parseInt(data[0]);	
		//	aa = getBoolean(Time_deb +" > "+ time_deb_nb +"  "+ Time_end +" <= "+ time_end_nb);
		
		// ----------- DATA entre premiere et dernière image ---------------
		if (Time_deb > time_deb_nb && Time_end <= time_end_nb) {	
			depth = parseFloat(data_line[4]);
			// ---------------- Test FIN descente ------------------------------
			if (depth > prevdepth && depth > depthmax) {
				if (Yoyo_opt == "N") depthmax = maxOf(depthmax,depth);				
				//			print(depth);
				Depth = -1*depth;
				// ----------- Heure moyenne --------------
				Time = (Time_end + Time_deb) / 2; 
				DATA[j] = Time_deb_txt+" "+Time_deb+" "+Time_end_txt+" "+Time_end+" "+Depth+" "+Time+" "+data_line[6]+" "+data_line[7]+" "+data_line[8]+" "+data_line[9]+" "+data_line[10]+" "+data_line[11];
				//			aa = getBoolean(DATA[j]);
				j++;
			} // if
			// ------------ Fin automatique en fin de descente ---------
			if (Yoyo_opt == "N") prevdepth = depth;
		}
		index++;
	} // for
	
	Depth = 	newArray(j);
	Time_deb_txt = 	newArray(j);
	Time_end_txt = 	newArray(j);	
	Time_deb = 	newArray(j);	
	Time_end = 	newArray(j);	
	Time = 		newArray(j);	
	Nb_01 = 	newArray(j);	
	Nb_02 = 	newArray(j);	
	Nb_03 = 	newArray(j);	
	Nb_04 = 	newArray(j);	
	Nb_05 = 	newArray(j);	
	Nb_06 = 	newArray(j);	
	
	for (k=0; k <j ; k++) {
		//	print(DATA[o]);
		data_line = split(DATA[k]," ");
		Time_deb_txt[k] = 	data_line[0];
		Time_deb[k] = 		parseInt(data_line[1]);	
		Time_end_txt[k] = 	data_line[2];	
		Time_end[k] = 		parseInt(data_line[3]);	
		Depth[k] = 		parseFloat(data_line[4]);	
		Time[k] = 		parseFloat(data_line[5]);
		Nb_01[k] = 		parseFloat(data_line[6]);
		Nb_02[k] = 		parseFloat(data_line[7]);
		Nb_03[k] = 		parseFloat(data_line[8]);
		Nb_04[k] = 		parseFloat(data_line[9]);
		Nb_05[k] = 		parseFloat(data_line[10]);
		Nb_06[k] = 		parseFloat(data_line[11]);
		
		//	print(Depth[k]);
	}
	//	aa = getBoolean("j : "+j);
	
	// ------------------------- Graph data ----------------------------------
	depthprop = 100 *(1+ floor(depthmax/100));
	Zstep = 10;
	if (depthprop > 5000) Zstep = 1000;
	else if (depthprop > 1000) Zstep = 500;
	else if (depthprop > 100) Zstep = 100;
	
	time_deb = Time_deb[0];
	time_end = Time_end[j-1];
	
	time_deb_txt = Time_deb_txt[0];
	time_end_txt = Time_end_txt[j-1];
	
	nmoy = 3;
	if (appel == "root" && Yoyo_opt != "H" ) {
		Dialog.create("Graph parameters ");
		Dialog.addNumber("Enter MAXIMUM depth ",depthprop);
		Dialog.addNumber("Enter depth intervalles",Zstep);
		Dialog.addNumber("Enter number of images for smoothing",nmoy);
		Dialog.show;
		miniy = Dialog.getNumber();
		Zstep = Dialog.getNumber();
		nmoy = Dialog.getNumber();
	}
	else {	miniy = depthprop;	}
	Zstep = abs(Zstep);
	
	// ------------- Echelles axe Y ---------------------
	miniy = -1*abs(miniy);
	maxiy = 	0;
	
	// ------------- Cas horizontal -----------------------------
	if (Yoyo_opt == "H" ) {
		timemax = time_end - time_deb;
		timeprop = 600 *(1+ floor(timemax/600));
		if (timeprop > 3600) 		Zstep = 1800;
		else if (timeprop > 1800) 	Zstep = 600;
		else if (timeprop > 60) 	Zstep = 60;
		miniy = 0;
		maxiy = timeprop;
		nbgraph = 1;
	} // if
	
	// ---------------------- suppression des valeurs nulles (remontee) et LISSAGE -------------------------------
	print("A purger");	selectWindow("Log");		run("Close");
	Nb_01j = 	newArray(j-nmoy);	
	Nb_02j = 	newArray(j-nmoy);	
	Nb_03j = 	newArray(j-nmoy);	
	Depthj = 	newArray(j-nmoy);
	Timej =		newArray(j-nmoy);
	
	maxNb_01 =0;
	maxNb_02 =0;
	maxNb_03 =0;
	maxNb_01j =0;
	maxNb_02j =0;
	maxNb_03j =0;
	
	// --------------- Lissage de base ------------------------------
	for (i = 0 ; i<j-nmoy ; i++) {
		if (i/500 == floor(i/500) && i !=0 ) {	showStatus("Averaging data  : "+i+" /"+j);	} // if
		depth = 	Depth[i];
		depth = 	parseFloat(depth);
		for (k = i+1;k<i+nmoy;k++) {	prof = Depth[k];		prof = parseFloat(prof);	depth = 	depth+prof;		} // for
		depth = 	depth/nmoy;
		Depthj[i] = 	depth;
		
		timef = 	Time[i];
		time = 		parseFloat(timef) - parseFloat(time_deb);
		for (k = i+1;k<i+nmoy;k++) {	tp = Time[k] - parseFloat(time_deb);			tp = parseFloat(tp);		time = 	time+tp;		} // for
		time = 		time/nmoy;
		Timej[i] = 	floor(time);
		
		data_prov = 	parseInt(Nb_01[i]);
		maxNb_01 = 	maxOf(maxNb_01,data_prov);
		for (k = i+1;k<i+nmoy;k++) {	nb = Nb_01[k];		nb = parseFloat(nb);		data_prov = data_prov+nb;	} // for
		data_prov = 	data_prov/nmoy;
		maxNb_01j = 	maxOf(maxNb_01j,data_prov);
		Nb_01j[i] = 	data_prov;	
		
		data_prov = 	parseInt(Nb_02[i]);
		maxNb_02 = 	maxOf(maxNb_02,data_prov);
		for (k = i+1;k<i+nmoy;k++) {	nb = Nb_02[k];		nb = parseFloat(nb);		data_prov = data_prov+nb;	} // for
		data_prov = 	data_prov/nmoy;
		maxNb_02j = 	maxOf(maxNb_02j,data_prov);
		Nb_02j[i] = 	data_prov;
		
		data_prov = 	parseInt(Nb_03[i]);
		maxNb_03 = 	maxOf(maxNb_03,data_prov);
		for (k = i+1;k<i+nmoy;k++) {	nb = Nb_03[k];		nb = parseFloat(nb);		data_prov = data_prov+nb;	} // for
		data_prov = 	data_prov/nmoy;
		maxNb_03j = 	maxOf(maxNb_03j,data_prov);
		Nb_03j[i] = 	data_prov;
		
	}
	// --------------- Lissage plus important -----------------
	nmoy = nmoy * 2;
	Nb_05j = 	newArray(j-nmoy);	
	Nb_06j = 	newArray(j-nmoy);
	Depthjb = 	newArray(j-nmoy);
	Timejb =	newArray(j-nmoy);
	Nb_04j = 	newArray(j-nmoy);
	maxNb_04 =0;	
	maxNb_05 =0;
	maxNb_06 =0;
	maxNb_04j =0;	
	maxNb_05j =0;
	maxNb_06j =0;
	
	for (i = 0 ; i<j-nmoy ; i++) {	
		
		depth = 	Depth[i];
		depth = 	parseFloat(depth);
		for (k = i+1;k<i+nmoy;k++) {	prof = Depth[k];		prof = parseFloat(prof);	depth = 	depth+prof;		} // for
		depth = 	depth/nmoy;
		Depthjb[i] = 	depth;
		
		timef = 	Time[i];
		time = 		parseFloat(timef) - parseFloat(time_deb);
		for (k = i+1;k<i+nmoy;k++) {	tp = Time[k] - parseFloat(time_deb);			tp = parseFloat(tp);		time = 	time+tp;		} // for
		time = 		time/nmoy;
		Timejb[i] = 	floor(time);
		
		data_prov = 	parseInt(Nb_04[i]);
		maxNb_04 = 	maxOf(maxNb_04,data_prov);
		for (k = i+1;k<i+nmoy;k++) {	nb = Nb_04[k];		nb = parseFloat(nb);		data_prov = data_prov+nb;	} // for
		data_prov = 	data_prov/nmoy;
		maxNb_04j = 	maxOf(maxNb_04j,data_prov);
		Nb_04j[i] = 	data_prov;
		
		data_prov = 	parseInt(Nb_05[i]);
		maxNb_05 = 	maxOf(maxNb_05,data_prov);
		for (k = i+1;k<i+nmoy;k++) {	nb = Nb_05[k];		nb = parseFloat(nb);		data_prov = data_prov+nb;	} // for
		data_prov = 	data_prov/nmoy;
		maxNb_05j = 	maxOf(maxNb_05j,data_prov);
		Nb_05j[i] = 	data_prov;
		
		data_prov = 	parseInt(Nb_06[i]);
		maxNb_05 = 	maxOf(maxNb_05,data_prov);
		for (k = i+1;k<i+nmoy;k++) {	nb = Nb_06[k];		nb = parseFloat(nb);		data_prov = data_prov+nb;	} // for
		data_prov = 	data_prov/nmoy;
		maxNb_06j = 	maxOf(maxNb_06j,data_prov);
		Nb_06j[i] = 	data_prov;
	} // for
	
	// ----------------- GRAPH --------------------------------------------------------------------------------------------
	ecranw= screenWidth();
	ecranh= screenHeight();
	
	//	final_hauteur = ecranh - 100;
	final_hauteur = 1000;
	final_largeur = floor(final_hauteur*2/3);
	dimlegende = 210;
	talon_gauche = 60;
	talon_droite = 16;
	talon_haut = 16;	// par Imagej
	vertical_dif = 53;
	hauteur_plot = final_hauteur - dimlegende;
	largeur_plot = final_largeur - talon_gauche - talon_droite;
	hauteur_remove_bas = 38;
	//---------- Dimensions pour les données et le cadre -----------------------------
	//run("Profile Plot Options...", "width="+largeur_plot+" height="+hauteur_plot+" minimum=0 maximum=0 vertical interpolate");
	run("Profile Plot Options...", "width="+largeur_plot+" height="+hauteur_plot+" minimum=0 maximum=0 fixed vertical");
	maxNb_01 = 100 *(1+ floor(maxNb_01/100));
	maxNb_01 =	maxOf(100,maxNb_01);
	
	maxNb_02 = 10 *(1+ floor(maxNb_02/10));
	maxNb_02 =	maxOf(10,maxNb_02);
	
	maxNb_03 = 10 *(1+ floor(maxNb_03/10));
	maxNb_03 =	maxOf(10,maxNb_03);
	
	maxNb_04 = 2 *(1+ floor(maxNb_04/2));
	maxNb_04 =	maxOf(2,maxNb_04);
	
	maxNb_05 = 	(1+ floor(maxNb_05));
	maxNb_05 =	maxOf(1,maxNb_05);
	
	maxNb_06 = 	(1+ floor(maxNb_06));
	maxNb_06 =	maxOf(1,maxNb_06);
	
	maxNb_01j = 100 *(1+ floor(maxNb_01j/100));
	maxNb_01j =	maxOf(100,maxNb_01j);
	
	maxNb_02j = 10 *(1+ floor(maxNb_02j/10));
	maxNb_02j =	maxOf(50,maxNb_02j);
	
	maxNb_03j = 10 *(1+ floor(maxNb_03j/10));
	maxNb_03j =	maxOf(20,maxNb_03j);
	
	maxNb_04j = 2 *(1+ floor(maxNb_04j/2));
	maxNb_04j =	maxOf(2,maxNb_04j);
	
	maxNb_05j = 1 *(1+ floor(maxNb_05j/1));
	maxNb_05j =	maxOf(1,maxNb_05j);
	
	maxNb_06j = (1+ floor(maxNb_06j));
	maxNb_06j =	maxOf(0.5,maxNb_06j);
	
	
	
	// ------------ Mise au format de la date -------------------------
	yymmdd = substring(time_deb_txt,0,8);
	hh = substring(time_deb_txt,8,10);
	mm = substring(time_deb_txt,10,12);
	ss = substring(time_deb_txt,12,14);
	//	ms = substring(time_deb_txt,16,19);
	time_deb_txt = 	yymmdd+" "+hh+":"+mm+":"+ss;
	yymmdd = substring(time_end_txt,0,8);
	hh = substring(time_end_txt,8,10);
	mm = substring(time_end_txt,10,12);
	ss = substring(time_end_txt,12,14);
	//	ms = substring(time_end_txt,16,19);
	time_end_txt = 	yymmdd+" "+hh+":"+mm+":"+ss;
	
	// -------------------- Boucle sur les 2 graphes -------------------------
	for (graph=0;graph < nbgraph;graph++) {
		if (graph == 1) {	miniy = -200;		Zstep = 20;			}
		// ------------ Les 3 courbes sont calées sur 0 ---------
		minix = 	0;
		nbtics =  floor(abs(miniy)/Zstep);
		if (miniy == 0) nbtics =  floor(abs(maxiy)/Zstep);
		
		// ------------------- LIssage ----------------------------
		if (	lissage == true) {
			
			// ---------------- #1 -------------------------
			if (Yoyo_opt != "H" ) {	Plot.create(profile+" abundance",profile,"Z (m)");	}
			else {			Plot.create(profile+" abundance",profile,"Time (sec)");	}
			Plot.setLimits(minix, maxNb_01j, miniy, maxiy);
			Plot.setColor("red");
			if (Yoyo_opt != "H" ) {	Plot.add("line", Nb_01j,Depthj);	}
			else {			Plot.add("line", Nb_01j,Timej);	}
			Plot.show();
			setLineWidth(1);
			run("Colors...", "foreground=black background=white selection=red");
			//	saveAs("jpg", dirprocessed+"UVP5_"+profile+"_abundance_a.jpg"); 
			rename("All");
			
			// ---------------- #2 -------------------------
			if (Yoyo_opt != "H" ) {	Plot.create(profile+"_2",profile,"Z (m)");	}
			else {			Plot.create(profile+"_2",profile,"Time (sec)");	}
			Plot.setLimits(minix, maxNb_02j, miniy, maxiy);
			Plot.setColor("blue");
			if (Yoyo_opt != "H" ) {	Plot.add("line", Nb_02j,Depthj);	}
			else {			Plot.add("line", Nb_02j,Timej);	}
			Plot.show();
			selectImage(profile+"_2");
			//	saveAs("jpg", dirprocessed+"UVP5_"+profile+"_grey.jpg"); 
			rename("UVP5_"+profile+"_2.jpg"); 
			imageCalculator("AND", "All","UVP5_"+profile+"_2.jpg");
			
			// ---------------- #3 -------------------------
			if (Yoyo_opt != "H" ) {	Plot.create(profile+"_3",profile,"Z (m)");	}
			else {			Plot.create(profile+"_3",profile,"Time (sec)");	}
			Plot.setLimits(minix, maxNb_03j, miniy, maxiy);
			Plot.setColor("green");
			if (Yoyo_opt != "H" ) {	Plot.add("line", Nb_03j,Depthj);	}
			else {			Plot.add("line", Nb_03j,Timej);	}	
			Plot.show();
			selectImage(profile+"_3");
			rename("UVP5_"+profile+"_3.jpg"); 
			imageCalculator("AND", "All","UVP5_"+profile+"_3.jpg");
			
			// ---------------- #4 -------------------------
			if (Yoyo_opt != "H" ) {	Plot.create(profile+"_4",profile,"Z (m)");	}
			else {			Plot.create(profile+"_4",profile,"Time (sec)");	}
			Plot.setLimits(minix, maxNb_04j, miniy, maxiy);
			Plot.setColor("cyan");
			if (Yoyo_opt != "H" ) {	Plot.add("line", Nb_04j,Depthjb);	}
			else {			Plot.add("line", Nb_04j,Timejb);	}	
			Plot.show();
			selectImage(profile+"_4");
			rename("UVP5_"+profile+"_4.jpg"); 
			imageCalculator("AND", "All","UVP5_"+profile+"_4.jpg");
			
			// ---------------- #5 -------------------------
			if (Yoyo_opt != "H" ) {	Plot.create(profile+"_5",profile,"Z (m)");	}
			else {			Plot.create(profile+"_5",profile,"Time (sec)");	}
			Plot.setLimits(minix, maxNb_05j, miniy, maxiy);
			Plot.setColor("black");
			if (Yoyo_opt != "H" ) {	Plot.add("line", Nb_05j,Depthjb);	}
			else {			Plot.add("line", Nb_05j,Timejb);	}	
			Plot.show();
			selectImage(profile+"_5");
			rename("UVP5_"+profile+"_5.jpg"); 
			imageCalculator("AND", "All","UVP5_"+profile+"_5.jpg");
		}
		else {
			// ------------- PAS DE LISSAGE ----------------------------
			// ---------------- #1 -------------------------
			if (Yoyo_opt != "H" ) {	Plot.create(profile+" abundance",profile,"Z (m)");	}
			else {			Plot.create(profile+" abundance",profile,"Time (sec)");	}
			Plot.setLimits(minix, maxNb_01, miniy, maxiy);
			Plot.setColor("red");
			if (Yoyo_opt != "H" ) {	Plot.add("line", Nb_01,Depth);	}
			else {			Plot.add("line", Nb_01,Time);	}
			Plot.show();
			setLineWidth(1);
			run("Colors...", "foreground=black background=white selection=red");
			//	saveAs("jpg", dirprocessed+"UVP5_"+profile+"_abundance_a.jpg"); 
			rename("All");
			
			// ---------------- #2 -------------------------
			if (Yoyo_opt != "H" ) {	Plot.create(profile+"_2",profile,"Z (m)");	}
			else {			Plot.create(profile+"_2",profile,"Time (sec)");	}
			Plot.setLimits(minix, maxNb_02, miniy, maxiy);
			Plot.setColor("blue");
			if (Yoyo_opt != "H" ) {	Plot.add("line", Nb_02,Depth);	}
			else {			Plot.add("line", Nb_02,Time);	}
			Plot.show();
			selectImage(profile+"_2");
			//	saveAs("jpg", dirprocessed+"UVP5_"+profile+"_grey.jpg"); 
			rename("UVP5_"+profile+"_2.jpg"); 
			imageCalculator("AND", "All","UVP5_"+profile+"_2.jpg");
			
			// ---------------- #3 -------------------------
			if (Yoyo_opt != "H" ) {	Plot.create(profile+"_3",profile,"Z (m)");	}
			else {			Plot.create(profile+"_3",profile,"Time (sec)");	}
			Plot.setLimits(minix, maxNb_03, miniy, maxiy);
			Plot.setColor("green");
			if (Yoyo_opt != "H" ) {	Plot.add("line", Nb_03,Depth);	}
			else {			Plot.add("line", Nb_03,Time);	}	
			Plot.show();
			selectImage(profile+"_3");
			rename("UVP5_"+profile+"_3.jpg"); 
			imageCalculator("AND", "All","UVP5_"+profile+"_3.jpg");
			
			// ---------------- #4 -------------------------
			if (Yoyo_opt != "H" ) {	Plot.create(profile+"_4",profile,"Z (m)");	}
			else {			Plot.create(profile+"_4",profile,"Time (sec)");	}
			Plot.setLimits(minix, maxNb_04, miniy, maxiy);
			Plot.setColor("cyan");
			if (Yoyo_opt != "H" ) {	Plot.add("line", Nb_04,Depth);	}
			else {			Plot.add("line", Nb_04,Time);	}	
			Plot.show();
			selectImage(profile+"_4");
			rename("UVP5_"+profile+"_4.jpg"); 
			imageCalculator("AND", "All","UVP5_"+profile+"_4.jpg");
			
			// ---------------- #5 -------------------------
			if (Yoyo_opt != "H" ) {	Plot.create(profile+"_5",profile,"Z (m)");	}
			else {			Plot.create(profile+"_5",profile,"Time (sec)");	}
			Plot.setLimits(minix, maxNb_05, miniy, maxiy);
			Plot.setColor("black");
			if (Yoyo_opt != "H" ) {	Plot.add("line", Nb_05,Depth);	}
			else {			Plot.add("line", Nb_05,Time);	}	
			Plot.show();
			selectImage(profile+"_5");
			rename("UVP5_"+profile+"_5.jpg"); 
			imageCalculator("AND", "All","UVP5_"+profile+"_5.jpg");
		}
		
		// ------------- Traits horizontaux --------------------
		hauteur_courante  = getHeight();
		hauteur_plot_cor = hauteur_courante - vertical_dif;
		setColor(0, 0, 0);
		if (miniy == 0) {	ZZ = talon_haut + Zstep*hauteur_plot_cor/abs(maxiy);
			for (i=1;i<nbtics;i++) {	drawLine(talon_gauche,ZZ,largeur_plot+talon_gauche,ZZ);	ZZ = ZZ+ Zstep*hauteur_plot_cor/abs(maxiy);	} // for
		}
		else {	ZZ = talon_haut + Zstep*hauteur_plot_cor/abs(miniy);
			for (i=1;i<nbtics;i++) {	drawLine(talon_gauche,ZZ,largeur_plot+talon_gauche,ZZ);	ZZ = ZZ+ Zstep*hauteur_plot_cor/abs(miniy);	} // for
		} // else
		
		// ----------------- Ajout des echelles sur graphe supperpose ----------
		selectImage("All");
		makeRectangle(0, hauteur_courante - hauteur_remove_bas, final_largeur, hauteur_remove_bas);
		//	saveAs("jpg", dirprocessed+"UVP5_"+profile+"_temp.jpg"); 	rename("All");
		run("Clear");
		run("Select None");
		hauteur_canvas = hauteur_courante + dimlegende;
		text = 	 "width="+final_largeur+" height="+hauteur_canvas+" position=Top-Left";
		run("Canvas Size...",text);
		
		// ------------------ Legende CRUISE STATION CAST TIME -----------
		setFont("SansSerif" , 16);
		setLineWidth(1);
		setColor(0,0,0);
		drawString("Project : "+Cruise+"  /  Stn Id : "+stationid, talon_gauche, hauteur_courante+134);	
		drawString("Profile Id (cast) :  "+profile, talon_gauche, hauteur_courante+160);
		setFont("SansSerif" , 12);
		setFont("SansSerif" , 14);		
		drawString("Start (UTC)  :  "+time_deb_txt,talon_gauche, hauteur_courante+180);	
		drawString("End   (UTC)  :  "+time_end_txt,talon_gauche, hauteur_courante+200);	
		setFont("SansSerif" , 12);
		
		if (	lissage == true) {	
			// --------------- 1 (rouge) -----------------------
			setColor(255, 0, 0);
			drawLine(talon_gauche,hauteur_courante+1,largeur_plot+talon_gauche,hauteur_courante+1);
			xstep = 100;
			x_step = talon_gauche;
			nbtics =  floor(abs(maxNb_01j)/xstep)+1;
			for (i=0;i<nbtics;i++) {	drawLine(x_step,hauteur_courante+1,x_step,hauteur_courante+1-5);	x_step = x_step + xstep*largeur_plot/maxNb_01j;	} // for
			drawString("LPM ABUNDANCE <125µm (# / L)", 100, hauteur_courante+1-4);
			drawString("0", talon_gauche, hauteur_courante+1-3);
			drawString(maxNb_01j, largeur_plot-20+talon_gauche, hauteur_courante+1-3);
			
			// --------------- 2 -------------------------------
			setColor(0, 0, 255);
			drawLine(talon_gauche,hauteur_courante+27,largeur_plot+talon_gauche,hauteur_courante+27);
			xstep = 10;
			x_step = talon_gauche;
			nbtics =  floor(abs(maxNb_02j)/xstep)+1;
			for (i=0;i<nbtics;i++) {	drawLine(x_step,hauteur_courante+27,x_step,hauteur_courante+27-5);	x_step = x_step + xstep*largeur_plot/maxNb_02j;	} // for
			drawString("LPM ABUNDANCE 125-250µm (# / L)", 100, hauteur_courante+27-4);
			drawString("0", talon_gauche, hauteur_courante+27-3);
			maxixgrey = toString(maxixgrey);
			drawString(" "+maxNb_02j, largeur_plot-20+talon_gauche, hauteur_courante+27-3);
			
			// --------------- 3 --------------------------------
			setColor(0, 255, 0);
			drawLine(talon_gauche,hauteur_courante+53,largeur_plot+talon_gauche,hauteur_courante+53);
			xstep = 5;
			x_step = talon_gauche;
			nbtics =  floor(abs(maxNb_03j)/xstep)+1;
			for (i=0;i<nbtics;i++) {	drawLine(x_step,hauteur_courante+53,x_step,hauteur_courante+53-5);	x_step = x_step + xstep*largeur_plot/maxNb_03j;	} // for
			drawString("LPM ABUNDANCE 250-500µm (# / L)", 100, hauteur_courante+53-4);
			drawString("0", talon_gauche, hauteur_courante+53-3);
			maxixsize = toString(maxixsize);
			drawString("  "+maxNb_03j, largeur_plot-20+talon_gauche, hauteur_courante+53-3);
			
			// --------------- 4 -------------------------------
			setColor(0, 255, 255);
			drawLine(talon_gauche,hauteur_courante+80,largeur_plot+talon_gauche,hauteur_courante+80);
			xstep = 0.5;
			if (abs(maxNb_04j) > 5) xstep = 1;
			x_step = talon_gauche;
			nbtics =  floor(abs(maxNb_04j)/xstep)+1;
			for (i=0;i<nbtics;i++) {	drawLine(x_step,hauteur_courante+80,x_step,hauteur_courante+80-5);	x_step = x_step + xstep*largeur_plot/maxNb_04j;	} // for
			drawString("LPM ABUNDANCE 500-1000µm (# / L)", 100, hauteur_courante+80-4);
			drawString("0", talon_gauche, hauteur_courante+80-3);
			maxixgrey = toString(maxixgrey);
			drawString(" "+maxNb_04j, largeur_plot-20+talon_gauche, hauteur_courante+80-3);
			
			// --------------- 5 --------------------------------
			setColor(0, 0, 0);
			drawLine(talon_gauche,hauteur_courante+107,largeur_plot+talon_gauche,hauteur_courante+107);
			xstep = 0.1;
			if (abs(maxNb_05j) > 1) xstep = 0.25;
			x_step = talon_gauche;
			nbtics =  floor(abs(maxNb_05j)/xstep)+1;
			for (i=0;i<nbtics;i++) {	drawLine(x_step,hauteur_courante+107,x_step,hauteur_courante+107-5);	x_step = x_step + xstep*largeur_plot/maxNb_05j;	} // for
			drawString("LPM ABUNDANCE 1000-2000µm (# / L)", 100, hauteur_courante+107-4);
			drawString("0", talon_gauche, hauteur_courante+107-3);
			maxixsize = toString(maxixsize);
			drawString("  "+maxNb_05j, largeur_plot-20+talon_gauche, hauteur_courante+107-3);
		}
		else {	// ----------------- Pas de lissage -----------------------
			// --------------- 1 (rouge) -----------------------
			setColor(255, 0, 0);
			xstep = 100;
			x_step = talon_gauche;
			nbtics =  floor(abs(maxNb_01)/xstep)+1;
			for (i=0;i<nbtics;i++) {	drawLine(x_step,hauteur_courante+1,x_step,hauteur_courante+1-5); x_max = x_step;	x_step = x_step + xstep*largeur_plot/maxNb_01;	} // for
			drawLine(talon_gauche,hauteur_courante+1,largeur_plot+talon_gauche,hauteur_courante+1);
			drawString("LPM ABUNDANCE <125µm (# / L)", 100, hauteur_courante+1-4);
			drawString("0", talon_gauche, hauteur_courante+1-3);
			drawString(maxNb_01, largeur_plot-20+talon_gauche, hauteur_courante+1-3);
			
			// --------------- 2 -------------------------------
			setColor(0, 0, 255);
			xstep = 10;
			x_step = talon_gauche;
			nbtics =  floor(abs(maxNb_02)/xstep)+1;
			for (i=0;i<nbtics;i++) {	drawLine(x_step,hauteur_courante+27,x_step,hauteur_courante+27-5); x_max = x_step;	x_step = x_step + xstep*largeur_plot/maxNb_02;	} // for
			drawLine(talon_gauche,hauteur_courante+27,largeur_plot+talon_gauche,hauteur_courante+27);
			drawString("LPM ABUNDANCE 125-250µm (# / L)", 100, hauteur_courante+27-4);
			drawString("0", talon_gauche, hauteur_courante+27-3);
			maxixgrey = toString(maxixgrey);
			drawString(" "+maxNb_02, largeur_plot-20+talon_gauche, hauteur_courante+27-3);
			
			// --------------- 3 --------------------------------
			setColor(0, 255, 0);
			xstep = 2;
			x_step = talon_gauche;
			nbtics =  floor(abs(maxNb_03)/xstep)+1;
			for (i=0;i<nbtics;i++) {	drawLine(x_step,hauteur_courante+53,x_step,hauteur_courante+53-5); x_max = x_step;	x_step = x_step + xstep*largeur_plot/maxNb_03;	} // for
			drawLine(talon_gauche,hauteur_courante+53,largeur_plot+talon_gauche,hauteur_courante+53);
			drawString("LPM ABUNDANCE 250-500µm (# / L)", 100, hauteur_courante+53-4);
			drawString("0", talon_gauche, hauteur_courante+53-3);
			maxixsize = toString(maxixsize);
			drawString("  "+maxNb_03, largeur_plot-20+talon_gauche, hauteur_courante+53-3);
			
			// --------------- 4 -------------------------------
			setColor(0, 255, 255);
			xstep = 2;
			if (abs(maxNb_04) < 2) xstep = 0.5;
			x_step = talon_gauche;
			nbtics =  floor(abs(maxNb_04)/xstep)+1;			
			for (i=0;i<nbtics;i++) {	drawLine(x_step,hauteur_courante+80,x_step,hauteur_courante+80-5); x_max = x_step;	x_step = x_step + xstep*largeur_plot/maxNb_04;	} // for
			drawLine(talon_gauche,hauteur_courante+80,largeur_plot+talon_gauche,hauteur_courante+80);
			drawString("LPM ABUNDANCE 500-1000µm (# / L)", 100, hauteur_courante+80-4);
			drawString("0", talon_gauche, hauteur_courante+80-3);
			maxixgrey = toString(maxixgrey);
			drawString(" "+maxNb_04, largeur_plot-20+talon_gauche, hauteur_courante+80-3);
			
			// --------------- 5 --------------------------------
			setColor(0, 0, 0);
			xstep = 0.2;
			if (abs(maxNb_05) < 1) xstep = 0.1;
			x_step = talon_gauche;
			nbtics =  floor(abs(maxNb_05)/xstep)+1;
			for (i=0;i<nbtics;i++) {	drawLine(x_step,hauteur_courante+107,x_step,hauteur_courante+107-5); x_max = x_step;	x_step = x_step + xstep*largeur_plot/maxNb_05;	} // for
			drawLine(talon_gauche,hauteur_courante+107,largeur_plot+talon_gauche,hauteur_courante+107);
			drawString("LPM ABUNDANCE 1000-2000µm (# / L)", 100, hauteur_courante+107-4);
			drawString("0", talon_gauche, hauteur_courante+107-3);
			maxixsize = toString(maxixsize);
			drawString("  "+maxNb_05, largeur_plot-20+talon_gauche, hauteur_courante+107-3);
		}
		
		// ----------- Image finale -------------------------------------------------------
		selectImage("All"); 
		if (Yoyo_opt == "H" ) {	saveAs("jpg", dirprocessed+"UVP5_"+profile+"_time_histo.jpg"); 	}
		else if (graph == 1) {	saveAs("jpg", dirprocessed+"UVP5_"+profile+"_200m_histo.jpg"); 	}
		else {			saveAs("jpg", dirprocessed+"UVP5_"+profile+"_histo.jpg"); 		}// else
		
		// ------------------ Fermeture des graphs -----------
		selectImage("UVP5_"+profile+"_2.jpg");
		close();
		selectImage("UVP5_"+profile+"_3.jpg");
		close();
		selectImage("UVP5_"+profile+"_4.jpg");
		close();
		selectImage("UVP5_"+profile+"_5.jpg");
		close();
		if (Yoyo_opt == "H" ) {	selectImage("UVP5_"+profile+"_time_histo.jpg"); 	}
		else if (graph == 1) {	selectImage("UVP5_"+profile+"_200m_histo.jpg"); 	}
		else {			selectImage("UVP5_"+profile+"_histo.jpg");	}// else	
		if (appel != "root") 	{	wait(1000); close(); }
	} // for
} //for
// ----------------------------- FIN ----------------------------------------------
setTool(11);
ret = "OK";
return ret;

//---------------------------Zooscan_vignettes_for_train.txt---------------------------------
version = "7.10";
date = "2012/07/09";

// Cette routine ne fonctionne que dans le respect de l'arborescence Zooscan_scan\_work\
args = getArgument();
arg = split(args, " ");
chem = arg[0];
projfolder = arg[1];

lon = lengthOf(projfolder);
zoosc = indexOf(projfolder, "Zooscan_");
proj = substring(projfolder, zoosc + 8, lon);

chemscan = projfolder + "\\Zooscan_scan\\";
chemwork1 = chemscan + "_work\\";
chemtemp = chem + "Zooscan_temp\\";
chemresults = projfolder + "\\Zooscan_results\\";
chemunsorted = projfolder + "\\PID_process\\" + "\\Unsorted_vignettes_pid\\";

titre = "Hello";
size = 1;
mode = false;
resolution = "2400";
longline = "1";
contrast = 1.1;
axesauto = 0;
deb = 0;
header = 0;
learnnb = 0;
x1 = 10;
sizeref = 70;
longline = parseFloat(longline);
pidfile = 1;
nbval2 = 0;
minvig = 0;
maxvig = 10000;
start = 1;
Pred = "NO";
testout = 0;
disp1 = 0;
disp2 = 0;
nb = 4;
duration = 1000;
masksave = "1";
chemin = "unused";


if (File.exists(chemunsorted)) {
    //--------------------------------chemunsorted existe --------------------------------------
    unsortedpid = getFileList(chemunsorted);
    sizepidlearn = unsortedpid.length;
    if (sizepidlearn > 0) { //----------------------Il existe quelque chose dans le chemunsorted-----------------------
        // Selection des fichiers dont le nom comporte le mot "_dat1.pid";
        j = 0;
        list = newArray(sizepidlearn);
        for (i = 0; i < sizepidlearn; i++) {
            ctrl = indexOf(unsortedpid[i], "_dat1.pid");
            if (ctrl > 0) {
                rr = unsortedpid[i];
                list[j] = rr;
                j = j + 1;
            } // if
        } // for	
        if (j == 0) {
            getBoolean("No ''_dat1.pid'' file in \n" + chemunsorted + "      \nPress CANCEL to Abort             ");
        } // if
        else { // ---------------- Purger la liste ----------------------
            pidlist = newArray(j);
            for (i = 0; i < j; i++) {
                rr = list[i];
                pidlist[i] = rr;
            } // for
            Dialog.create("Zooscan vignettes for train : " + version);
            Dialog.addMessage("------------------------------------------------------------------------------------------------------------------------------------------");
            Dialog.addMessage("Project :  " + proj);
            Dialog.addMessage("------------------------------------------------------------------------------------------------------------------------------------------");
            Dialog.addMessage("Vignettes will be extracted from the PID files placed into the folder :  ");
            Dialog.addMessage(chemunsorted);
            Dialog.addMessage("PRESS OK when done !          ");
            Dialog.addMessage("------------------------------------------------------------------------------------------------------------------------------------------");
            aff1 = newArray("Extract all vignettes", "Select vignette number range", "Random extraction of vignettes");
            Dialog.addChoice("Select method  ", aff1);
            aff = newArray(4800, 2400, 1200, 600, 300);
            Dialog.addChoice("Resolution (dpi)   ", aff);
            Dialog.addCheckbox("Add outlines ?", false);
            Dialog.addCheckbox("Clear outside outlines ?", true);
            Dialog.addMessage("- If gamma > 1=> contrast enhanced              ");
            Dialog.addMessage("- If gamma < 1=> image smoothed              ");
            Dialog.addMessage("- If gamma = 1=> No gamma correction              ");
            Dialog.addNumber("           Gamma value (0.5 - 5) ", contrast);
            Dialog.addMessage("------------------------------------------------------------------------------------------------------------------------------------------");
            Dialog.addCheckbox("Fast extraction (images not displayed) ? ", true);
            Dialog.addCheckbox("Remove legend and corners ? ", false);
            Dialog.addCheckbox("Keep only selected object and clean outside (threshold= 243)? ", false);
            Dialog.addCheckbox("Flip image vertically ? ", false);
            Dialog.addCheckbox("Replace ''Gamma'' info by ''Zooscan CNRS'' text ?", false);
            formatlist = newArray("jpeg", "bmp", "tif");
            Dialog.addChoice("            Vignette output format (jpeg requested for PKId)   ", formatlist);
            Dialog.addMessage("------------------------------------------------------------------------------------------------------------------------------------------");

            Dialog.show();

            extract = Dialog.getChoice();
            resolution = Dialog.getChoice();
            maskout = Dialog.getCheckbox();
            maskclear = Dialog.getCheckbox();
            gamma = Dialog.getNumber();
            mode = Dialog.getCheckbox();
            legendremove = Dialog.getCheckbox();
            completeclean = Dialog.getCheckbox();
            flipvig = Dialog.getCheckbox();
            legendzooscan = Dialog.getCheckbox();
            format = Dialog.getChoice();

            // ---------------------- Synthese -----------------------------------------
            gamma = maxOf(gamma, 0.5);
            gamma = minOf(gamma, 5);
            textgamma = "value=" + gamma;
            resolution = parseInt(resolution);
            if (resolution == 300) {
                longline = 5;
            } // if
            vignettetext = toString(longline);
            x2 = x1 + longline * resolution / 25.4;
            print("Resolution= ", resolution);
            pixels = 25.4 / resolution;
            clean = 0;
            legend = 1;
            flip = "0";
            upper = 243;
            if (completeclean == true) {
                maskout = false;
                maskclear = false;
                clean = "1";
                upper = getNumber("Modify threshold accordingly to the value in the PID file   ", upper);
                upper = toString(upper);
            } // if 
            if (legendremove == true) legend = "0";
            if (flipvig == true) flip = "1";

            // ----------------- Batch si version ----------------------------------------
            if (mode == true) requires("1.41o");
            // --------------- Si on choisit de selectionner les N� de vignettes ---------------------------------
            if (extract == "Select vignette number range") {
                Dialog.create("Vignette range for each image ?    ")
                Dialog.addNumber("- Minimum vignette number  ", minvig);
                Dialog.addNumber("- Maximum vignette number ", maxvig);
                Dialog.show();
                minvig = Dialog.getNumber();
                maxvig = Dialog.getNumber();
                //	minvig--;
                //	maxvig++;
            } // if
            if (extract == "Random extraction of vignettes") {
                Dialog.create("Vignette Random Extraction    ")
                Dialog.addNumber("- Number of vignettes to be extracted from each image ", 50);
                Dialog.show();
                nbvig = Dialog.getNumber();
            } // if
        } // else
    } // if
    else {
        getBoolean(chemunsorted + "\ndoesn't contain any PID file !      \nPress CANCEL to Abort                                      ");
    } // else
} // if
else {
    getBoolean(chemunsorted + " doesn't exist.      \nPress CANCEL to Abort                                 ");
} // else
if (isOpen("Log")) {
    selectWindow("Log");
    run("Close");
} // if
// ---------- Du 1er au dernier PID ---------------------------------------
bilan = " ";
for (k = 0; k < pidlist.length; k++) {
    pidfile = pidlist[k];
    long = lengthOf(pidfile);
    rr = substring(pidfile, 0, long - 9);
    imagezip = chemwork1 + "\\" + rr + "\\" + rr + "_vis1.zip";
    imagejpg = chemwork1 + "\\" + rr + "\\" + rr + "_vis1.jpg";
    imagemsk = chemwork1 + "\\" + rr + "\\" + rr + "_msk1.gif";
    imageout = chemwork1 + "\\" + rr + "\\" + rr + "_out1.gif";
    zipexist = File.exists(imagezip);
    jpgexist = File.exists(imagejpg);
    mskexist = File.exists(imagemsk);
    outexist = File.exists(imageout);
    // --------------- OUverture du Pid car images existent -----------
    if ((zipexist == 1 || jpgexist == 1) && mskexist == 1 && outexist == 1) {
        openpid = chemunsorted + pidfile;
        open(openpid);
        wait(500);
        config = getInfo();
        pid = split(config, "\n");
        run("Close");
        //-----------------Recherche DATA section--------------------------
        for (i = 0; i < pid.length; i++) {
            ctrl1 = indexOf(pid[i], "[Data]");
            if (ctrl1 >= 0) deb = i + 1;
        } // for
        //------------------Detection des N� de colonnes pour les champs-------------
        coltag = 0;
        a = replace(pid[deb], ";", " ");
        entete = split(a, "\ ");
        for (i = 0; i < entete.length; i++) {
            v = entete[i];
            if (v == "Tag") {
                coltag = i;
            } //if
        } // for
        valeur = entete[0];
        pligne = valeur;
        long = entete.length - 1;
        for (j = 1; j < long + 1; j++) {
            valeur = entete[j];
            pligne = pligne + ";" + valeur;
        } // if
        if (extract == "Random extraction of vignettes") pligne = pligne + ";" + "Random";
        if (start == 1) {
            print(pligne);
            start = 0;
        } // if	
        // ------------------------ Boucle sur les lignes---------------------------------
        start = deb + 1;
        if (header == 0) {
            start = deb;
            header = 1;
        } // if
        showStatus("Loading " + pidfile);
        nbval = pid.length - deb; // -1;
        identligne = newArray(nbval);
        indexmat = 0;
        for (i = start; i < pid.length; i++) {
            mat = pid[i];
            mat = replace(mat, ";", " ");
            item = split(mat, "\ ");
            if (extract == "Select vignette number range" || extract == "Extract all vignettes") {
                // --------------------Boucle sur les items----------------------------------
                valeur = item[0];
                pligne = valeur;
                Nbb = parseInt(valeur);
                long = item.length;
                //----------------Suppression des TAG = 0 et Tag = 2 (dernier colonne) ----------------------------------------
                //	if (coltag> 0) 
                long = entete.length - 1;
                for (j = 1; j < long + 1; j++) {
                    valeur = item[j];
                    pligne = pligne + ";" + valeur;
                } // if
                // ---------- On n'imprime que les donnees tag = 1. On supprime donc les doublons du PID ainsi que les Tag = 0 ---------------
                if (coltag == 0) {
                    if (Nbb >= minvig && Nbb <= maxvig) {
                        print(pligne);
                        learnnb++;
                    } // if	
                } // if
                else {
                    TAG = item[coltag];
                    if (TAG == 1 && Nbb >= minvig && Nbb <= maxvig) {
                        print(pligne);
                        learnnb++;
                    } // if	
                } // else	
            } // 
            // --------------------- Random---------------------------
            if (extract == "Random extraction of vignettes") {
                valeur = item[0];
                pligne = valeur;
                Nbb = parseInt(valeur);
                long = item.length;
                //----------------Suppression des TAG = 0 et Tag = 2 (dernier colonne) ----------------------------------------
                //	if (coltag> 0) 
                long = entete.length - 1;
                for (j = 1; j < long + 1; j++) {
                    valeur = item[j];
                    pligne = pligne + ";" + valeur;
                } // if
                pligne = pligne + ";" + random;
                // ---------- On n'imprime que les donnees tag = 1. On supprime donc les doublons du PID ainsi que les Tag = 0 ---------------
                if (coltag == 0) {
                    if (Nbb >= minvig && Nbb <= maxvig) {
                        identligne[indexmat] = pligne;
                        indexmat++;
                    } // if	
                } // if
                else {
                    TAG = item[coltag];
                    if (TAG == 1 && Nbb >= minvig && Nbb <= maxvig) {
                        identligne[indexmat] = pligne;
                        indexmat++;
                    } // if	
                } // else	
            } // if random
        } // for (boucle sur les lignes)
        if (extract == "Random extraction of vignettes") { // ------------ Classement de random decroissant----------------------------------------------
            sortedligne = newArray(indexmat);
            aff = newArray(indexmat);
            index = 0;
            while (index < indexmat) {
                showStatus("SORTING FILE " + pidfile + " index = " + index + " / " + indexmat + ",  WAIT !");
                minval = 100000000000;
                for (u = 0; u < indexmat; u++) {
                    ligneval = identligne[u];
                    mat = replace(ligneval, ";", " ");
                    val = split(mat, "\ ");
                    long = val.length;
                    data = val[long - 1];
                    data = parseFloat(data);
                    minval = minOf(data, minval);
                } // for
                for (u = 0; u < indexmat; u++) {
                    //---------------Trouvons tous les champs de cette valeur----------------
                    ligneval = identligne[u];
                    mat = replace(ligneval, ";", " ");
                    val = split(mat, "\ ");
                    long = val.length;
                    data = val[long - 1];
                    data = parseFloat(data);
                    if (data == minval) {
                        sorted = identligne[u];
                        sortedligne[index] = sorted;
                        //	print(sorted);
                        index++;
                        ligne = "10000000000";
                        for (t = 0; t < long - 2; t++) {
                            ligne = ligne + " 10000000000";
                        } // for
                        ligne = ligne + " 10";
                        identligne[u] = ligne;
                    } // if
                } // for
            } // while
            //-------------Inversement de l'ordre---------------------
            for (u = 0; u < indexmat; u++) {
                ind = indexmat - u - 1;
                Aff = sortedligne[ind];
                aff[u] = Aff;
            } // for
            // ------------- Impression des nbvig premiers ----------------------
            listp = minOf(nbvig, indexmat);
            for (u = 0; u < listp; u++) {
                pligne = aff[u];
                print(pligne);
            } // for
        } // if random
    } // if image existe
    else {
        bilan = bilan + "\n" + rr;
    } // else
} // for

//--------------------------------Sauvegarde d'un fichier "Learning" dans le "temp"-----------------------------------------
openfile = chemtemp + "trainPID.txt";
if (isOpen("Log")) {
    selectWindow("Log");
    sauve = "save=" + openfile;
    run("Text...", sauve);
} // if
open(openfile);
wait(1000);
config = getInfo();
dataline = split(config, "\n");
run("Close");
//-----------------Recherche Type de separateur ( tabs, ; ou space)--------------------------
sep = "tabs";
ctrl1 = indexOf(dataline[0], ";");
if (ctrl1 >= 0) {
    print("'';'' separator");
    sep = "dotcoma";
} // if
ctrl1 = indexOf(dataline[0], " ");
if (ctrl1 >= 0) {
    print("''space'' separator");
    sep = "space";
} // if
//------------------Creation des vecteurs---------------------------------
long = dataline.length;
print("Vignettes to extract  = ", long - 1);
nbval = long - 0 - 1;
identligne = newArray(nbval); // source
sortedligne = newArray(nbval); // triee
//------------------Detection des N� de colonnes pour les champs-------------
if (sep == "dotcoma") {
    a = replace(dataline[0], ";", " ");
    ligne = split(a, "\ ");
} // if
else if (sep == "tabs") {
    a = dataline[0];
    ligne = split(a, "\t");
} // if
else {
    getBoolean("Your file is not OK (no '';'', no tabs)            \nPress Cancel to abort                     ");
} // else
colident = 0;
collabel = 0;
colbx = 0;
colby = 0;
colarea = 0;
colwidth = 0;
colheight = 0;
colno = 0;
colpred = 0;
for (i = 0; i < ligne.length; i++) {
    v = ligne[i];
    if (v == "Label") {
        collabel = i;
    } //if	Nom de l image source
    if (v == "BX") {
        colbx = i;
    } //if
    if (v == "BY") {
        colby = i;
    } //if
    if (v == "Area") {
        colarea = i;
    } //if
    if (v == "Width") {
        colwidth = i;
    } //if
    if (v == "Height") {
        colheight = i;
    } //if
    if (v == "!Item") {
        colno = i;
    } //if
    ctrlpred = startsWith(v, "pred_");
    if (ctrlpred == 1) {
        colpred = i;
    } // if
} // for
if (colpred == 0 && extract == "pred") {
    showMessage("NO PREDICTION DATA                   \nSelect option ''VIS image folder'' to extract vignettes.       ");
} // if
if (collabel == 0 || colbx == 0 || colby == 0 || colwidth == 0 || colheight == 0 || (colpred == 0 && extract == "pred")) {
    showMessage("The file did not contain all the required fields    (check ''pred_'')              ");
} // if
else {
    test = 1;
} // else
//------------------Lecture des valeurs et ecriture des vecteurs------------------------------------
for (i = 0 + 1; i < long; i++) {
    if (sep != "tabs") {
        a = replace(dataline[i], ";", " ");
        ligne = split(a, "\ ");
    } // if
    else {
        a = dataline[i];
        ligne = split(a, "\t");
    } // if
    ind = i - 0 - 1;
    No = ligne[colno];
    Label = ligne[collabel];
    Area = ligne[colarea];
    Bx = ligne[colbx];
    By = ligne[colby];
    Width = ligne[colwidth];
    Height = ligne[colheight];
    Smm = parseInt(Area);
    Smm = Smm * pixels * pixels;
    Smm = Smm / 3.1416;
    Esd = 2 * pow(Smm, 0.5);
    if (extract == "pred") {
        Pred = ligne[colpred];
    } // if
    if (extract == "vis") {
        Pred = "VIS";
    } // if	
    messagelist = " No      Image                   Pred.          Area     ESD       Bx     By     Width     Height";
    b = No + "     " + Label + " " + Pred + "     " + Area + "     " + Esd + "     " + Bx + "     " + By + "     " + Width + "     " + Height;
    identligne[ind] = b;
    //	print("ind= ",ind," b= ",b);
} // for
colimg = 1;
colpred = 2;
colbx = 5;
colby = 6;
colwidth = 7;
colheight = 8;
//------------------------------TRI des vignettes image par image pour accelerer l'identification par la suite--------------------------------------------------------
index = 0;
col = 0;
deb = 0;
sortedligne = newArray(nbval);
vignettesname = newArray(nbval);
sortedvignettes = newArray(nbval);
nbtotvignettes = nbval;
// --------------------------- Recopie des valeurs dans une nouvelle matrice vignettelist ----------------------------
vignetteslist = newArray(nbval);
for (k = deb; k < nbtotvignettes; k++) {
    vignette = identligne[k];
    vignetteslist[k] = vignette;
} // for
// --------------------------- Liste des images source d'au moins une vignette -------------------------------------------
listimages = newArray(3000);
debimage = newArray(3000);
image = "ZZZZZZ";
indimg = 0;
for (k = 0; k < nbtotvignettes; k++) {
    vigligne = split(vignetteslist[k], " ");
    vigimage = vigligne[1];
    if (vigimage != image && vigimage != "ZZZZZZZZZZ") {
        listimages[indimg] = vigimage;
        vignetteslist[k] = "Z ZZZZZZZZZZ Z Z Z Z Z Z Z";
        for (g = 0; g < nbtotvignettes; g++) {
            // -------------------- Mise a ZZZZZZZZZZ des images du meme nom --------------
            vig = split(vignetteslist[g], " ");
            if (vigimage == vig[1]) {
                vignetteslist[g] = "Z ZZZZZZZZZZ Z Z Z Z Z Z Z";
            } // if
        } // for
        indimg++;
    } // if
} //  for
// ---------------------- Sauvegarde ----------------------------------------------
if (isOpen("Log")) {
    selectWindow("Log");
    run("Close");
} // if
for (r = 0; r < indimg; r++) {
    image = listimages[r];
    print("Image= ", image);
} // for
if (isOpen("Log")) {
    selectWindow("Log");
    sauve = "save=" + chemtemp + "Image_list.txt";
    run("Text...", sauve);
    run("Close");
} // if
// ------------------------- Boucle de TRI --------------------------------------------
for (r = 0; r < indimg; r++) {
    imageref = listimages[r];
    showStatus("Image = " + imageref + "  WAIT !");
    for (k = deb; k < nbtotvignettes; k++) { //---------------Trouvons tous les champs de cette valeur----------------
        ligneval = identligne[k];
        val = split(ligneval, "\ ");
        image = val[1];
        if (image == imageref) {
            sorted = identligne[k];
            sortedvignettes[index] = sorted;
            index++;
        } // if
    } // for
} // for	
//--------------------------------Sauvegarde d'un fichier dans le "temp"-----------------------------------------
if (isOpen("Log")) {
    selectWindow("Log");
    run("Close");
} // if
for (k = deb; k < nbtotvignettes; k++) {
    print(sortedvignettes[k]);
} // for
if (isOpen("Log")) {
    selectWindow("Log");
    sauve = "save=" + chemtemp + "sortedvignettes.txt";
    run("Text...", sauve);
    run("Close");
} // if

// --------------------- Copie de la matrice -----------------------------------------------------------------------------------------------
for (k = deb; k < identligne.length; k++) {
    oo = sortedvignettes[k];
    identligne[k] = oo;
} // for

//--------------------------Extraction des vignettes-------------------------------------------------------------------------------------------------------------------------------------------------
setFont("SansSerif", 9);
f = 10;
visdata = 0;
openimg = 0;
data = "          ";
message2 = "               ";
chemscan = projfolder + "\\Zooscan_scan\\";
run("Colors...", "foreground=black background=white selection=black");
valeur = "saturated=" + contrast;

//--------------------------------Sauvegarde d'un fichier dans le "temp"-----------------------------------------
if (isOpen("Log")) {
    selectWindow("Log");
    run("Close");
} // if
for (lig = 0; lig < identligne.length; lig++) {
    ligne = identligne[lig];
    ligne = split(ligne, "\ ");
    titrered = ligne[colimg];
    prediction = ligne[colpred];
    No = ligne[0];
    Bx = ligne[colbx];
    By = ligne[colby];
    Width = ligne[colwidth];
    Height = ligne[colheight];
    chemwork = chemwork1 + titrered + "\\";
    nomvignette = titrered + "_" + No;
    print(lig + " " + No + " " + titrered + " " + prediction + " " + Bx + " " + By + " " + Width + " " + Height);
} // for
if (isOpen("Log")) {
    selectWindow("Log");
    sauve = "save=" + chemtemp + "Identligne.txt";
    run("Text...", sauve);
    run("Close");
} // if

//-----------          De la premiere a la derniere ligne du fichier trie par image        -----------------------------------
imageref = "          ";
total = 0;
if (mode == true) setBatchMode(true);
for (lig = 0; lig < identligne.length; lig++) {
    //-------------------Gestion de l'image source-----------------------------------------------------------
    ligne = identligne[lig];
    ligne = split(ligne, "\ ");
    titrered = ligne[colimg];
    prediction = ligne[colpred];
    No = ligne[0];
    Nbb = parseInt(No);
    if (Nbb >= minvig && Nbb <= maxvig) {
        Bx = ligne[colbx];
        By = ligne[colby];
        Width = ligne[colwidth];
        Height = ligne[colheight];
        chemwork = chemwork1 + titrered + "\\";
        nomvignette = titrered + "_" + No;
        L = parseInt(Width);
        H = parseInt(Height);
        Bx = parseInt(Bx);
        By = parseInt(By);
        x1 = parseFloat(x1);
        larg = L;
        haut = H;
        ctrl = isOpen(titrered + "_vis1.jpg");
        ctrlzip = isOpen(titrered + "_vis1.tif");
        if (ctrl == 1) {
            selectImage(titrered + "_vis1.jpg");
            flagi = 1;
            titre = titrered + "_vis1.jpg";
            text = chemwork + titrered + "_vis1.jpg";
        } // if 
        if (ctrlzip == 1) {
            selectImage(titrered + "_vis1.tif");
            flagi = 1;
            titre = titrered + "_vis1.tif";
            text = chemwork + titrered + "_vis1.tif";
        } // if 
        //--------------------------------Ouverture de l'image si elle n'est pas ouverte---------------------------
        if (ctrl != 1 && ctrlzip != 1) {
            //------Fermeture de l'image precedente puisque ce n'est pas la meme---------------
            while (nImages() > 0) {
                selectImage(nImages());
                close();
            } // while	
            for (i = 0; i < nb; i++) {
                showStatus("Free memory");
                run("free memory");
                progress = (i + 1) / nb;
                showProgress(progress);
                wait(duration);
            } // for
            text = chemwork + titrered + "_vis1.jpg";
            exist = File.exists(text);
            dif = 1;
            if (exist == 1) {
                size = File.length(text);
                dif = sizeref * 1000000 - size;
            } // if 
            textzip = chemwork + titrered + "_vis1.zip";
            existzip = File.exists(textzip);
            if ((exist == 1 && dif > 0) || existzip == 1) {
                vig = 0;
                print("-----------OPEN-------------------------------------------------------");
                if (lig != 0) print("Extracted vignettes = " + total + " / " + identligne.length);
                imageref = titrered;
                if (existzip == 1) {
                    open(textzip);
                    titre = titrered + "_vis1.tif";
                    openimg = 1;
                    message2 = textzip + " OPEN";
                } // if
                else {
                    open(text);
                    print("Image size = ", size);
                    titre = titrered + "_vis1.jpg";
                    openimg = 1;
                    message2 = text + " OPEN";
                } // else
                saveAs("Tiff", chemtemp + "raw.tif");
                close();
                run("free memory");
                wait(1000);
                open(chemtemp + "raw.tif");
                rename(titre);
                print(message2);
                flagi = 1;
                setColor(0);
                selectImage(titre);
                setVoxelSize(1, 1, 1, "pixel");
                Larg = getWidth();
                Haut = getHeight();
                //---------------------CLEAR BACKGROUND -----------------------------------------
                if (maskclear == 1) {
                    openfile = chemwork + titrered + "_msk1.gif";
                    testclear = File.exists(openfile);
                    if (testclear == 1) {
                        print("Clear background");
                        open(openfile);
                        test = 1;
                        rename("MASK");
                        text = "image1=MASK operation=Add image2=" + titre;
                        run("Image Calculator...", text);
                        if (isOpen(titre)) {
                            selectImage(titre);
                            close();
                            run("free memory");
                            wait(3000);
                        } // if
                        rename(titre);
                    } // if	
                    else {
                        message = "No msk1.gif  file available for the selected image.              ";
                        print(message);
                    } // else	
                } // if
                //---------------------Ouverture des outlines -----------------------------------------
                if (maskout == 1) {
                    openfile = chemwork + titrered + "_out1.gif";
                    if (File.exists(openfile)) {
                        open(openfile);
                        print("Add outlines");
                        test = 1;
                        rename("Contours");
                        saveAs("Tiff", chemtemp + "raw.tif");
                        close();
                        run("free memory");
                        wait(1000);
                        open(chemtemp + "raw.tif");
                        rename("Contours");
                        text = "image1=" + titre + " operation=Subtract image2=Contours";
                        run("Image Calculator...", text);
                        selectImage("Contours");
                        close();
                        selectImage(titre);
                    } // if	
                    else {
                        message = "No out1.gif file available for the selected image.              ";
                        print(message);
                    } // else	

                } // if
            } // if
            else if (exist == 0 && titrered != imageref) {
                message2 = text + " NOT FOUND";
                showStatus("Wait");
                imageref = titrered;
                flagi = 0;
                disp1 = 1;
                print("Image size = ", size);
                print(message2);
            } // else
            else if (size >= sizeref && titrered != imageref) {
                message2 = text + " TOO LARGE";
                showStatus("Wait");
                imageref = titrered;
                flagi = 0;
                disp2 = 1;
                print("Image size = ", size);
                print(message2);
            } // else
            run("free memory");
            wait(3000);
        } // if 
        if (flagi == 1) { //---------------------l image est alors ouverte---------------------------------
            if (vig / 100 == floor(vig / 100)) {
                showStatus("Item  : " + lig + " /" + identligne.length + "  => Release PC now ");
                run("free memory");
                wait(500);
            } // if
            vig++;

            argum = chem + " " + resolution + " " + longline + " " + x1 + " " + x1 + " " + titre + " " + titrered + " " + No + " " + Bx + " " + By + " " + Width + " " + Height + " " + maskout + " " + gamma + " " + vignettetext + " " + masksave + " " + chemwork + " " + chemunsorted + " " + format + " " + clean + " " + flip + " " + legend + " " + legendzooscan + " " + upper;
            ret = runMacro("Zooscan_vignette_extract", argum);
            flag = toString(ret);
            l = lengthOf(flag);
            if (l == 1) {
                showMessage("Error message : " + No + " vignette extraction failed                       ");
            } // if
            else {
                fic = 1;
                if (masksave != 1) {
                    run("free memory");
                    wait(100);
                    saveAs("Jpeg", chemtemp + "vignette");
                    rename(nomvignette);
                } // if
            } // else
            close();
            total++;
        } // if
    } // if No
} // for
while (nImages() > 0) {
    selectImage(nImages());
    close();
} // while
if (disp1 == 1) {
    showMessage("------- END of ''Extract vignette to folders'' tool --------                    \nSome images were missing, check LOG                  ");
} // if
if (disp2 == 1) {
    showMessage("------- END of ''Extract vignette to folders'' tool --------                    \nSome images were too large, check LOG                  ");
} // if
if (disp1 != 1 && disp2 != 1) showMessage("------- END of ''Extract vignette to folders'' tool --------                    ");

print("-------------------------------------------------------------------------");
print("Extracted vignettes = ", total);
print("-------------------------------------------------------------------------");
if (bilan != " ") print("Images not found :" + bilan);
print("-------------------------------------------------------------------------");
if (isOpen("Log")) {
    selectWindow("Log");
    sauve = "save=" + chemtemp + "Extract_for_train_log.txt";
    run("Text...", sauve);
} // if
print("Log saved as ''Extract_for_train_log.txt'' in the Zooscan_temp folder.");
if (mode == true) setBatchMode(false);

ret = titre;
return ret;
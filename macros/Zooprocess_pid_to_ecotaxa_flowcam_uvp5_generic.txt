//------------- Zooprocess_pid_to_ecotaxa_flowcam_uvp5_generic ---------------
version = "7.28";
date = "2018/11/22";

// Utilisé pour flowcam et UVP5
// Acqu_instrument = uvp5, pixel, Exposure, Thrsh
// Variables derivees
// Pixel size
// sampleid en Lower case
// unicité des AcqId et ProcessId
// ParseFloat(mean)
// ===> Mettre en place le "rawimg"....
// Correction calcul ESD
// Correction autres variables dérivées
// Lecture pixel size from uvp5_configuration_data.txt file
// Correction calcul ESD pour Flowcam et Generic


arg = 		getArgument(); 
//path = "C:\\flowcam_composite_essai03";
//profileprocessed = "364-193137_2";
//pathprocessed = 	path+"\\work\\"+profileprocessed+"\\";
//link = "http://www.zooscan.obs-vlfr.fr//";
//arg = path+" "+pathprocessed+" "+profileprocessed +"_dat1.pid"+" pid no false new "+link;

array = 	split(arg," ");
projfolder = 		array[0];
pid_folder= 		array[1];
pid_file = 		array[2];
process_opt = 		array[3];
outlines = 		array[4];
status = 		array[5];
option = 		array[6];
link = "http://www.zooscan.obs-vlfr.fr//";
if (array.length > 7) link = 			array[7];

ecotaxa_folder = pid_folder;
settings_folder = projfolder+"\\config\\uvp5_settings\\";
path_work = projfolder+"\\work\\";
if (indexOf(projfolder,"uvp") > 0) 		{	instrum = "uvp5";	}
else if (indexOf(projfolder,"flowcam") > 0) 	{	instrum = "flowcam";	}
else if (indexOf(projfolder,"generic") > 0)	{	instrum = "generic";	}

Process_id = "zooprocess";
Process_software = "zooprocess"+"_pid_to_ecotaxa_"+version+"_"+date;

//	print("ECOTAXA TABLES");
wait(200);

// ------------------ Nouveaux paramètres ------------------------------
other_par = true;

// -------------- Repertoire ecotaxa ----------------
ecotaxa_root_folder = projfolder+"\\ecotaxa\\";
if ( File.exists(ecotaxa_root_folder) == false)	File.makeDirectory(ecotaxa_root_folder);
setBatchMode(true);

// ---------- Ouverture PID -----------------------
open(pid_folder+"\\"+pid_file);
//	ii = getBoolean(pid_folder+"\\"+pid_file);

wait(100);
data_read = getInfo();
run("Close");
data = split(data_read,"\n");
pid = false;
if (endsWith(pid_file,"pid")) 	pid = true;

if (pid == false) {
	// --------------- ANNOTATION -----------------------
	annotation_list_A = newArray(6);
	annotation_list_B = newArray(6);
	annotation_list_C = newArray(6);
	for (i = 0; i < annotation_list_C.length; i++) {	annotation_list_C[i] = "NaN";	}// for
	annotation_list_A[0] = "object_annotation_date";		annotation_list_B[0] = "[t]";
	annotation_list_A[1] = "object_annotation_time";		annotation_list_B[1] = "[t]";
	annotation_list_A[2] = "object_annotation_category";		annotation_list_B[2] = "[t]";
	annotation_list_A[3] = "object_annotation_person_name";		annotation_list_B[3] = "[t]";
	annotation_list_A[4] = "object_annotation_person_email";	annotation_list_B[4] = "[t]";
	annotation_list_A[5] = "object_annotation_status";		annotation_list_B[5] = "[t]";
	
	// ---------- Vérification de l'état de validation -----
	if (endsWith(pid_file,"pid")) { annotation_list_C[5] = "noid";		}
}
	
// ---------- Recherche data section ---------------
// la ligne data_deb est la ligne d'entête des variables
i = 0;
while (i < data.length) {
	// ----------- Recherche si valide ----------------
	if (startsWith(data[i],"[Validation]")) annotation_list_C[5] = "validated";
	if (startsWith(data[i],"First_name")) { val = replace(data[i],"="," ");	
		text = split(val,"\ ");	
		if (text.length > 1) val_first = text[text.length-1];
	}//
	if (startsWith(data[i],"Last_name")) { val = replace(data[i],"="," ");	
		text = split(val,"\ ");	
		if (text.length > 1) val_last = text[text.length-1];
		annotation_list_C[3] =  val_first+" "+val_last;
	}//
	if (startsWith(data[i],"Validation_upload_time")) { val = replace(data[i],"="," ");	
		text = split(val,"\ ");	
		if (text.length > 1) val = text[text.length-1];
		annotation_list_C[0] = substring(val,0,8);
		annotation_list_C[1] = substring(val,9,13)+"00";
	}//
	if (startsWith(data[i],"[Data]")) { data_deb = i+1; 	i = data.length; 	}//if
	i++;
}// while
if (pid == false) {
	if (annotation_list_C[3] == "marc picheral" ) annotation_list_C[4] = "marc.picheral@obs-vlfr.fr";
	
	// ------------ si pas PID et pas Validated ----------------------
	if (annotation_list_C[5] == "NaN" ) annotation_list_C[5] = "predicted";
}
// ---------- Liste des champs ---------------------
img_list_A = newArray(10);
img_list_C = newArray(10);
img_list_A[0] = "img_file_name";	img_list_C[0] = "[t]";
img_list_A[1] = "img_rank";		img_list_C[1] = "[f]";

// -------------- OBJECT ----------------------------
object_list_A = newArray(8);
object_list_B = newArray(8);
object_list_C = newArray(8);
for (i = 0; i < object_list_B.length; i++) {	object_list_B[i] = "NaN";	object_list_C[i] = "NaN";	object_list_C[i] = "[t]";}// for
object_list_A[0] = "object_id";			
object_list_A[1] = "object_link";		
object_list_A[2] = "object_lat";		object_list_C[2] = "[f]";	
object_list_A[3] = "object_lon";		object_list_C[3] = "[f]";		
object_list_A[4] = "object_date";		
object_list_A[5] = "object_time";		
object_list_A[6] = "object_depth_min";		object_list_C[6] = "[f]";
object_list_A[7] = "object_depth_max";		object_list_C[7] = "[f]";
object_list_B[1] = link;	//	"http://www.lov.obs-vlfr.fr/fr/moyens_a_la_recherche/plate_forme_imagerie.html/";

// --------------------------- Variables dérivées -------------------------------------
nb_derived = 13;
if (other_par == true) nb_derived = 28;
objet_derived_A = newArray(nb_derived);
objet_derived_B = newArray(nb_derived);
objet_derived_C = newArray(nb_derived);
for (i = 0; i < nb_derived; i++) {	objet_derived_C[i] = "NaN";		objet_derived_B[i] = "[f]"; }// for
objet_derived_A[0] = "object_esd";					
objet_derived_A[1] = "object_elongation";				
objet_derived_A[2] = "object_range";					
objet_derived_A[3] = "object_meanpos";				
objet_derived_A[4] = "object_centroids";				
objet_derived_A[5] = "object_cv";					
objet_derived_A[6] = "object_sr";					
objet_derived_A[7] = "object_perimareaexc";				
objet_derived_A[8] = "object_feretareaexc";				
objet_derived_A[9] = "object_perimferet";				
objet_derived_A[10] = "object_perimmajor";				
objet_derived_A[11] = "object_circex";					
objet_derived_A[12] = "object_cdexc";	
if (other_par == true) {
	objet_derived_A[13] = "object_kurt_mean";
	objet_derived_A[14] = "object_skew_mean";					
	objet_derived_A[15] = "object_convperim_perim";				
	objet_derived_A[16] = "object_convarea_area";					
	objet_derived_A[17] = "object_symetrieh_area";				
	objet_derived_A[18] = "object_symetriev_area";				
	objet_derived_A[19] = "object_nb1_area";					
	objet_derived_A[20] = "object_nb2_area";					
	objet_derived_A[21] = "object_nb3_area";				
	objet_derived_A[22] = "object_nb1_range";				
	objet_derived_A[23] = "object_nb2_range";				
	objet_derived_A[24] = "object_nb3_range";				
	objet_derived_A[25] = "object_median_mean";					
	objet_derived_A[26] = "object_median_mean_range";					
	objet_derived_A[27] = "object_skeleton_area";	
}	
	
// +++++++++++++++++++++ UVP5 ++++++++++++++++++++++++++++++++++++++
if (instrum == "uvp5") {
	Acq_id = "uvp5";
	// -------------- ACQU -------------------------------------
	acqu_list_A = newArray(19);
	acqu_list_B = newArray(19);
	acqu_list_C = newArray(19);
	for (i = 0; i < acqu_list_B.length; i++) {	acqu_list_B[i] = "NaN";	acqu_list_C[i] = "[f]";	}// for
	acqu_list_A[0] = "acq_id";			acqu_list_C[0] = "[t]";	//
	acqu_list_A[1] = "acq_sn";			acqu_list_C[1] = "[t]";	//
	acqu_list_A[2] = "acq_volimage";		
	acqu_list_A[3] = "acq_aa";			
	acqu_list_A[4] = "acq_exp";			
	acqu_list_A[5] = "acq_pixel";			
	acqu_list_A[6] = "acq_file_description";	acqu_list_C[6] = "[t]";	//
	acqu_list_A[7] = "acq_tasktype";		
	acqu_list_A[8] = "acq_disktype";		
	acqu_list_A[9] = "acq_shutterspeed";		
	acqu_list_A[10] = "acq_gain";			
	acqu_list_A[11] = "acq_threshold";		
	acqu_list_A[12] = "acq_smbase";			
	acqu_list_A[13] = "acq_smzoo";			
	acqu_list_A[14] = "acq_erase_border_blob";	
	acqu_list_A[15] = "acq_choice";			
	acqu_list_A[16] = "acq_ratio";		
	acqu_list_A[17] = "acq_instrument";		acqu_list_C[17] = "[t]";	acqu_list_B[17] = "uvp5";		
	acqu_list_A[18] = "acq_exposure";			
	
	// ---------------- SAMPLE -------------------------------------
	sample_list_A = newArray(16);
	sample_list_B = newArray(16);
	sample_list_C = newArray(16);
	for (i = 0; i < sample_list_B.length; i++) {	sample_list_B[i] = "NaN";	sample_list_C[i] = "[t]";	}// for
	sample_list_A[0] = "sample_id";			
	sample_list_A[1] = "sample_profileid";		
	sample_list_A[2] = "sample_cruise";		
	sample_list_A[3] = "sample_ship";		
	sample_list_A[4] = "sample_stationid";		
	sample_list_A[5] = "sample_bottomdepth";	
	sample_list_A[6] = "sample_ctdrosettefilename";	
	sample_list_A[7] = "sample_dn";			
	sample_list_A[8] = "sample_winddir";		sample_list_C[8] = "[f]";//
	sample_list_A[9] = "sample_windspeed";		sample_list_C[9] = "[f]";//	
	sample_list_A[10] = "sample_seastate";		sample_list_C[10] = "[f]";//
	sample_list_A[11] = "sample_nebuloussness";	sample_list_C[11] = "[f]";	////
	sample_list_A[12] = "sample_yoyo";		
	sample_list_A[13] = "sample_comment";	

	// ------------------- Ligne à formater selon ALTIDEV ----------------	
	sample_list_A[14] = "sample_dataportal_descriptor";	
	if (indexOf(toLowerCase(projfolder),"tara") > = 0) {
		sample_list_B[14] = "<bioimagingdescriptors><bioimagingdescriptor domain=\"Bio-imaging\" trait=\"Automated Imaging Modalities\" descriptor=\"UVP5\" /><bioimagingdescriptor domain=\"Bio-imaging\" trait=\"Sample Fixation\" descriptor=\"LIVE\" /><bioimagingdescriptor domain=\"Bio-imaging\" trait=\"Staining Methods\" descriptor=\"No Staining\" /></bioimagingdescriptors>";
	}//
	sample_list_A[15] = "sample_barcode";

	// ------------------ PROCESS --------------------------------------
	process_list_A = newArray(13);
	process_list_B = newArray(13);
	process_list_C = newArray(13);
	for (i = 0; i < process_list_B.length; i++) {	process_list_B[i] = "NaN";	process_list_C[i] = "[t]";	}// for
	process_list_A[0] = "process_id";
	process_list_A[1] = "process_software";	
	process_list_A[2] = "process_date";		
	process_list_A[3] = "process_time";		
	process_list_A[4] = "process_first_img";	process_list_C[4] = "[f]";//
	process_list_A[5] = "process_last_img";		process_list_C[5] = "[f]";//
	process_list_A[6] = "process_pressure_gain";	process_list_C[6] = "[f]";//
	process_list_A[7] = "process_calibration";	
	process_list_A[8] = "process_pixel";		process_list_C[8] = "[f]";//
	process_list_A[9] = "process_upper";		process_list_C[9] = "[f]";//
	process_list_A[10] = "process_gamma";		process_list_C[10] = "[f]";//
	process_list_A[11] = "process_esdmin";		process_list_C[11] = "[f]";//
	process_list_A[12] = "process_esdmax";		process_list_C[12] = "[f]";

	aa = indexOf(pid_folder,"uvp5");
	ligne = substring(pid_folder,aa,lengthOf(pid_folder));
	bb = indexOf(ligne,"_");
	ligne = substring(ligne,bb+1,lengthOf(ligne));
	cc = indexOf(ligne,"_");
	acqu_list_B[1] = substring(ligne,0,cc);
	
	/* ----------------- PIXEL pour chaque SN ----------------------	
	if (indexOf(acqu_list_B[1],"000") > 0) { acqu_list_B[5] = 0.174;	process_list_B[8] =0.174;}
	else if (indexOf(acqu_list_B[1],"sn001") > 0) {acqu_list_B[5] = 0.147;	process_list_B[8] =0.147;}
	else if (indexOf(acqu_list_B[1],"sn002") > 0) {acqu_list_B[5] = 0.148;	process_list_B[8] =0.148;}
	else if (indexOf(acqu_list_B[1],"sn002zd") > 0) {acqu_list_B[5] = 0.118;	process_list_B[8] =0.118;}
	else if (indexOf(acqu_list_B[1],"sn002zh") > 0) {acqu_list_B[5] = 0.101;	process_list_B[8] =0.101;}
	else if (indexOf(acqu_list_B[1],"sn002zp") > 0) {acqu_list_B[5] = 0.096;	process_list_B[8] =0.096;}
	else if (indexOf(acqu_list_B[1],"sn003") > 0) {acqu_list_B[5] = 0.147;	process_list_B[8] =0.147;}
	else if (indexOf(acqu_list_B[1],"sn005") > 0) {acqu_list_B[5] = 0.147;	process_list_B[8] =0.147;}
	else if (indexOf(acqu_list_B[1],"sn006") > 0) {acqu_list_B[5] = 0.149;	process_list_B[8] =0.149;}
	else if (indexOf(acqu_list_B[1],"sn007") > 0) {acqu_list_B[5] = 0.149;	process_list_B[8] =0.149;}
	else if (indexOf(acqu_list_B[1],"sn008") > 0) {acqu_list_B[5] = 0.149;	process_list_B[8] =0.149;}
	else if (indexOf(acqu_list_B[1],"sn009") > 0) {acqu_list_B[5] = 0.148;	process_list_B[8] =0.148;}
	else if (indexOf(acqu_list_B[1],"sn010") > 0) {acqu_list_B[5] = 0.151;	process_list_B[8] =0.151;}
	else if (indexOf(acqu_list_B[1],"sn011") > 0) {acqu_list_B[5] = 0.147;	process_list_B[8] =0.147;}
	else if (indexOf(acqu_list_B[1],"sn101") > 0) {acqu_list_B[5] = 0.147;	process_list_B[8] =0.147;}
	else if (indexOf(acqu_list_B[1],"sn102") > 0) {acqu_list_B[5] = 0.146;	process_list_B[8] =0.146;}
	else if (indexOf(acqu_list_B[1],"sn103") > 0) {acqu_list_B[5] = 0.145;	process_list_B[8] =0.145;}
	else if (indexOf(acqu_list_B[1],"sn200") > 0) {acqu_list_B[5] = 0.085;	process_list_B[8] =0.085;}
	else if (indexOf(acqu_list_B[1],"sn201") > 0) {acqu_list_B[5] = 0.086;	process_list_B[8] =0.086;}
	else if (indexOf(acqu_list_B[1],"sn202") > 0) {acqu_list_B[5] = 0.088;	process_list_B[8] =0.088;}	
	else if (indexOf(acqu_list_B[1],"sn203") > 0) {acqu_list_B[5] = 0.086;	process_list_B[8] =0.086;}
	*/
	// ------------- Pixel from uvp5_configuration_data.txt file -------------------------------------
//	aa = getBoolean(settings_folder+"\\uvp5_configuration_data.txt");

	if (File.exists(settings_folder+"\\uvp5_configuration_data.txt")) {
		open(settings_folder+"\\uvp5_configuration_data.txt");
		wait(100);
		config_data = getInfo();
		run("Close");
		conf_data  = split(config_data,"\n");
		for (hh=1;hh<conf_data.length;hh++){
			data_conf = replace(conf_data[hh],"="," ");
			dat_conf = split(data_conf," ");		
			if (startsWith(dat_conf[0],"pixel"))		process_list_B[8] = dat_conf[1];	
		}// for
	}
	else {
		aa = getBoolean("The pixel size cannot be read from \n"+ settings_folder+"\\uvp5_configuration_data.txt  \nPlease check the file and restart the process !!! ");	
	}

	// ---------- recherche des paramètres -------------
	for (i = 1; i < data_deb;i++) {
		text = replace(data[i],"="," "); text = split(text,"\ ");  
		if (text.length > 1) val = text[text.length-1];
		if (startsWith(data[i],"cruise=")) { 			sample_list_B[2] = toString(val);						}//if
		else if (startsWith(data[i],"filename=")) { 		sample_list_B[1] = "hdr"+toString(val); 	
									object_list_B[4] = substring(val,0,8);	
									object_list_B[5] = substring(val,8,14);				
		}//if
		else if (startsWith(data[i],"profileid=") || startsWith(data[i],"stationname=")) { 		sample_list_B[0] = toString(val); 						}//if	
		else if (startsWith(data[i],"ship=")) { 		sample_list_B[3] = toString(val); 							}//if
		else if (startsWith(data[i],"stationid=")) { 		sample_list_B[4] = toString(val); 						}//if
		else if (startsWith(data[i],"bottomdepth=")) { 		sample_list_B[5] = toString(val); 						}//if
		else if (startsWith(data[i],"ctdrosettefilename=")) { 	sample_list_B[6] = toString(val); 						}//if
		else if (startsWith(data[i],"dn=")) { 			sample_list_B[7] = toString(val); 							}//if
		else if (startsWith(data[i],"winddir=")) { 		sample_list_B[8] = toString(val); 						}//if
		else if (startsWith(data[i],"windspeed=")) { 		sample_list_B[9] = toString(val); 						}//if
		else if (startsWith(data[i],"seastate=")) { 		sample_list_B[10] = toString(val); 						}//if
		else if (startsWith(data[i],"nebuloussness=")) { 	sample_list_B[11] = toString(val); 						}//if
		else if (startsWith(data[i],"yoyo=")) { 		sample_list_B[12] = toString(val); 						}//if
		else if (startsWith(data[i],"comment=")) { 		sample_list_B[13] = toString(val); 						}//if
	
		else if (startsWith(data[i],"Date=")) { 		process_list_B[2] = substring(val,0,8); 
									process_list_B[3] = substring(val,9,13)+"00"; 					}// if
		else if (startsWith(data[i],"First_image=")) { 		process_list_B[4] = toString(val); 						}//if	
		else if (startsWith(data[i],"Last_image=")) { 		process_list_B[5] = toString(val); 						}//if	
		else if (startsWith(data[i],"pressure_gain=")) { 	process_list_B[6] = toString(val); 						}//if	
		else if (startsWith(data[i],"calibration=")) { 		process_list_B[7] = toString(val); 						}//if	
		else if (startsWith(data[i],"pixel=")) { 		process_list_B[8] = toString(val); 	acqu_list_B[5] = toString(val);		}//if	
		else if (startsWith(data[i],"upper=")) { 		process_list_B[9] = toString(val); 						}//if	
		else if (startsWith(data[i],"gamma=")) { 		process_list_B[10] = toString(val); 						}//if	
		else if (startsWith(data[i],"esdmin=")) { 		process_list_B[11] = toString(val); 						}//if	
		else if (startsWith(data[i],"esdmax=")) { 		process_list_B[12] = toString(val); 						}//if				
		else if (startsWith(data[i],"zmin=")) { 		object_list_B[6] = toString(val);							}
		else if (startsWith(data[i],"zmax=")) { 		object_list_B[7] = toString(val);							}
		else if (startsWith(data[i],"volimage=")) { 		acqu_list_B[2] = toString(val); 						}//if	
		else if (startsWith(data[i],"aa=")) { 			acqu_list_B[3] = toString(val); 						}//if	
		else if (startsWith(data[i],"exp=")) { 			acqu_list_B[4] = toString(val); 						}//if	
		else if (startsWith(data[i],"pixel=")) { 		acqu_list_B[5] = toString(val); 						}//if	
		else if (startsWith(data[i],"File_description=")) { 	acqu_list_B[6] = toString(val); 						}//if	
		else if (startsWith(data[i],"TaskType=")) { 		acqu_list_B[7] = toString(val); 						}//if	
		else if (startsWith(data[i],"DiskType=")) { 		acqu_list_B[8] = toString(val); 						}//if	
		else if (startsWith(data[i],"Exposure=")) { 		acqu_list_B[18] = toString(val); 						}//if			
		else if (startsWith(data[i],"ShutterSpeed=")) { 	acqu_list_B[9] = toString(val); 						}//if	
		else if (startsWith(data[i],"Gain=")) { 		acqu_list_B[10] = toString(val); 						}//if	
		else if (startsWith(data[i],"Threshold=")) { 		acqu_list_B[11] = toString(val); 						}//if	
		else if (startsWith(data[i],"Thres=")) { 		acqu_list_B[11] = toString(val); 						}//if	
		else if (startsWith(data[i],"SMbase=")) { 		acqu_list_B[12] = toString(val); 						}//if	
		else if (startsWith(data[i],"SMzoo=")) { 		acqu_list_B[13] = toString(val); 						}//if	
		else if (startsWith(data[i],"EraseBorderBlobs=")) { 	acqu_list_B[14] = toString(val); 				}//if	
		else if (startsWith(data[i],"Choice=")) { 		acqu_list_B[15] = toString(val); 				}//if	
		else if (startsWith(data[i],"Ratio=")) { 		acqu_list_B[16] = toString(val); 				}//if	

		else if (startsWith(data[i],"latitude=")) { 	oo = val; sign = 1;	
			if (oo < 0) sign = -1;
			oo = abs(oo);
			oo_int = floor(oo);
			object_list_B[2] = sign * (oo_int+100*(oo - oo_int)/60);
		}//if		
		else if (startsWith(data[i],"longitude=")) { 		oo = val; sign = 1;	                                                               
			if (oo < 0) {	sign = -1;	}//
			oo = abs(oo);
			oo_int = floor(oo);
			object_list_B[3] = sign * (oo_int+100*(oo - oo_int)/60);
		}//if	
	}
	// --------------------------- Relecture du fichier HDR si données manquantes ----------------------------
	if (isNaN(acqu_list_B[9])) {
		hdr_data = false;
		// --------- Les données du HDR ne sont pas dans le PID ou le DAT1 -------------------------------
		profileid = sample_list_B[1];
		if (lengthOf(profileid) < 17) {	aa = getBoolean(profileid+"   long= "+lengthOf(profileid));	}
		profileraw = "HDR"+substring(profileid,3,17);
		hdr_file_raw = projfolder+"\\raw\\"+profileraw+"\\"+profileraw +".hdr";
		if (File.exists(hdr_file_raw)){
			conf = File.openAsString(projfolder+"\\raw\\"+profileraw +"\\"+profileraw+".hdr");
			wait(200);
			hdr_data = true;		
		}
		if (hdr_data == true ) {
			data_hdr  = replace(conf,"\t"," ");
			data_hdr  = split(data_hdr,"\n");
			for (i=1;i<data_hdr.length;i++){
				if (lengthOf(data_hdr[i]) > 3) {
					text = replace(data_hdr[i],"  "," "); 	
					text = replace(text," = "," "); 	
					text = replace(text,"="," "); 	
					text = split(text,"\ "); 
					if (text.length > 1) val = text[text.length-1];
					if (startsWith(data_hdr[i],"File_description=")) { 	acqu_list_B[6] = toString(val); 						}//if	
					else if (startsWith(data_hdr[i],"TaskType=")) { 		acqu_list_B[7] = toString(val); 						}//if	
					else if (startsWith(data_hdr[i],"DiskType=")) { 		acqu_list_B[8] = toString(val); 						}//if	
					else if (startsWith(data_hdr[i],"Exposure=")) { 		acqu_list_B[18] = toString(parseInt(val)-60); 						}//if			
					else if (startsWith(data_hdr[i],"ShutterSpeed=")) { 	acqu_list_B[9] = toString(val); 						}//if	
					else if (startsWith(data_hdr[i],"Gain=") || startsWith(data_hdr[i],"Gain =")) { 		acqu_list_B[10] = toString(val); 			}//if	
					else if (startsWith(data_hdr[i],"Threshold=") || startsWith(data_hdr[i],"Threshold =")) { 		acqu_list_B[11] = toString(val); 		}//if	
					else if (startsWith(data_hdr[i],"Thresh=") || startsWith(data_hdr[i],"Thresh =")) { 		acqu_list_B[11] = toString(val); 			}//if	
					else if (startsWith(data_hdr[i],"SMbase=") || startsWith(data_hdr[i],"SMbase =")) { 		acqu_list_B[12] = toString(val); 			}//if	
					else if (startsWith(data_hdr[i],"SMzoo=") || startsWith(data_hdr[i],"SMzoo =")) { 		acqu_list_B[13] = toString(val); 						}//if	
					else if (startsWith(data_hdr[i],"EraseBorderBlobs=")) { 	acqu_list_B[14] = toString(val); 				}//if	
					else if (startsWith(data_hdr[i],"Choice=")) { 		acqu_list_B[15] = toString(val); 				}//if	
					else if (startsWith(data_hdr[i],"Ratio=")) { 		acqu_list_B[16] = toString(val); 				}//if	
				} // if length
			} // for
		} //if	
	}
	// --------------------------- CRUISE / N) des objets ----------------------------------------------------
//	vig_no_cor = false; obj_no_cor = false;
//	if (indexOf(sample_list_B[2],"boum2008") > 0) {	vig_no_cor = true; obj_no_cor = true;	}

} // uvp5
else if (instrum == "flowcam") {
	//++++++++++++++++++++++++++++++ FLOWCAM +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	Acq_id = "flowcam";
	// -------------- ACQU -------------------------------------
	acqu_list_A = newArray(26);
	acqu_list_B = newArray(26);
	acqu_list_C = newArray(26);
	for (i = 0; i < acqu_list_B.length; i++) {	acqu_list_B[i] = "NaN";	acqu_list_C[i] = "[t]";	}// for
	acqu_list_A[0] = "acq_id";			acqu_list_C[0] = "[t]";	//
	acqu_list_A[1] = "acq_instrument";		acqu_list_C[1] = "[t]";		acqu_list_B[1] = "flowcam";
	acqu_list_A[2] = "acq_celltype";			acqu_list_C[2] = "[f]";	//
	acqu_list_A[3] = "acq_software";		
	acqu_list_A[4] = "acq_magnification";			
	acqu_list_A[5] = "acq_dsp_firmware";			
	acqu_list_A[6] = "acq_serialno";	
	acqu_list_A[7] = "acq_mode";	acqu_list_C[6] = "[t]";	//
	acqu_list_A[8] = "acq_stop_reason";		
	acqu_list_A[9] = "acq_fluid_volume_imaged";	
	acqu_list_A[10] = "acq_start";		
	acqu_list_A[11] = "acq_end";			
	acqu_list_A[12] = "acq_sampling_time";
	acqu_list_A[13] = "acq_autoimage_rate";			
	acqu_list_A[14] = "acq_flash_duration";		acqu_list_C[14] = "[f]";	//
	acqu_list_A[15] = "acq_flash_delay";		acqu_list_C[15] = "[f]";	//
	acqu_list_A[16] = "acq_camera_name";			
	acqu_list_A[17] = "acq_initialization";			
	acqu_list_A[18] = "acq_recalibration_interval_minute";		acqu_list_C[16] = "[f]";	//	
	acqu_list_A[19] = "acq_flow_cell_type";			
	acqu_list_A[20] = "acq_save_image_file";			acqu_list_C[20] = "[f]";	//
	acqu_list_A[21] = "acq_threshold_black";			acqu_list_C[21] = "[f]";	//
	acqu_list_A[22] = "acq_threshold_light";			acqu_list_C[22] = "[f]";	//
	acqu_list_A[23] = "acq_min_esd";				acqu_list_C[23] = "[f]";	//
	acqu_list_A[24] = "acq_max_esd";				acqu_list_C[24] = "[f]";	//
	acqu_list_A[25] = "acq_raw_image_total";			acqu_list_C[25] = "[f]";	//
	
	// ---------------- SAMPLE -------------------------------------
	sample_list_A = newArray(10);
	sample_list_B = newArray(10);
	sample_list_C = newArray(10);
	for (i = 0; i < sample_list_B.length; i++) {	sample_list_B[i] = "NaN";	sample_list_C[i] = "[t]";	}// for
	sample_list_A[0] = "sample_id";			
	sample_list_A[1] = "sample_project";		
	sample_list_A[2] = "sample_ship";		
	sample_list_A[3] = "sample_filename";		
	sample_list_A[4] = "sample_barcode";		
	sample_list_A[5] = "sample_samplinggear";	
	sample_list_A[6] = "sample_volconc";		sample_list_C[6] = "[f]";//
	sample_list_A[7] = "sample_volpump";		sample_list_C[7] = "[f]";//				
	sample_list_A[8] = "sample_comment_or_volume";	

	// ------------------- Ligne à formater selon ALTIDEV ----------------	
	sample_list_A[9] = "sample_dataportal_descriptor";	
	if (indexOf(toLowerCase(projfolder),"tara") >= 0 && indexOf(toLowerCase(projfolder),"tara_pacific") < 0) {
		sample_list_B[9] = "<bioimagingdescriptors><bioimagingdescriptor domain=\"Bio-imaging\" trait=\"Automated Imaging Modalities\" descriptor=\"FLOWCAM\" /><bioimagingdescriptor domain=\"Bio-imaging\" trait=\"Sample Fixation\" descriptor=\"LIVE\" /><bioimagingdescriptor domain=\"Bio-imaging\" trait=\"Staining Methods\" descriptor=\"No Staining\" /></bioimagingdescriptors>";
	}

	// ------------------ PROCESS --------------------------------------
	process_list_A = newArray(22);
	process_list_B = newArray(22);
	process_list_C = newArray(22);
	for (i = 0; i < process_list_B.length; i++) {	process_list_B[i] = "NaN";	process_list_C[i] = "[t]";	}// for
	process_list_A[0] = "process_id";		
	process_list_A[1] = "process_software";			
	process_list_A[2] = "process_start_date";			
	process_list_A[3] = "process_start_time";		
	process_list_A[4] = "process_background_method";		
	process_list_A[5] = "process_nb_images";	process_list_C[5] = "[f]";//		
	process_list_A[6] = "process_rolling";		process_list_C[6] = "[f]";//		
	process_list_A[7] = "process_pixel";		process_list_C[7] = "[f]";//		
	process_list_A[8] = "process_upper";		process_list_C[8] = "[f]";//		
	process_list_A[9] = "process_gamma_value";	process_list_C[9] = "[f]";//			
	process_list_A[10] = "process_esd_min";		process_list_C[10] = "[f]";//	
	process_list_A[11] = "process_esd_max";		process_list_C[11] = "[f]";//	
	process_list_A[12] = "process_lut_offset";	process_list_C[12] = "[f]";//			
	process_list_A[13] = "process_lut_slope";	process_list_C[13] = "[f]";//			
	process_list_A[14] = "process_stop_n_images";	process_list_C[14] = "[f]";//			
	process_list_A[15] = "process_scale";		process_list_C[15] = "[f]";//		
	process_list_A[16] = "process_remove_objects_on_sides";			
	process_list_A[17] = "process_stop_after_m_objects";		process_list_C[17] = "[f]";//		
	process_list_A[18] = "process_nb_of_rawfile_images_in_folder";	process_list_C[18] = "[f]";//			
	process_list_A[19] = "process_objects_processed";		process_list_C[19] = "[f]";//		
	process_list_A[20] = "process_remove_duplicates";		process_list_C[20] = "[f]";//	
	process_list_A[21] = "process_Grey_auto_adjust";		

	// ---------- recherche des paramètres -------------
	for (i = 1; i < data_deb;i++) {
		text = toLowerCase(data[i]);
		text = replace(text,"= ","=");
		text = replace(text,"= ","=");
		text = replace(text," ","_");
		text = replace(text,"="," "); 
		text = split(text,"\ "); 
		if (text.length > 1) val = text[text.length-1];
		if (startsWith(toLowerCase(data[i]),"sampleid=")) { 			sample_list_B[0] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"project=")) { 		sample_list_B[1] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"ship=")) { 		sample_list_B[2] = toString(val); 						}
		else if (startsWith(toLowerCase(data[i]),"filename=")) { 		sample_list_B[3] = toString(val); 						}//if}//if
		else if (startsWith(toLowerCase(data[i]),"otherreffile=")) { 	sample_list_B[4] = toString(val); 						}//if
		else if (startsWith(toLowerCase(data[i]),"samplinggear=")) { 	sample_list_B[5] = toString(val); 						}//if
		else if (startsWith(toLowerCase(data[i]),"volconc=")) { 		sample_list_B[6] = toString(val); 						}//if
		else if (startsWith(toLowerCase(data[i]),"volpump=")) { 		sample_list_B[7] = toString(val); 						}//if
		else if (startsWith(toLowerCase(data[i]),"datetime=")) { 		object_list_B[4] = substring(val,0,8);	
											object_list_B[5] = substring(val,9,13);						}//if							
		else if (startsWith(toLowerCase(data[i]),"comment=")) { 		sample_list_B[8] = toString(val); 						}//if
		else if (startsWith(toLowerCase(data[i]),"starting_time= 2") || startsWith(toLowerCase(data[i]),"starting_time=  2")) { 	process_list_B[2] = substring(val,0,8); 
											process_list_B[3] = substring(val,9,13);					}

		else if (startsWith(toLowerCase(data[i]),"background_method=")) { 	process_list_B[4] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"image_processed=")) { 		process_list_B[5] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"rolling=")) { 		process_list_B[6] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"pixel=")) { 		process_list_B[7] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"upper=")) { 		process_list_B[8] = toString(val); 						}//if	
		else if ( startsWith(toLowerCase(data[i]),"gamma=")) { 		process_list_B[9] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"esdmin=")) { 		process_list_B[10] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"esdmax=")) { 		process_list_B[11] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"lut_offset=") || startsWith(toLowerCase(data[i]),"lut_ofset=")) { 		process_list_B[12] = toString(val); 						}//if		
 		else if (startsWith(toLowerCase(data[i]),"lut_slope=") || startsWith(toLowerCase(data[i]),"lut slope=")) { 		process_list_B[13] = toString(val); 						}//if		
		else if (startsWith(toLowerCase(data[i]),"stop_after_n_images=")) { 		process_list_B[14] = toString(val); 					}//if		
 		else if (startsWith(toLowerCase(data[i]),"scale=")) { 		process_list_B[15] = toString(val); 						}//if		
 		else if (startsWith(toLowerCase(data[i]),"remove_objects_on_sides=")) { 		process_list_B[16] = toString(val); 						}//if		
 		else if (startsWith(toLowerCase(data[i]),"stop_after_m_objects=")) { 		process_list_B[17] = toString(val); 						}//if		
 		else if (startsWith(toLowerCase(data[i]),"nb_of_rawfile_images_in_folder=")) { 		process_list_B[18] = toString(val); 						}//if		
 		else if (startsWith(toLowerCase(data[i]),"objects_processed=")) { 		process_list_B[19] = toString(val); 						}//if		
 		else if (startsWith(toLowerCase(data[i]),"remove_duplicates=")) { 		process_list_B[20] = toString(val); 						}//if		
 		else if (startsWith(toLowerCase(data[i]),"grey_auto_adjust=")) { 		process_list_B[21] = toString(val); 						}//if		
 		
		else if (startsWith(toLowerCase(data[i]),"zmin=")) { 		object_list_B[6] = toString(val);							}
		else if (startsWith(toLowerCase(data[i]),"zmax=")) { 		object_list_B[7] = toString(val);							}
		
		else if (startsWith(toLowerCase(data[i]),"celltype=")) { 		acqu_list_B[2] = toString(val); 						}//if		
		else if (startsWith(toLowerCase(data[i]),"softwarename=")) { 		acqu_list_B[3] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"cameramagnification=")) { 		acqu_list_B[4] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"dspfirmwareversion=")) { 		acqu_list_B[5] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"serialno=")) { 			acqu_list_B[6] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"mode=")) { 			acqu_list_B[7] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"stop_reason=") || startsWith(toLowerCase(data[i]),"stop reason=")) { 			acqu_list_B[8] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"fluid_volume_imaged=") || startsWith(toLowerCase(data[i]),"fluid volume imaged=")) { 		acqu_list_B[9] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"start=")	||	startsWith(toLowerCase(data[i]),"start=")) { 			
											acqu_list_B[10] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"end=")) { 				acqu_list_B[11] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"sampling_time=") || startsWith(toLowerCase(data[i]),"sampling time=")) { 		acqu_list_B[12] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"autoimagerate=")) { 		acqu_list_B[13] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"flashduration=")) { 		acqu_list_B[14] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"flashdelay=")) { 			acqu_list_B[15] = toString(val); 				}//if	
		else if (startsWith(toLowerCase(data[i]),"cameraname=")) { 			acqu_list_B[16] = toString(val); 				}//if	
		else if (startsWith(toLowerCase(data[i]),"initialization=")) { 		acqu_list_B[17] = toString(val); 				}//if	
		else if (startsWith(toLowerCase(data[i]),"recalibrationintervalminutes=")) { acqu_list_B[18] = toString(val); 				}//if	
		else if (startsWith(toLowerCase(data[i]),"flowcelltype=")) { 		acqu_list_B[19] = toString(val); 				}//if	
		else if (startsWith(toLowerCase(data[i]),"saveimagefiles=")) { 		acqu_list_B[20] = toString(val); 				}//if	
		else if (startsWith(toLowerCase(data[i]),"thresholddark=")) { 		acqu_list_B[21] = toString(val); 				}//if	
		else if (startsWith(toLowerCase(data[i]),"thresholdlight=")) { 		acqu_list_B[22] = toString(val); 				}//if	
		else if (startsWith(toLowerCase(data[i]),"minesd=")) { 			acqu_list_B[23] = toString(val); 				}//if	
		else if (startsWith(toLowerCase(data[i]),"maxesd=")) { 			acqu_list_B[24] = toString(val); 				}//if	
		else if (startsWith(toLowerCase(data[i]),"rawimagetotal=")) { 		acqu_list_B[25] = toString(val); 				}//if	

		else if (startsWith(toLowerCase(data[i]),"latitude=")) { 	oo = val; sign = 1;	
			if (oo < 0) sign = -1;
			oo = abs(oo);
			oo_int = floor(oo);
			object_list_B[2] = sign * (oo_int+100*(oo - oo_int)/60);
		}//if		
		else if (startsWith(toLowerCase(data[i]),"longitude=")) { 		oo = val; sign = 1;	                                                               
			if (oo < 0) {	sign = -1;	}//
			oo = abs(oo);
			oo_int = floor(oo);
			object_list_B[3] = sign * (oo_int+100*(oo - oo_int)/60);
		}//if	
	}//for	
}// flowcam
else if (instrum == "generic") {
	//++++++++++++++++++++++++++++++ GENERIC +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	Acq_id = "generic";
	// -------------- ACQU -------------------------------------
	acqu_list_A = newArray(4);
	acqu_list_B = newArray(4);
	acqu_list_C = newArray(4);
	for (i = 0; i < acqu_list_B.length; i++) {	acqu_list_B[i] = "NaN";	acqu_list_C[i] = "[t]";	}// for
	acqu_list_A[0] = "acq_id";				
	acqu_list_A[1] = "acq_instrument";		
	acqu_list_A[2] = "acq_cell_type";	
	acqu_list_A[3] = "acq_magnification";		acqu_list_C[3] = "[f]";	//	
	
	// ---------------- SAMPLE -------------------------------------
	sample_list_A = newArray(8);
	sample_list_B = newArray(8);
	sample_list_C = newArray(8);
	for (i = 0; i < sample_list_B.length; i++) {	sample_list_B[i] = "NaN";	sample_list_C[i] = "[t]";	}// for
	sample_list_A[0] = "sample_id";			
	sample_list_A[1] = "sample_project";		
	sample_list_A[2] = "sample_ship";		
	sample_list_A[3] = "sample_filename";		
	sample_list_A[4] = "sample_samplinggear";	
	sample_list_A[5] = "sample_volconc";		sample_list_C[6] = "[f]";//	
	sample_list_A[6] = "sample_comment";	

	// ------------------- Ligne à formater selon ALTIDEV ----------------	
	sample_list_A[7] = "sample_dataportal_descriptor";	

	// ------------------ PROCESS --------------------------------------
	process_list_A = newArray(22);
	process_list_B = newArray(22);
	process_list_C = newArray(22);
	for (i = 0; i < process_list_B.length; i++) {	process_list_B[i] = "NaN";	process_list_C[i] = "[t]";	}// for
	process_list_A[0] = "process_id";		
	process_list_A[1] = "process_software";	
	process_list_A[2] = "process_start_date";			
	process_list_A[3] = "process_start_time";			
	process_list_A[4] = "process_analysed_color_channel";		
	process_list_A[5] = "process_background_method";		
	process_list_A[6] = "process_nb_images";	process_list_C[6] = "[f]";//		
	process_list_A[7] = "process_rolling";		process_list_C[7] = "[f]";//
	process_list_A[8] = "process_pixel";		process_list_C[8] = "[f]";//	
	process_list_A[9] = "process_upper";		process_list_C[9] = "[f]";//		
	process_list_A[10] = "process_gamma_value";	process_list_C[10] = "[f]";//	
	process_list_A[11] = "process_vignette_color";		
	process_list_A[12] = "process_esd_min";		process_list_C[12] = "[f]";//	
	process_list_A[13] = "process_esd_max";		process_list_C[13] = "[f]";//	
	process_list_A[14] = "process_lut_offset";	process_list_C[14] = "[f]";//			
	process_list_A[15] = "process_lut_slope";	process_list_C[15] = "[f]";//		
	process_list_A[16] = "process_remove_objects_on_sides";			
	process_list_A[17] = "process_stop_n_images";	process_list_C[17] = "[f]";//			
	process_list_A[18] = "process_scale";		process_list_C[18] = "[f]";//		
	process_list_A[19] = "process_stop_after_m_objects";		process_list_C[19] = "[f]";//		
	process_list_A[20] = "process_nb_of_rawfile_images_in_folder";	process_list_C[20] = "[f]";//			
	process_list_A[21] = "process_Grey_auto_adjust";		
	
	// ---------- recherche des paramètres -------------
	for (i = 1; i < data_deb;i++) {
		text = toLowerCase(data[i]);
		text = replace(text,"= ","="); 
		text = replace(text,"= ","="); 
		text = replace(text," ","_");
		text = replace(text,"="," "); 
		text = split(text,"\ "); 
		if (text.length > 1) val = text[text.length-1];
		if (startsWith(toLowerCase(data[i]),"sampleid=")) { 			sample_list_B[0] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"project=")) { 		sample_list_B[1] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"ship=")) { 		sample_list_B[2] = toString(val); 						}
		else if (startsWith(toLowerCase(data[i]),"filename=")) { 		sample_list_B[3] = toString(val); 						}//if
		else if (startsWith(toLowerCase(data[i]),"samplinggear=")) { 	sample_list_B[4] = toString(val); 						}//if
		else if (startsWith(toLowerCase(data[i]),"volconc=")) { 		sample_list_B[5] = toString(val); 						}//if
		else if (startsWith(toLowerCase(data[i]),"datetime=")) { 		object_list_B[4] = substring(val,0,8);	
									object_list_B[5] = substring(val,9,13);						}//if							
		else if (startsWith(toLowerCase(data[i]),"comment=")) { 		sample_list_B[6] = toString(val); 						}//if
		else if (startsWith(toLowerCase(data[i]),"starting_time=")) { 	process_list_B[2] = substring(val,0,8); 
									process_list_B[3] = substring(val,9,13);					}			
		else if (startsWith(data[i],"analysed_color_channel=")) { 	process_list_B[4] = toString(val); 					}// if
		else if (startsWith(toLowerCase(data[i]),"background_method=")) { 	process_list_B[5] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"image_processed=")) { 	process_list_B[6] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"rolling=")) { 		process_list_B[7] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"pixel=")) { 		process_list_B[8] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"upper=")) { 		process_list_B[9] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(toLowerCase(data[i])),"gamma_value=")  || startsWith(toLowerCase(toLowerCase(data[i])),"gamma= value=") || startsWith(toLowerCase(toLowerCase(data[i])),"gamma=")) { 		process_list_B[10] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"vignette_color=")) { 	process_list_B[11] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"esdmin=")) { 		process_list_B[12] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"esdmax=")) { 		process_list_B[13] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"lut_offset=") || startsWith(toLowerCase(data[i]),"lut_ofset=")) { 		process_list_B[14] = toString(val); 						}//if		
 		else if (startsWith(toLowerCase(data[i]),"lut_slope=")) { 		process_list_B[15] = toString(val); 						}//if				
		else if (startsWith(toLowerCase(data[i]),"remove_objects_on_sides=")) { 	process_list_B[16] = toString(val); 						}
		else if (startsWith(toLowerCase(data[i]),"stop_after_n_images=")) { 		process_list_B[17] = toString(val); 						}//if		
		else if (startsWith(toLowerCase(data[i]),"scale=")) { 			process_list_B[18] = toString(val); 						}//if			
		else if (startsWith(toLowerCase(data[i]),"stop_after_m_objects=")) { 		process_list_B[19] = toString(val); 						}//if		
 		else if (startsWith(toLowerCase(data[i]),"nb_images_in_folder=")) { 	process_list_B[20] = toString(val); 						}//if		
 		else if (startsWith(toLowerCase(data[i]),"grey_auto_adjust=")) { 			process_list_B[21] = toString(val); 						}//if		
		else if (startsWith(toLowerCase(data[i]),"instrumtype=")) { 		acqu_list_B[1] = toString(val); 						}//if	
		
				
		else if (startsWith(toLowerCase(data[i]),"zmin=")) { 		object_list_B[6] = toString(val);							}
		else if (startsWith(toLowerCase(data[i]),"zmax=")) { 		object_list_B[7] = toString(val);							}
		
		
		else if (startsWith(toLowerCase(data[i]),"celltype=")) { 		acqu_list_B[2] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"magnification=")) { 	acqu_list_B[3] = toString(val); 						}//if	
		else if (startsWith(toLowerCase(data[i]),"latitude=")) { 	oo = val; sign = 1;	
			if (oo < 0) sign = -1;
			oo = abs(oo);
			oo_int = floor(oo);
			object_list_B[2] = sign * (oo_int+100*(oo - oo_int)/60);
		}//if		
		else if (startsWith(toLowerCase(data[i]),"longitude=")) { 		oo = val; sign = 1;	                                                               
			if (oo < 0) {	sign = -1;	}//
			oo = abs(oo);
			oo_int = floor(oo);
			object_list_B[3] = sign * (oo_int+100*(oo - oo_int)/60);
		}//if	
	}	
}// generic

// --------------------- Ecriture du fichier ----------------------
// ----------------------------------------------------------------
if (isOpen("Log")) {	selectWindow("Log"); run("Close");	}//

// ---------- paramètres "fixes" -------------------
acqu_list_B[0] = Acq_id+"_"+toLowerCase(sample_list_B[0]);
process_list_B[0] = Process_id+"_"+toLowerCase(sample_list_B[0]);
process_list_B[1] = Process_software;

// ----------------- Repertoire final ----------------------------------------------------
pid_file_short = substring(pid_file,0,lengthOf(pid_file)-9);
if (process_opt == "text") {
	// --------------- Creation du répertoire EcoTaxa Valide -------------
	ecotaxa_folder = projfolder+"\\ecotaxa\\"+pid_file_short;
	File.makeDirectory(ecotaxa_folder);
}//

// ----------------- Entete ---------------------
ligne = img_list_A[0]+"\t"+img_list_A[1];
for(i=0; i<object_list_A.length ;i++) {		ligne = ligne +"\t"+object_list_A[i];			} // if	
// ---------------- Lire entete data -----------------------------
entete = data[data_deb];
field_sup_nb = 2;
if (indexOf(entete,"Status") > 0) field_sup_nb = 4;

//-----------------Recherche Type de separateur ( tabs, ; ou space)--------------------------
sep = "tabs";
ctrl1 = indexOf(entete,";");
if (ctrl1>=0) { 		sep = "dotcoma";	} // if
ctrl1 = indexOf(entete," ");
if (ctrl1>=0) { 		sep = "space";		} // if
if (sep == "dotcoma") {	entete= replace(entete,";"," ");	entete = split(entete,"\ ");		} // if
else if (sep == "tabs") {					entete = split(entete,"\t");		} // if
else if (sep == "space") {					entete = split(entete,"\ ");		} // if
long = entete.length;
if (pid == false) {
	if (annotation_list_C[5] == "validated") long = entete.length - field_sup_nb;
}
// ---------------- Nombre de colonnes a supprimer -------------------------------------------
start_field = 2;
rawimg_index = 0;
if (instrum == "uvp5" || instrum == "generic") start_field = 3;
for (k = start_field; k<long ;k++) {	
	// ------------- On n'intègre pas le rawimg de l'UVP5 --------------------------------
	if (instrum == "uvp5" && entete[k] != "Rawvig" )  {	ligne = ligne +"\t"+"object_"+toLowerCase(entete[k]);	}
	else if (instrum != "uvp5") 			{	ligne = ligne +"\t"+"object_"+toLowerCase(entete[k]);	}
	if  (entete[k] == "Rawvig" )	{	rawimg_index = k;	}
} // for

for(i=0;i<objet_derived_A.length;i++) {		ligne = ligne +"\t"+toLowerCase(objet_derived_A[i]);	} // if	
if (pid == false) {
	for(i=0;i<annotation_list_A.length;i++) {	ligne = ligne +"\t"+toLowerCase(annotation_list_A[i]);	} // if
}
for(i=0;i<process_list_A.length;i++) {		ligne = ligne +"\t"+toLowerCase(process_list_A[i]);	} // if
for(i=0;i<acqu_list_A.length;i++) {		ligne = ligne +"\t"+toLowerCase(acqu_list_A[i]);	} // if
for(i=0;i<sample_list_A.length;i++) {		ligne = ligne +"\t"+toLowerCase(sample_list_A[i]);	} // if
print(ligne);
// ----------------- Entete ---------------------
ligne = img_list_C[0]+"\t"+img_list_C[1];
for(i=0; i<object_list_C.length ;i++) {		ligne = ligne +"\t"+object_list_C[i];			} // if	
// ---------------- Lire unites format -----------------------------
entete = data[data_deb];
if (sep == "dotcoma") {	entete= replace(entete,";"," ");	entete = split(entete,"\ ");		} // if
else if (sep == "tabs") {					entete = split(entete,"\t");		} // if
else if (sep == "space") {					entete = split(entete,"\ ");		} // if
long = entete.length;
if (pid == false) {
	if (annotation_list_C[5] == "validated") 	long = entete.length - field_sup_nb;
}
nb_to_print = long;
if (rawimg_index > 0) nb_to_print = long-1;
for (k = start_field; k<nb_to_print ;k++) {		ligne = ligne +"\t"+"[f]";			} // for
for(i=0;i<objet_derived_B.length;i++) {			ligne = ligne +"\t"+toLowerCase(objet_derived_B[i]);	} // if	
if (pid == false) {
	for(i=0;i<annotation_list_B.length;i++) {	ligne = ligne +"\t"+toLowerCase(annotation_list_B[i]);	} // if
}
for(i=0;i<process_list_C.length;i++) {		ligne = ligne +"\t"+toLowerCase(process_list_C[i]);	} // if
for(i=0;i<acqu_list_C.length;i++) {		ligne = ligne +"\t"+toLowerCase(acqu_list_C[i]);	} // if
for(i=0;i<sample_list_C.length;i++) {		ligne = ligne +"\t"+toLowerCase(sample_list_C[i]);	} // if
print(ligne);

// ----------------- Data ---------------------
nb_false = 0;
data_ligne = newArray(data.length - data_deb);
m = 0;
for (j = data_deb+1;j < data.length;j++) {
	entete = data[j];
	if (sep == "dotcoma") {	entete= replace(entete,";"," ");	entete = split(entete,"\ ");		} // if
	else if (sep == "tabs") {					entete = split(entete,"\t");		} // if
	else if (sep == "space") {					entete = split(entete,"\ ");		} // if
	object_list_B[0] = toLowerCase(pid_file_short+"_"+entete[0]);
//	object_list_B[0] = toLowerCase(entete[1]+"_"+entete[0]);
	vig_id = entete[entete.length - 1 ];
	// ------------- COPIE vignettes ---------------------
	if (process_opt == "text" && option == "new") {
		vigname  = toLowerCase(object_list_B[0]+".jpg");
		read_file = path_work+"\\"+pid_file_short+"\\"+vigname;
		save_file_red = ecotaxa_folder + "\\"+ toLowerCase(object_list_B[0]);
		if (File.exists(read_file) && File.exists(save_file_red+".jpg") == false) {open(read_file);	saveAs("jpg",save_file_red);	close();	}// if
		else { nb_false++;	} // if 
	}// if
	// ------------ Variables dérivées -----------------------------	
	if (indexOf(toLowerCase(data[data_deb]),"kurt")>1) {
		area = 		parseInt(entete[2]);	
		if (instrum == "uvp5") {	area = 		parseInt(entete[3]);	}
		major = 	parseInt(entete[18]);	minor = 	parseInt(entete[19]);
		mean = 		parseFloat(entete[4]);	min = 		parseInt(entete[7]);	max = 		parseInt(entete[8]);
		stddev = 	parseInt(entete[5]);	perim = 	parseInt(entete[13]);	area_exc = 	parseInt(entete[30]);
		feret = 	parseInt(entete[22]);	xm = 		parseInt(entete[11]);	ym = 		parseInt(entete[12]);
		x = 		parseInt(entete[9]);	y = 		parseInt(entete[10]);
	
//		esd = 2*((area/PI)^0.5);				objet_derived_C[0] = esd;
		esd = 2*(sqrt(area/PI));				objet_derived_C[0] = esd;		
		elongation = major/minor;				objet_derived_C[1] = elongation;
		range = max-min;					objet_derived_C[2] =	range;
		meanpos = (mean-max)/(mean-min);			objet_derived_C[3] = meanpos;
//		centroids = ((xm-x)^2+(ym-y)^2)^0.5;			objet_derived_C[4] = centroids;
		centroids = sqrt(pow(xm-x,2)+ pow(ym-y,2));		objet_derived_C[4] = centroids;
		cv = 	 100*(stddev/mean);				objet_derived_C[5] = cv;
//		sr = 	 100*(stddev/(max-min));			objet_derived_C[6] = sr;
		if (max-min != 0) {
			sr = 	 100*(stddev/(max-min));		objet_derived_C[6] = sr;
		}
		else {	sr = "NaN";	}
//		perimareaexc = perim/(area_exc^0.5);			objet_derived_C[7] = perimareaexc;
//		feretareaexc = feret/(area_exc^0.5);			objet_derived_C[8] = feretareaexc;
		perimareaexc = perim/(sqrt(area_exc));			objet_derived_C[7] = perimareaexc;
		feretareaexc = feret/(sqrt(area_exc));			objet_derived_C[8] = feretareaexc;
		perimferet = perim/feret;				objet_derived_C[9] = perimferet;
		perimmajor = perim/major;				objet_derived_C[10] = perimmajor;		
//		circexc = (4*PI*area_exc)/(perim^2);			objet_derived_C[11] = circexc;
//		cdexc = (1/(area_exc^0.5)) * (((xm-x)^2+(ym-y)^2)^0.5);	objet_derived_C[12] = cdexc;
		circexc = (4*PI*area_exc)/(pow(perim,2));			objet_derived_C[11] = circexc;
		cdexc = (1/(sqrt(area_exc))) * sqrt(pow(xm-x,2)+pow(ym-y,2));	objet_derived_C[12] = cdexc;
		// -------------------- AUTRES -----------------------------
		if (other_par == true) {
			kurt = 		parseInt(entete[26]);
			skew = 		parseInt(entete[25]);
			convperim = 	parseInt(entete[52]);
			convarea = 	parseInt(entete[53]);
			symetrieh = 	parseInt(entete[48]);
			symetriev = 	parseInt(entete[49]);
			nb1 = 		parseInt(entete[39]);
			nb2 = 		parseInt(entete[40]);
			nb3 = 		parseInt(entete[41]);
			median = 	parseInt(entete[24]);
			skeleton = 	parseInt(entete[32]);
			
			objet_derived_C[13] = kurt/mean;
			objet_derived_C[14] = skew/mean;
			objet_derived_C[15] = convperim/perim;
			objet_derived_C[16] = convarea/area;
			objet_derived_C[17] = symetrieh/area;
			objet_derived_C[18] = symetriev/area;
			objet_derived_C[19] = nb1/area;
			objet_derived_C[20] = nb2/area;
			objet_derived_C[21] = nb3/area;
			objet_derived_C[22] = nb1/range;
			objet_derived_C[23] = nb2/range;
			objet_derived_C[24] = nb3/range;
			objet_derived_C[25] = median-mean;
			objet_derived_C[26] = (median-mean)/range;
			objet_derived_C[27] = skeleton/area;
		}	
	} // if
		
	// -------- depth min et max ------------
	if (instrum == "uvp5") {
		object_list_B[6] = entete[2];
		object_list_B[7] = entete[2];
	}// if
	ligne = toLowerCase(object_list_B[0])+".jpg"+"\t"+"0";
	for(i=0;i<object_list_B.length;i++) {		ligne = ligne +"\t"+object_list_B[i];			} // if	
	// ---------------- Lire entete data -----------------------------
	if (pid == false) {
		if (annotation_list_C[5] == "validated" || annotation_list_C[5] == "predicted" || annotation_list_C[5] == "dubious") {	long = entete.length - field_sup_nb;
			annotation_list_C[2] = vig_id; //entete[long];
		}// if
		// ----------------- remplacement du status -----------------------
		if (status == true && process_opt == "text") annotation_list_C[5] = "predicted";
	}
	for (k = start_field; k<long ;k++) {	
		// ------------- On n'intègre pas le Rawvig de l'UVP5 --------------------------------
		if (instrum == "uvp5" && k != rawimg_index )  {		ligne = ligne +"\t"+toLowerCase(entete[k]);		}
		else if (instrum != "uvp5") {				ligne = ligne +"\t"+toLowerCase(entete[k]);		}
	} // for
	
	
	for(i=0;i<objet_derived_C.length;i++) {		ligne = ligne +"\t"+toLowerCase(objet_derived_C[i]);	} // if	
	if (pid == false) {
		for(i=0;i<annotation_list_C.length;i++) {	ligne = ligne +"\t"+toLowerCase(annotation_list_C[i]);	} // if
	}
	for(i=0;i<process_list_B.length;i++) {		ligne = ligne +"\t"+toLowerCase(process_list_B[i]);	} // if
	for(i=0;i<acqu_list_B.length;i++) {		ligne = ligne +"\t"+toLowerCase(acqu_list_B[i]);	} // if
	for(i=0;i<sample_list_B.length;i++) {		ligne = ligne +"\t"+toLowerCase(sample_list_B[i]);	} // if
	data_ligne[m] = ligne;
	m++;
}//
// ------------------ Ecriture du fichier --------------------------- 
for (j = 0; j < m;j++) {
	ligne = data_ligne[j];
	ligne = replace(ligne,"-infinity","nan");
	ligne = replace(ligne,"infinity","nan");	
	print(ligne);	
}// if

// ----------------- Enregistrement fichier TSV dans le même dossier ------------------------
selectWindow("Log");
save_tsv = "no";
aa = indexOf(pid_file,".");
//	ecotaxa_file = "ecotaxa_"+ substring(pid_file,0,aa-5)+"_"+annotation_list_C[5]+".tsv";
ecotaxa_file = "ecotaxa_"+ substring(pid_file,0,aa-5)+".tsv";
text =  "save=" + ecotaxa_folder + "\\" + ecotaxa_file;

//	aa = getBoolean(text);
if ((option == "maj" && File.exists(ecotaxa_folder + "\\" + ecotaxa_file)) || option == "new" ) {
	run("Text...",text);
	save_tsv = "ok";
}

// ----------------- Sauvegarde dans ECOTAXA -------------------------------------------------
//text =  "save=" + projfolder+"\\ecotaxa\\" + ecotaxa_file;
//if ((option == "maj" && File.exists(ecotaxa_root_folder + ecotaxa_file) )|| option == "new") {
//	run("Text...",text);
//	save_tsv = "ok";
//}

run("Close");

// ----------------------- END ----------------------
ret = save_tsv;
return ret;

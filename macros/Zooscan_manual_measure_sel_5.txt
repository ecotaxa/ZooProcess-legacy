//---------------------------Zooscan_manual_measure_sel_5--------------------------------
version = "5.00";
date = "2007/12/29";
// Cette routine ne fonctionne que dans le respect de l'arborescence Zooscan_scan\_work\
// Permet de mesurer manuellement des attriibuts des organismes.
// Utilise le PID et le VIS
// Cree un fichier supplementaire qui sera recharge en plus du PID s'il existe *_length.txt
// Choix de une ou deux mesures

args = getArgument();
arg = split(args," ");
chem = 	arg[0];
projfolder = 	arg[1];
chemconfig = 	projfolder + "\\Zooscan_config\\";
chemscan = 	projfolder  + "\\Zooscan_scan\\";
chemresults = 	projfolder  + "\\Zooscan_results\\";
chemwork = 	chemscan + "_work\\";
chemtemp = 	chem + "Zooscan_temp\\";

lon = lengthOf(projfolder);
zoosc = indexOf(projfolder,"Zooscan_");
proj = substring(projfolder,zoosc+8,lon);


resolution = "2400";
longline = "1";
contrast = 0.02;
bleft= 		16;	
bright= 	4;
broll = 		10;
jpeg = 100;
text= "jpeg="+jpeg+" file=.xls";
run("Input/Output...",text);
x1 = 10;
contrast = 1.5;
vignettetext = longline;
longline = parseFloat(longline);
print("A purger");
selectWindow("Log");
run("Close");
maskcont = 0;
masksave = 0;

//--------------------Ouverture controlee du VIS et du PID -----------------------
check = 0;
while (check == 0) {
	//---------------------------- Recherche de dossiers ''complets'' dans le repertoire "work" ----------------------------
	workfolder = 	File.exists(chemwork);	
	if (workfolder == 1) {			
		filelist  = getFileList(chemwork);
		//-------------- Selection des fichiers ---------------------
		j = 0;	flagframe = 0;
		list = newArray(filelist.length);
		for (i=0; i<filelist.length ; i++) {	  
			 rr = filelist[i]; 
			identlong = 	lengthOf(rr);
			rr = 		substring(rr,0,identlong-1);	
			//--------------- Recherche du fichier image en ZIP ou en JPG ----------
			imagezip  =  chemwork+"\\"+rr+"\\"+rr+"_vis1.zip";
			imagejpg = chemwork+"\\"+rr+"\\"+rr+"_vis1.jpg";
			imagelog = chemwork+"\\"+rr+"\\"+rr+"_log.txt";
			imagepid = chemwork+"\\"+rr+"\\"+rr+"_dat1.pid";
			imagemsk = chemwork+"\\"+rr+"\\"+rr+"_msk1.gif";
			imageout = chemwork+"\\"+rr+"\\"+rr+"_out1.gif";
			zipexist = File.exists(imagezip);
			jpgexist = File.exists(imagejpg);
			logexist = File.exists(imagelog);
			pidexist = File.exists(imagepid);
			mskexist = File.exists(imagemsk);
			outexist = File.exists(imageout);
			if ((zipexist == 1 || jpgexist == 1)&&logexist == 1 && pidexist == 1 && mskexist == 1 && outexist == 1){ list[j] = rr;  j++;  	flagframe = 0; 		} // if
		} // for
		if (j==0) { print("No valid ''sample'' folder in the "+projfolder);
			configpres = 0;
			getBoolean("No valid sample folder in "+projfolder+"             \nPress CANCEL to ABORT !                 ");
		} //
		else {	// ---------------------------Purger les lignes vides  ----------------------
			listaff = newArray(j);
			for (i=0; i<listaff.length ; i++) {	rr = list[i]; 	listaff[i] = rr;	} // for	
			// -------------------------- Selection de l'image a traiter ----------------------------
			Dialog.create("Manual Measurements v. "+version+"                    ");
			Dialog.addMessage( "-------------------------------------------------------------------------------");
			Dialog.addMessage( "Project :  "+proj);
			Dialog.addMessage("If exists, the measurements file *_length.txt must    \nalso be in the same folder ");
			Dialog.addMessage("Press ROLL mouse button on the vignette to activate the    \nmeasure tool       ");
			Dialog.addMessage( "-------------------------------------------------------------------------------");
			Dialog.addMessage("Number of lengths to measure on each organism")
			choixmes = newArray("  1","  2");
			Dialog.addChoice("                     ",choixmes);
			Dialog.addCheckbox("Erase previous measurements from length.txt file ", false);
			Dialog.addMessage( "-------------------------------------------------------------------------------");
			Dialog.addMessage("- If gamma > 1=> contrast enhanced              ");
			Dialog.addMessage("- If gamma < 1=> image smoothed              ");
			Dialog.addMessage("- If gamma = 1=> No gamma correction              ");
			Dialog.addNumber("                      SET gamma (0.5 - 5) ",contrast);
			Dialog.addCheckbox("CLEAR background ?", false);
			Dialog.addMessage( "-------------------------------------------------------------------------------");
			Dialog.addMessage("SELECT Image from the project            ");
			Dialog.addChoice("    ", listaff);
			Dialog.addMessage( "-------------------------------------------------------------------------------");
			Dialog.show();
			nbmes = 		Dialog.getChoice();
			maskerase = 	Dialog.getCheckbox();
			gamma =		Dialog.getNumber();
			gamma = 	maxOf(gamma,0.5);
			gamma = 	minOf(gamma,5);
			maskout = 	1;
			maskclear = 	Dialog.getCheckbox();
			titrered = 	Dialog.getChoice();
			check = 1;
		}// else
	} // if
	else { getBoolean("No "+chemwork+" folder, press CANCEL to ABORT !");		} // else
} // while

print("Sample = "+titrered);
// -------------------------------------- Ouverture PID ---------------------------
chemwork1 = 	chemwork+titrered+"\\";
chemin = chemwork1;
textpid = 		chemwork1+titrered+"_dat1.pid";
open(textpid);
wait(500);
config = getInfo();
pid = split(config,"\n");
run("Close");
//-----------------Recherche DATA section--------------------------
for (i=0; i<pid.length ; i++) {	ctrl1 = indexOf(pid[i],"[Data]");
	if (ctrl1>=0) { deb=i+1;	} // if
} // for
//-----------------Recherche de la resolution de l'image--------------------------
for (i=0; i<pid.length ; i++) {	ctrl1 = indexOf(pid[i],"Resolution");
	if (ctrl1==0) { texte = pid[i];		res = split(texte,"\ ");		resolution = res[1];		} // if
} // for
nbval = pid.length-deb-1;
print("nval= ",nbval);
print("Resolution= ",resolution);
// --------------------Ouverture du length.txt s'il existe-----------------
openfile = chemwork1+ titrered+"_length.txt";
print("Openfile= ",openfile);
testlength = File.exists(openfile);
lenno = 	newArray(nbval);
len1 = 	newArray(nbval);
len2 = 	newArray(nbval);
if (File.exists(openfile)) { open(openfile);
	test = 1;	
	config = getInfo();
	lengths = split(config,"\n");
	run("Close");
	//------------------ test de la qualite du length
	nborglength = lengths.length-1;
	if (nborglength == nbval ) { //--------On considere le fichier valable-------------
		lengthfile = "ok";
		//--------Creation des vecteurs-----------------------------------------------
		if (maskerase == false ) {
			for (g = 1;g<lengths.length;g++) { 
				a= replace(lengths[g],";"," ");
				ligne = split(a,"\ ");
				Lenno = 	ligne[0];
				Len1 = 	ligne[1];
				Len2 = 	ligne[2];
				lenno[g-1] = 	Lenno;
				len1[g-1] = 	Len1;
				len2[g-1] = 	Len2;
			} // for
		} // if 			
	} // if
	else { getBoolean("Organism total number differs in PID and LENGTH files       \nLENGTH file will not be used");	} // else
} // if
else { getBoolean("LENGTH file not found        \nIt will be created at the end of the process  "); 		} // else

//------------------- Fermeture d'eventuelles images ----------------------------------------
while (nImages()>0) {selectImage(nImages());  	run("Close");	} // while	
run("free memory");		wait(500);	
run("free memory");		wait(500);	
run("free memory");		wait(500);	
run("free memory");		wait(500);

chemwork1 = chemwork + "\\"+titrered+"\\";

text = 		chemwork1+titrered+"_vis1.jpg";
exist = 		File.exists(text);
textzip = 		chemwork1+titrered+"_vis1.zip";
existzip = 	File.exists(textzip);
imageref = titrered;	
if (existzip == 1) {	open(textzip);	titre = 	titrered+"_vis1.tif";		} // if
else { 		open(text);	titre = 	titrered+"_vis1.jpg";	openimg = 1;	} // else
saveAs("Tiff",chemtemp+"temp_vis1.tif");
close();
run("free memory");
wait(1000);
open(chemtemp+"temp_vis1.tif");
rename(titrered);
selectImage(titrered);
setVoxelSize(1,1,1,"pixel");

//---------------------CLEAR BACKGROUND -----------------------------------------
if (maskclear == 1) {	// --------------------- Ouverturte MSK1------------------------------------------
	openfile = chemwork1+ titrered+"_msk1.gif";
	print("Clear background");
	open(openfile);
	test = 1;	
	rename("MASK");
	text =  "image1=MASK operation=Add image2="+titrered;
	run("Image Calculator...", text);
	if (isOpen(titrered)) 	{	selectImage(titrered);	
		close();		
		saveAs("Tiff",chemtemp+"temp_vis1.tif");
		close();
		run("free memory");		wait(500);	
		run("free memory");		wait(500);	
		run("free memory");		wait(500);	
		run("free memory");		wait(500);
		open(chemtemp+"temp_vis1.tif");
		rename(titrered);
		selectImage(titrered);
		setVoxelSize(1,1,1,"pixel");
	} // if	
	else { message = "No msk1.gif  file available for the selected image.              " ;	print(message);		} // else	
} // if

//---------------------Rehaussement du contraste-----------------
selectImage(titrered);
textgamma = 	"value="+contrast;	
run("Gamma...", textgamma);	

//------------------Creation des vecteurs---------------------------------
label = 	newArray(nbval);
area = 	newArray(nbval);
mean = 	newArray(nbval);
bx = 	newArray(nbval);
by = 	newArray(nbval);
width = 	newArray(nbval);
height = 	newArray(nbval);
aff = 	newArray(nbval);
feret = 	newArray(nbval);
esd = 	newArray(nbval);
no = 	newArray(nbval);
fractal=	newArray(nbval);

//------------------Detection des N° de colonnes pour les champs-------------
colfractal = 0;

a= replace(pid[deb],";"," ");
ligne = split(a,"\ ");
for (i=0; i<ligne.length ; i++) {	
	v = ligne[i];
	if (v=="Area") { colarea = i;	} //if
	if (v=="Label") { collabel = i;	} //if
	if (v=="Mean") { colmean = i;	} //if
	if (v=="BX") { colbx = i;	} //if
	if (v=="BY") { colby = i;	} //if
	if (v=="Width") { colwidth = i;	} //if
	if (v=="Height") { colheight = i;	} //if
	if (v=="Feret") { colferet = i;	} //if
	if (v=="!Item") { colno = i;	} //if
	if (v=="Fractal") { colfractal = i;	} //if
} // for

//------------------Lecture des valeurs et ecriture des vecteurs------------------------------------
pixels = 25.4/resolution;

for (i=deb+1; i<pid.length ; i++) {
	a= replace(pid[i],";"," ");
	ind = i-deb-1;
	ligne = split(a,"\ ");

	No = 	ligne[colno];
	Label = 	ligne[collabel];
	Area = 	ligne[colarea];
	Mean = 	ligne[colmean];
	Bx = 	ligne[colbx];
	By = 	ligne[colby];
	Width = 	ligne[colwidth];
	Height = 	ligne[colheight];
	Feret = 	ligne[colferet];
	Feret=	parseFloat(Feret)*pixels;
	Smm = 	parseInt(Area);
	Smm = 	Smm * pixels * pixels;
	Smm = 	Smm /3.1416 ;
	Esd = 	2* pow(Smm,0.5);
	Fractal = 	ligne[colfractal];

	no[ind] = 		No;
	label[ind] = 	Label;
	area[ind] = 	Area;
	mean[ind] = 	Mean;
	bx[ind] = 	Bx;
	by[ind] = 	By;
	width[ind] = 	Width;
	height[ind] = 	Height;
	feret[ind] = 	Feret;
	esd[ind] = 	Esd;
	fractal[ind] = 	Fractal;

	Len1 = 	len1[ind];
	Len2 = 	len2[ind];
	
	Aff= No +"     "+Area+"     "+Esd+"     "+Feret+"     "+Fractal+"     "+Len1+"     "+Len2+"     "+Mean+"     "+Bx+"     "+By+"     "+Width+"     "+Height;
	aff[ind] = Aff;
} // for

//--------------------------Selection et affichage de la vignette a afficher---------------------
f = 10;
fic = 0;
data = "          ";
while (f==10) {
	//--------------------------Selection de la vignette a afficher---------------------
	Dialog.create("VIGNETTE SELECTION ");
	message = "Select line and press OK to visualise           " ;
	Dialog.addMessage(message);
	message = "ESD and Feret diameter  are converted in mm           " ;
	Dialog.addMessage(message);
	message = "DO NOT press CANCEL to END              " ;
	Dialog.addMessage(message);
	Dialog.addMessage("DO NOT close any vignette during process !");
	message = "No     Area     ESD      Feret    Fractal    Length1    Length2     MeanGrey    Bx     By     Width     Height" ;
	if (fic == 1) {Dialog.addMessage("----------------------------------Displayed vignette data-------------------------------------------------------------          ");		
		Dialog.addMessage(message);
		Dialog.addMessage(data);
		Dialog.addMessage("-------------------------------------------------------------------------------------------------------------------------------");
	} // if
	Dialog.addMessage(message);
	Dialog.addChoice(" ", aff);
	Dialog.show();
	data = Dialog.getChoice();
	//----------------Fermeture vignette precedente----------------------------------------------
	if (fic == 1) { selectImage(nomvignette);		run("Close");	} // if

	run("Colors...", "foreground=red background=white selection=black");
	setColor(0);
	selectImage(titrered);
	setVoxelSize(1,1,1,"pixel");
	val = split(data,"\ ");
	No = val[0];
	nomvignette =titrered+"_"+No;
	//----------------Verifions si la vignette n'est pas deja ouverte---------------
	if (isOpen(nomvignette+".jpg")) { selectImage(nomvignette+".jpg");
		print("Vignette "+nomvignette+" exists);	
	} // if 
	else if (isOpen(nomvignette)) { selectImage(nomvignette);
		print("Vignette "+nomvignette+" exists);	
	} // if 
	else {	//-----------------------------Creation de la vignette--------------------------------
		ind = parseInt(No)-1;
		Bx   = bx[ind];
		By   = by[ind];
		Width	= width[ind];
		Height	= height[ind];
		argum = chem+" "+resolution+" "+longline+" "+x1+" "+x1 +" "+titrered+" "+titrered+" "+No+" "+Bx+" "+By+" "+Width+" "+Height+" "+maskcont+" "+contrast+" "+vignettetext+" "+masksave+" "+chemwork+" "+chemin;
			ret = runMacro("Zooscan_vignette_extract",argum);
		flag=toString(ret);
		l= lengthOf(flag);
		if (l==1)  { 	showMessage("Error message : "+No+" vignette extraction failed                       "); 		} // if
		else {	fic = 1;
			if (masksave == false) { saveAs("Jpeg",chemtemp+"vignette");	} // if
			if (Height <= 200) {	run("View 100%");		run("In");		} // if	
			rename(nomvignette);
		} // else
		
	} // else
	//------------------ Section mesures sur la vignette ------------------------------------------
	if (nbmes == choixmes[0] ) { 	nbmes = 1;		} // if
	else {				nbmes = 2; 		} // else
	//-----------------Bouton Zoom---------------------------------------------------------
	selectImage(nomvignette);
	setColor(200);
	H = getHeight();
	L = getWidth();
	fillRect(L-10, H-21, 8, 10);
	setFont("SansSerif" , 8, "bold");
	setColor(0);
	drawString("Z", L-9,H-11);
	index = 	0;
	test = 0;
	a = newArray(40);
	check = 0;
	run("Line Width...", "line=1");
	t =0;
	x = newArray(2);
	w = newArray(2);
	z = newArray(2);
	while (t<nbmes) {
		while (check==0) { 	wait(100);
			if (isOpen(nomvignette)) { 
				selectWindow(nomvignette);
				getCursorLoc(x[0], w[0], z[0], flags);
				if (flags== broll || flags == 8 || flags == 12) {  // Suivant bouton central
					check = 1;	
				}  // if
				else if (flags == bleft)  {	//	showMessage("----------------Bouton Zoom ? --------------------------");	
					if ( x>= L-10 && x<=L-2 && w>=H-11 && w<= H-21) { 
						selectWindow(nomvignette);
						run("View 100%");
						run("In");	
					} // if	
				} // else
			} // if
			else { 	run("Close");
				getBoolean("Vignette closed by operator. Press Cancel to abort process");		
			} // else
		} // while
		test=0;
		prevflags=0;
		while (test==0) { 	wait(500);
			setTool(4);
			run("Line Width...", "line=1");
				ret = runMacro("ZooscanCursor");
			flags = parseInt(ret);
			// -------------------Changement d'etat du flag, valable en tool4
			dif = flags - prevflags;
			prevflags = flags;
			ref = -bleft;
			if (dif==ref) { test = 1;		} // if
		} // while
		getSelectionCoordinates(x, y);
     		a[index] = x[0];
		a[index+1] = y[0];
		a[index+2] = x[1];
		a[index+3] = y[1];
		// -------------------Dessin du trait dans l'image----------------------
		run("Line Width...", "line=2");
		moveTo(a[index],a[index+1]);
		lineTo(a[index+2],a[index+3] );
		dx = 	25.4*(a[index+2]-a[index])/resolution;
		dy = 	25.4*(a[index+3]-a[index+1])/resolution;
		dx =	pow(dx,2);
		dy = 	pow(dy,2);	
		dtot = pow(dx+dy,0.5);
		if (t==0) { len1[ind] = dtot;	} // if
		if (t==1) { len2[ind] = dtot;	} // if	
		t++;
	} // while t
	
	//------------------Autres mesures ?--------------------------
	messagefin = "MEASURES :                       \nLength N°1 = "+len1[ind]  +"\nLength N°2 = "+len2[ind]+ "\n \nPress NO if you want to ABORT and SAVE data                \n \nGO ON MEASURING ?     ";
	info = getBoolean(messagefin);
	if (info == true) { //----------------------Mettre a jour l'affichage des donnees-------------------------
		//	showMessage("On process");
		nvig = No;
		for (i=deb+1; i<pid.length ; i++) {
			a= replace(pid[i],";"," ");
			ind = i-deb-1;
			ligne = split(a,"\ ");
			No = 	ligne[colno];
			Label = 	ligne[collabel];
			Area = 	ligne[colarea];
			Mean = 	ligne[colmean];
			Bx = 	ligne[colbx];
			By = 	ligne[colby];
			Width = 	ligne[colwidth];
			Height = 	ligne[colheight];
			Feret = 	ligne[colferet];
			Feret=	parseFloat(Feret)*pixels;
			Smm = 	parseInt(Area);
			Smm = 	Smm * pixels * pixels;
			Smm = 	Smm /3.1416 ;
			Esd = 	2* pow(Smm,0.5);
			Fractal = 	ligne[colfractal];
			no[ind] = 		No;
			label[ind] = 	Label;
			area[ind] = 	Area;
			mean[ind] = 	Mean;
			bx[ind] = 		Bx;
			by[ind] = 		By;
			width[ind] = 	Width;
			height[ind] = 	Height;
			feret[ind] = 	Feret;
			esd[ind] = 	Esd;
			fractal[ind] = 	Fractal;
			Len1 = 	len1[ind];
			Len2 = 	len2[ind];
			Aff= No +"     "+Area+"     "+Esd+"     "+Feret+"     "+Fractal+"     "+Len1+"     "+Len2+"     "+Mean+"     "+Bx+"     "+By+"     "+Width+"     "+Height;
			aff[ind] = Aff;
		} // for
		data = aff[nvig-1];
	} // if
	else { //---------------Sauvegarde du fichier des longueurs (ecrasement de l'ancien)-----------------------
		print("A purger");
		selectWindow("Log");
		run("Close");
		print("!Item;Len;Len2;Area");
		for (i=deb+1; i<pid.length ; i++) {
			ind = i-deb-1;
			Area = 	area[ind];
			No = 	no[ind];
			Len1 = 	len1[ind];
			Len2 = 	len2[ind];
			print(No+";"+Len1+";"+Len2+";"+Area);
		} // for

		selectWindow("Log");
		sauve = "save=" + chemin+"\\"+ titrered + "_length.txt";
		run("Text...",sauve);
		run("Close");
		showMessage("Data saved in "+titrered+"_length.txt                  ");
		// --------------------------Pour sortir-------------------------------------
		f = 1;
	} // else	

} // while f

// ---------------------------------------- FIN --------------------------------------------------
ret = titrered;
return ret;


// -------------------------- Zooprocess_flowcam_PID_Vignettes_composite --------------------------
version = "8.20";
date = "2023/008/28";

// Traitement des images composites du FlowCam
// Solution du probleme image name dans lst

args = 	getArgument();

//args = "C:\\flowcam_composite_essai03 364-193137_2 no flowcam 364-193137_2";
arg = 	split(args," ");
path = 			arg[0];
Filename = 		arg[1];
configfile = 		arg[2];
instrum = 		arg[3];
SampleId = 		arg[4];
Profileraw =		"flowcam_"+Filename;
//	Profileraw =		Filename;
pathraw = 		path+"\\raw\\";
pathprocessed = 	path+"\\work\\"+SampleId+"\\";
pathconfig = 		path+"\\config\\";						// a remplacer dans le soft si OK
pathpidresults = 	path+"\\"+"\\PID_process\\"+"\\Pid_results\\";
pathback =		path+"\\back\\FlowCam_"+SampleId+"_auto\\";
for (b=0;b<4;b++)	{	run("free memory");		wait(1000);	progress = (b+1)/4;	showProgress(progress);   } // for
except = 0;
badsubtrac = 0;
pixel4x= 1.29;
pixel10x= 5;

// --------------------------------------------------------- Mode TEST ----------------------------------------------------------------
batch =		true;
test = 		"0";
printlog = 	0;
debuge = 1;
if (test == "1")  { batch =		"false";	getBoolean("MODE TEST ! Continue ?");	} // if
if (isOpen("Log")) {	selectWindow("Log");		run("Close");	}			
setBatchMode(batch);

// ------------------------ Starting time -----------------------------------------------
dateheurestart =	runMacro("Zooscan_get_time_5");

// ------------------------- Lecture RUN SUMMARY --------------------------------
summaryfile ="not_file";
list_pathraw_filename  = 	getFileList(pathraw+Profileraw);
for (i=0; i<list_pathraw_filename.length ; i++) {
	ctrlsum = endsWith(list_pathraw_filename[i],"_run_summary.txt");
	ctrlctx = endsWith(list_pathraw_filename[i],".ctx");
	ctrllst = endsWith(list_pathraw_filename[i],".lst");
	if (ctrlsum == true )		{ summaryfile = list_pathraw_filename[i];		} // if
	if (ctrlctx == true )		{ ctxfile = list_pathraw_filename[i];		} // if
	if (ctrllst == true )		{ lstfile = list_pathraw_filename[i];		} // if
} // for	
if (summaryfile =="not_file") { getBoolean("Summary file not found in "+pathraw+Profileraw+"\n      \nPress Cancel to abort !");	} // if
open (pathraw+Profileraw+"\\"+summaryfile);
wait(100);
summary = getInfo();
run("Close");
conf  = split(summary,"\n");
size = conf.length;
lenstype = "12X";
i = 0;
while (i<size) {
	a = toString(conf[i]);
	b = replace(a,":"," ");
	c = split(b,"\ ");
	if (c.length>1) {
		if (startsWith(c[0],"	Magnification")) {	lenstype = c[1];	i = 10000;	} // if
	} // if
	i++;
} // for
if (endsWith(lenstype,"4X") )	{		pixel = parseFloat(pixel4x);	}
else if (endsWith(lenstype, "10X") )	{	pixel = parseFloat(pixel10x);	}
else { pixel = 1; 								} // else
//	getBoolean(lenstype+"--"+pixel);

// ------------------------------- Settings ---------------------------------------------------------------
processvignettes = 	1;
processpid = 		1;
echelle_micro = 	"50";	// default
echelletext = 	echelle_micro+ " µm ";
voxelwidth= 	1;
voxelheigth= 	1;
voxeldepth= 	1;
voxelunit = 	"pixel";
param = 	"1";
TAG = 		0;
flagimg = 	0;
gamma = 	1;
gammatext = gamma;
gamma = "value="+gamma;
x1 = 10;

scale = 1;
nbvigar = 100;
duplicatestot = 0;
duplicaterange = 0.05;
notxt = 1000000;
stop_after_n_images = 1000000;

// ----------------------- Conversions  ----------------------------------------------------
echelle_micro = 	parseInt(echelle_micro);
scale = 		parseInt(scale);
longline = 		scale*echelle_micro/pixel;
x2 = x1+longline;

// ----------------------- Pixel size ---------------------------------------------------------
esdmin = parseInt(esdmin);
esdmax = parseInt(esdmax);
esdminp = esdmin/pixel;
esdmaxp = esdmax/pixel;
Spmin = 3.1416 * pow (esdminp/2,2);
Spmax = 3.1416 * pow (esdmaxp/2,2);

// ------------------ Critere de fin -------------------------------------------------------------------
//	imagenb = minOf(j,stop_after_n_images);
imagenb = stop_after_n_images;

// --------------------------- Lecture du fichier "lst" -------------------------------------------------
// LE FICHIER DOIT ETRE OUVERT PAR Notepad+ et enregistré en TXT en AINSI
lst = File.openAsString(pathraw+Profileraw+"\\"+Filename+".lst");
wait(1000);
lst = replace(lst,"|"," ");
data  = split(lst,"\n");
// showMessage(pathraw+Profileraw+"\\"+Filename+".lst   read");

// --------------------------- Selection metadata ---------------------------------------------------
list = newArray(150);
timestamp_line = 0;
image_id_line = 0;
for (i= 0 ; i < data.length ;i++) {
	ligne = data[i];
	if(indexOf(ligne,"id") == 0 ) 		id_line = i;		// 2
	if (indexOf(ligne,"timestamp") == 0) 	timestamp_line = i;
	if (indexOf(ligne,"image_id") == 0) 	image_id_line = i;
	if (indexOf(ligne,"collage_file") == 0) collage_file_line = i;	
	
	if(indexOf(ligne,"image_x") == 0 ) colx = i - id_line;
	if(indexOf(ligne,"image_y") == 0 ) coly = i - id_line;
	if(indexOf(ligne,"image_w") == 0 ) colw = i - id_line;
	if(indexOf(ligne,"image_h") == 0 ) colh = i - id_line;
}
first_data_line_index = maxOf(image_id_line,collage_file_line)+1;

if (timestamp_line == 0) aa = getBoolean("The "+pathraw+Profileraw+"\\"+Filename+".lst file does not contain timestamps. \n \nPress Cancel to abort !");
	
// ------------------------- détection des noms d'image ------------------
if (indexOf(data[first_data_line_index],"flowcam_") >= 0 ) flowcam_test = true;
/*	
	if(indexOf(ligne,"image_x") == 0 ) colx = index -2;
	if(indexOf(ligne,"image_y") == 0 ) coly = index -2;
	if(indexOf(ligne,"image_w") == 0 ) colw = index -2;
	if(indexOf(ligne,"image_h") == 0 ) colh = index -2;
	if (indexOf(ligne,"timestamp") == 0) {	end_meta = index;	}
	if (indexOf(ligne,"image_id") == 0) {	image_id_index = index;	}
	index++;
}
*/

// -------------------------- Entete --------------------
entete = "!Item;Label";
for (i= id_line + 1 ; i < timestamp_line ;i++) {
	val = split(data[i],"\ ");
	entete = entete+";"+val[0];
}

// --------------------------- Boucle sur les lignes DATA ----------------------------------------------------
image_prev = "no";
flowcam_test = false;
// -------------------------- vecteur des données ------------------------
data_vect = newArray(data.length - first_data_line_index);
for (i = first_data_line_index ; i < data.length ;i++) {
	ligne = data[i];
	val = split(ligne,"\ ");
	// ----------------- Deux premiers champs -------------------------
	val_dat = val[0] +";"+Filename;
	
	// ----------------- Vecteur --------------------------------------
	for (j = id_line - 1; j < timestamp_line - id_line ; j++) {	val_dat = val_dat + ";" + val[j];	}
	data_vect[i - first_data_line_index] = val_dat;

	// -------------- Heure debut & FIN ---------------------
	if (i == first_data_line_index) 		date_raw_start = 	val[timestamp_line - id_line];
	if (i == data.length - 1 ) 			date_raw_end = 		val[timestamp_line - id_line];
	
//	aa = getBoolean(date_raw_start);
	
	// -------------- Ouverture image composite si pas ouverte et fermeture précédente -----------------
	image_name = val[collage_file_line - id_line];

	// ------------------- retrait du préfixe flowcam si présent ----------------
	if (indexOf(image_name,"flowcam") == 0) {	image_name = toLowerCase(substring(image_name,8,lengthOf(image_name)));	}
	
//	aa = getBoolean(image_name);
	
	if (image_prev != image_name) {		
		// ------------- Fermeture image_prev et ouverture image_name ---------------
		if (image_prev != "no") {	selectImage(image_prev); 	close();	}
		
		if (		File.exists(pathraw+Profileraw+"\\"+image_name)) 	{open(pathraw+Profileraw+"\\"+image_name); 	image_prev = image_name;	}
//		else if (	File.exists(pathraw+Profileraw+"\\"+image_name_cor))	{open(pathraw+Profileraw+"\\"+image_name_cor); 	image_prev = image_name_cor;	}
		else { aa = getBoolean("The file "+image_name+" or "+image_name_cor+" does not exist in "+pathraw+Profileraw+"\nThe final abundance will be biased. \n \nPress CANCEL and check the folder for the collage images !");	}
		setColor(200,200, 200);
		
//	aa = getBoolean(image_prev);
	
	}
	
	
	
	// -------------- Creation de la vignette ------------------------
	selectImage(image_prev);
	makeRectangle(val[colx],val[coly],val[colw],val[colh]);
	run("Copy");
	largeur = maxOf(longline +10 , val[colw]);
	hauteur = parseInt(val[colh]) + 31;	
	newImage("vignette", "RGB Black", val[colw],val[colh], 1);
	run("Paste");	
	
	// -------------- Ajout légende ----------------------------------
	textesize = "width="+largeur+" height="+hauteur+" position=Top-Left zero";
	run("Canvas Size...", textesize);
	setFont("SansSerif", 9);
	drawString(echelletext,2,hauteur-15);
	setLineWidth(1);
	drawLine(2,hauteur-10,2+longline,hauteur-10);

	// -------------- Enregistrement de la vignette ------------------
	
//	aa = getBoolean(pathprocessed+"\\"+SampleId+"_"+val[0]);
	
	saveAs("jpg", pathprocessed+"\\"+SampleId+"_"+val[0]);
	close();
}

//aa = getBoolean("END vignettes");
// ---------- Ecriture du PID ---------------------
// --------------------- Lecture METADATA ---------------------------------------
open(pathprocessed+SampleId+"_meta.txt");
wait(100);
config = getInfo();
run("Close");
conf  = split(config,"\n");
field = conf[0];
data = conf[1];
field = replace(field,";"," ");
data = replace(data,";"," ");
field = split(field," ");
data = split(data," ");
size = field.length;

// -------------------- ECRITURE PID -----------------------------------------------
if (isOpen("Log")) {	selectWindow("Log");	run("Close"); 	} // if
print("PID");
print(" ");

// ---------------- Metatdata ---------------------------------------------------------
print("[Metadata]");
for (t=0;t<size;t++) {	print(field[t]+"= "+data[t]);	} // for
print(" ");

// ---------------- Run Summary ---------------------------------------------------------
print("[Run_Summary]");
summary = replace(summary,"	","");
summary = replace(summary,": ","= ");
print(summary);
print(" ");

// ----------------- Flowcam settings ---------------------------------------------------
open (pathraw+Profileraw+"\\"+ctxfile);
wait(100);
settings = getInfo();
run("Close");
print(settings);
print(" ");
                              
// --------------- Config --------------------------------------------------------------
print("[Process]");
print("version_no= "+version);
print("version_date= "+date);
print("calibration= NaN");	
print("background_method= NaN");	
print("nb_images= NaN");	
print("rolling= NaN");	
print("pixel= "+pixel);
print("upper= NaN");	
print("gamma= NaN");	
print("echelle_µm= "+echelle_micro);
print("process_option=  Zooprocess"+version);	
print("esdmin= NaN");	
print("spmin= NaN");	
print("esdmax= NaN");	
print("LUT_ofset= NaN");	
print("LUT_slope= NaN");	
print("Stop_after_n_images= NaN");	
print("scale= NaN");	
print("remove_objects_on_sides= NaN");	
print("Stop_after_m_objects= NaN");	
print("Nb_of_rawfile_images_in_folder= NaN");	
print("Image_processed= NaN");	
print("Objects_processed= "+val[0]);
print("Remove_duplicates= NaN");	
print("Grey_auto_adjust= NaN");	

year = substring(date_raw_start,0,4);
month = substring(date_raw_start,5,7);
day = substring(date_raw_start,8,10);
time = substring(date_raw_start,11,13);
hour = substring(date_raw_start,14,16);
dateheurestart = year+month+day+"-"+time+hour;

year = substring(date_raw_end,0,4);
month = substring(date_raw_end,5,7);
day = substring(date_raw_end,8,10);
time = substring(date_raw_end,11,13);
hour = substring(date_raw_end,14,16);
dateheureend = year+month+day+"-"+time+hour;

print("Starting_time= ",dateheurestart);
print("Ending_time= ",dateheureend);
print("Parametre_2= NaN");	
print("Parametre_3= NaN");	
print("Exceptions= NaN");	
print("Bad_subtraction= NaN");	
	
// ---------- Entete ------------------------------
print(" ");
print("[Data]");
print(entete);

// ---------- DATA --------------------------------
for (i = 0 ; i < data_vect.length ; i++) { print(data_vect[i]);	}

// ---------- Enregsitrement ----------------------
// ---------------- Enregistrement dans le repertoire du profile -------------
sauvepid = "save=" + pathprocessed+SampleId +"_dat1.pid";	
selectWindow("Log");
run("Text...",sauvepid);
// ----------------- Enregistrement dans pid_results de la mission ---------
sauvepid = "save=" + pathpidresults+SampleId +"_dat1.pid";
selectWindow("Log");
run("Text...",sauvepid);

// ---------- CREATION du TSV ---------------------
link = "http://www.zooscan.obs-vlfr.fr//";
print(path+" "+pathprocessed+" "+SampleId +"_dat1.pid"+" pid no false new "+link);

flag = runMacro("Zooprocess_pid_to_ecotaxa_flowcam_uvp5_generic",path+" "+pathprocessed+" "+SampleId +"_dat1.pid"+" pid no false new "+link);
if (lengthOf(toString(flag)) == 1)  { 	showMessage("Error message : ''Zooprocess_pid_to_ecotaxa_flowcam_uvp5_generic'' macro aborted.     "); 	}
// ----------------------------- FIN ----------------------------------------------
ret = "OK";
return ret;

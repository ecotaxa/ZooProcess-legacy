// ------------------------- Zooscan_metadata_fill_window ----------------------------------------------
version = "8.27";
date = "2024/08/02";
requires("1.41o");

// Check latitude/longitude
// Barcode en lowercase
// Check latitude end (NaN)
// Nouveaux formats saisie LAT/LON
// Modif ordre des param�tres
// Limite date pass�e de 2020 � 2100
// Meilleures l�gendes des champs et tests am�lior�s
// Meilleure organisation des fen�tres
// Checks lat/lon end
// meilleurs checks input

// ------------------- Collection de Villefranche sur mer ------------------------------
czz = false;
process_type = "edit";

arg = getArgument();
array = split(arg, " ");
sampleId = array[0];
scanop = array[1];
ship = array[2];
scientificprog = array[3];
stationId = array[4];
date = array[5];
latitude = array[6];
longitude = array[7];
depth = array[8];
ctdref = array[9];
otherref = array[10];
townb = array[11];
towtype = array[12];
nettype = array[13];
netmesh = array[14];
netsurf = array[15];
zmax = array[16];
zmin = array[17];
vol = array[18];
sample_comment = array[19];
proj = array[20];
sample = array[21];
// ----------------- Nouveaux param�tres -------------------
//if (array.length == 39 ) { 	
if (array.length == 38) {
    vol_qc = array[22];
    depth_qc = array[23];
    sample_qc = array[24];
    barcode = array[25];
    latitude_end = array[26];
    longitude_end = array[27];
    net_duration = array[28];
    ship_speed_knots = array[29];
    cable_length = array[30];
    cable_angle = array[31];
    cable_speed = array[32];
    nb_jar = array[33];
    czz = array[36];
    process_type = array[37]; //	operator = array[38];
} //
else if (array.length == 22) {
    vol_qc = "0";
    depth_qc = "0";
    sample_qc = "0000";
    barcode = "NaN";
    latitude_end = "0.0";
    longitude_end = "0.0";
    net_duration = 9999;
    ship_speed_knots = 9999;
    cable_length = 9999;
    cable_angle = 9999;
    cable_speed = 9999;
    nb_jar = 9999;
    czz = "0000";
} else {
    aa = getBoolean("The metadata are NOK. \nThe input for the Zooscan_metadata_fill_window.txt macro is " + array.length + " char. \nThe ''zooscan_sample_header_table.csv'' \n or \nthe ''zooscan_scan_header_table.csv'' table might be corrupted. \n \nPlease press CANCEL and check your files.");
}

// ------------------- CORRECTIONS --------------------
if (depth == "NaN") depth = 9999;
if (zmax == "NaN") zmax = 9999;
if (zmin == "NaN") zmin = 9999;
if (net_duration == "NaN") net_duration = 9999;
if (ship_speed_knots == "NaN") ship_speed_knots = 9999;
if (cable_length == "NaN") cable_length = 9999;
if (cable_angle == "NaN") cable_angle = 9999;
if (cable_speed == "NaN") cable_speed = 9999;
if (nb_jar == "NaN") nb_jar = 9999;
if (latitude == "NaN") latitude = "0.0";
if (longitude == "NaN") longitude = "0.0";
if (latitude_end == "NaN") latitude_end = "0.0";
if (longitude_end == "NaN") longitude_end = "0.0";

if (depth == "nan") depth = 9999;
if (zmax == "nan") zmax = 9999;
if (zmin == "nan") zmin = 9999;
if (net_duration == "nan") net_duration = 9999;
if (ship_speed_knots == "nan") ship_speed_knots = 9999;
if (cable_length == "nan") cable_length = 9999;
if (cable_angle == "nan") cable_angle = 9999;
if (cable_speed == "nan") cable_speed = 9999;
if (nb_jar == "nan") nb_jar = 9999;
if (latitude == "nan") latitude = "0.0";
if (longitude == "nan") longitude = "0.0";
if (latitude_end == "nan") latitude_end = "0.0";
if (longitude_end == "nan") longitude_end = "0.0";
if (sample_qc == "nan") sample_qc = "0000";

// ---------------------- Saisie des donn�es SAMPLE ------------------------------------------------------
check = 1;
while (check == 1) {
    check = 0;
    message = "Warning : \n";
    // ----------------------------- WINDOW #1 -----------------------------------------------------
    Dialog.create(" METADATA                          Window #1                  version : " + version + "                                     Please ENTER or CHECK the informations ");
    Dialog.addMessage("-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
    Dialog.addMessage("SAMPLE ID : " + sample + "\nMETADATA from sample ''" + sampleId + "'' displayed below.");
    Dialog.addMessage("-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");

    Dialog.addString("Scientific program ", scientificprog);
    Dialog.addString("Station Id (''NaN'' if unknown) ", stationId);
    Dialog.addNumber("Bottom depth (m) ", depth);
    Dialog.addString("Sampling date (YYYYMMDD-HHMM) ", date);
    latitude = parseFloat(latitude);
    latitude_ns = newArray("N", "S");
    if (latitude < 0) {
        latitude_ns = newArray("S", "N");
    }
    latitude = abs(latitude);
    latitude_deg = floor(latitude);
    latitude_min = 100 * (latitude - latitude_deg);
    Dialog.addNumber("LATITUDE (degree) ", latitude_deg);
    Dialog.addNumber("LATITUDE (minute) ", latitude_min);
    Dialog.addChoice("LATITUDE (N/S)    ", latitude_ns);
    longitude = parseFloat(longitude);
    longitude_ew = newArray("W", "E");
    if (longitude < 0) {
        longitude_ew = newArray("E", "W");
    }
    longitude = abs(longitude);
    longitude_deg = floor(longitude);
    longitude_min = 100 * (longitude - longitude_deg);
    Dialog.addNumber("LONGITUDE (degree) ", longitude_deg);
    Dialog.addNumber("LONGITUDE (minute) ", longitude_min);
    Dialog.addChoice("LONGITUDE (E/W)    ", longitude_ew);
    Dialog.addMessage("-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");

    towtype_list = newArray(" ", "1 : Oblique", "2 : Horizontal", "3 : Vertical", "0 : Other sampling method"); //,"0 : not documented");
    val = parseInt(towtype);
    if (val == 0 || val == 999) val = 4;
    //	if (val == 999) val = 0;
    towtype_val = towtype_list[val];
    towtype_list[0] = towtype_val;
    Dialog.addChoice("Tow type", towtype_list);
    Dialog.addString("Net/sampling type (WP2, JB, Regent, Omori, Multinet...) ", nettype);
    Dialog.addNumber("Net mesh (�m)", netmesh);
    Dialog.addNumber("Net opening surface (m2)", netsurf);
    Dialog.addNumber("Maximum Depth of the net, 9999 if unknown  (m) : Zmax", zmax);
    Dialog.addNumber("Minimum Depth of the net, 9999 if unknown  (m) : Zmin", zmin);
    Dialog.addNumber("Ship speed (knots) 9999 if not documented", parseFloat(ship_speed_knots));
    Dialog.addNumber("Cable speed (m/s) 9999 if not documented", parseFloat(cable_speed));
    Dialog.addNumber("      Cable angle from vertical (�) 9999 if not documented", parseInt(cable_angle));
    Dialog.addNumber("Cable length (m) 9999 if not documented", parseInt(cable_length));
    Dialog.addNumber("        Sampling duration (minute) 9999 if not documented", parseInt(net_duration));
    depth_qc_liste = newArray(" ", "1 : MEASURED by a depth sensor", "2 : CALCULATED from cable length and angle", "3 : ESTIMATED from cable length"); //,"0 : to be LATER documented");
    val = parseInt(depth_qc);
    depth_qc_val = depth_qc_liste[val];
    depth_qc_liste[0] = depth_qc_val;
    Dialog.addChoice("Quality Flag for the depth measurement of the net ", depth_qc_liste);
    Dialog.addMessage("-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");

    Dialog.show;

    Scientificprog = Dialog.getString();
    a = lengthOf(Scientificprog);
    if (a == 0) {
        message = message + "Scientific program empty \n";
        check = 1;
    } // if
    ind = indexOf(Scientificprog, " ");
    if (ind != -1) {
        Scientificprog = replace(Scientificprog, " ", "_");
    }
    scientificprog = Scientificprog;

    StationId = Dialog.getString();
    a = lengthOf(StationId);
    if (a == 0) {
        message = message + "Station Id empty \n";
        check = 1;
    } // if
    ind = indexOf(StationId, " ");
    if (ind != -1) {
        StationId = replace(StationId, " ", "_");
    }
    stationId = toString(StationId);

    Depth = Dialog.getNumber();
    if (Depth == 0) {
        message = message + "Bottom depth is not a number  or Depth set to 0   \n  ";
        check = 1;
    } // if
    depth = Depth;

    Date = Dialog.getString();
    a = lengthOf(Date);
    if (a == 0) {
        message = message + "Date field empty \n  ";
        check = 1;
    } // if
    else if (a == 13) { //---------------------- Remplacement de l'espace eventuel ------------------------------
        ind = indexOf(Date, " ");
        if (ind != -1) {
            Date = replace(Date, " ", "-");
        } // if
        // --------------------- Test sur la postion du ''-'' --------------------------------------------		
        place = indexOf(Date, "-");
        if (place != 8) {
            message = message + "Date incorrect \n  ";
            check = 1;
        } // if
        else { // --------------------- Annee ----------------------------
            an = substring(Date, 0, 4);
            an = parseInt(an);
            if (isNaN(an) == true) {
                message = message + "YEAR incorrect \n  ";
                check = 1;
            } // if
            if (an > 2100) {
                message = message + "YEAR > 2100 \n  ";
                check = 1;
            } // if
            // --------------------- Mois ----------------------------
            mois = substring(Date, 4, 6);
            mois = parseInt(mois);
            if (isNaN(mois) == true) {
                message = message + "MONTH incorrect \n  ";
                check = 1;
            } // if
            if (mois > 12) {
                message = message + "MONTH >12 ! \n  ";
                check = 1;
            } // if
            // --------------------- Jour ----------------------------
            jour = substring(Date, 6, 8);
            jour = parseInt(jour);
            if (isNaN(jour) == true) {
                message = message + "DAY incorrect \n  ";
                check = 1;
            } // if
            if (jour > 31) {
                message = message + "DAY > 31 \n  ";
                check = 1;
            } // if
            // --------------------- Heure ----------------------------
            heure = substring(Date, 9, 13);
            if (isNaN(heure) == true) {
                message = message + "TIME incorrect \n  ";
                check = 1;
            } //if
            if (heure > 2400) {
                message = message + "TIME > 2400 \n  ";
                check = 1;
            } // if
        } // else
    } // else if
    else {
        message = message + "Date format incorrect \n  ";
        check = 1;
    } // else
    date = Date;

    latitude_deg = Dialog.getNumber();
    if (indexOf(toString(latitude_deg), ".") >= 0) {
        message = message + "Latitude (degree) is not an integer \n ";
        check = 1;
    }
    if (latitude_deg > 90) {
        message = message + "Latitude (degree) > 90 \n ";
        check = 1;
    }
    if (latitude_deg < 0) {
        message = message + "Latitude (degree) must not be signed \n ";
        check = 1;
    }

    latitude_min = Dialog.getNumber();
    if (latitude_min > 60) {
        message = message + "Latitude (minute) > 60 \n ";
        check = 1;
    }
    if (latitude_min > floor(latitude_min)) {
        aa = toString(latitude_min, 5);
        array = split(aa, ".");
        aaa = array[0];
        if (lengthOf(aaa) == 1) {
            latitude_min = "0" + aaa + array[1];
        } else {
            latitude_min = aaa + array[1];
        }
    } // if
    latitude = toString(latitude_deg) + "." + latitude_min;

    latitude_ns = Dialog.getChoice();
    if (latitude_ns == "S") latitude = "-" + latitude;

    longitude_deg = Dialog.getNumber();
    if (indexOf(toString(longitude_deg), ".") >= 0) {
        message = message + "Longitude (degree) is not an integer \n ";
        check = 1;
    }
    if (longitude_deg > 180) {
        message = message + "Longitude (degree) > 180 \n ";
        check = 1;
    }
    if (longitude_deg < 0) {
        message = message + "Longitude (degree) must not be signed \n ";
        check = 1;
    }

    longitude_min = Dialog.getNumber();
    if (longitude_min > 60) {
        message = message + "Latitude (minute) > 60 \n ";
        check = 1;
    }
    if (longitude_min > floor(longitude_min)) {
        aa = toString(longitude_min, 5);
        array = split(aa, ".");
        aaa = array[0];
        if (lengthOf(aaa) == 1) {
            longitude_min = "0" + aaa + array[1];
        } else {
            longitude_min = aaa + array[1];
        }
    } // if
    longitude = toString(longitude_deg) + "." + longitude_min;

    longitude_ew = Dialog.getChoice();
    if (longitude_ew == "E") longitude = "-" + longitude;

    Towtype = Dialog.getChoice();
    if (Towtype == " ") {
        message = message + "Towtype = '' '', select a correct criteria   \n  ";
        check = 1;
    } // if
    towtype = substring(Towtype, 0, 1);
    //	if (towtype == 0) { Towtype = "999"	};

    Nettype = Dialog.getString();
    a = lengthOf(Nettype);
    if (a == 0) {
        message = message + "Net type empty \n";
        check = 1;
    } // if
    ind = indexOf(Nettype, " ");
    if (ind != -1) {
        Nettype = replace(Nettype, " ", "_");
    }
    nettype = Nettype;

    Netmesh = Dialog.getNumber();
    if (Netmesh == 0) {
        message = message + "The net mesh is not a number  or Net mesh set to 0   \n  ";
        check = 1;
    } // if
    netmesh = Netmesh;

    Netsurf = Dialog.getNumber();
    if (Netsurf == 0) {
        message = message + "The net opening surface is not a number  or Net surface set to 0   \n  ";
        check = 1;
    } // if
    netsurf = Netsurf;

    Zmax = Dialog.getNumber();
    if (Zmax == 0) {
        message = message + "The max depth of the net is not a number  or set to 0   \n  ";
        check = 1;
    } // if
    zmax = Zmax;

    Zmin = Dialog.getNumber();
    zmin = Zmin;

    Ship_speed_knots = Dialog.getNumber();
    ship_speed_knots = Ship_speed_knots;
    cable_speed = Dialog.getNumber();
    cable_angle = Dialog.getNumber();
    cable_length = Dialog.getNumber();
    net_duration = Dialog.getNumber();

    Depth_qc = Dialog.getChoice();
    if (Depth_qc == " ") {
        message = message + "Net depth QC = '' '', select correct criteria   \n  ";
        check = 1;
    } // if
    depth_qc = substring(Depth_qc, 0, 1);
    if (Depth_qc == "3") {
        vol = netsurf * cable_length;
    } else if (Depth_qc == "2" && cable_angle < abs(90)) {
        vol = netsurf * cable_length * cos(cable_angle);
    }

    if (longitude == "0.0" && latitude == "0.0") {
        check = getBoolean("The starting latitude and longituide are 0.0. \nDid you really sample at this position ? \n \nPlease consider documenting this fields by pressing YES. \nPress NO otherwise.");
    }
    if (check == 1) {
        message = message + " \nEnter values again              ";
        showMessage(message);
    } // if
}

// -------------------------------------- WINDOW #2 ------------------------------------------------------------
check = 1;
while (check == 1) {
    check = 0;
    message = "Warning : \n";
    Dialog.create(" METADATA                          Window #2                  version : " + version + "                                     Please ENTER or CHECK the informations ");
    Dialog.addMessage("-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
    Dialog.addMessage("SAMPLE ID : " + sample + "\nMETADATA from sample ''" + sampleId + "'' displayed below.");
    Dialog.addMessage("-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
    if (Towtype == "3 : Vertical" && process_type == "new") {
        Dialog.addMessage("The towtype is ''Vertical''. The starting latitude and longitude are utilised. ");
        latitude_end = latitude;
        longitude_end = longitude;
    }
    latitude_end = parseFloat(latitude_end);
    latitude_ns = newArray("N", "S");
    if (latitude_end < 0) {
        latitude_ns = newArray("S", "N");
    }
    latitude_end = abs(latitude_end);
    latitude_end_deg = floor(latitude_end);
    latitude_end_min = 100 * (latitude_end - latitude_end_deg);

    longitude_end = parseFloat(longitude_end);
    longitude_ew = newArray("W", "E");
    if (longitude_end < 0) {
        longitude_ew = newArray("E", "W");
    }
    longitude_end = abs(longitude_end);
    longitude_end_deg = floor(longitude_end);
    longitude_end_min = 100 * (longitude_end - longitude_end_deg);

    Dialog.addNumber("ENDING LATITUDE (degree) (missing value : 99999) ", latitude_end_deg);
    Dialog.addNumber("ENDING LATITUDE (minute) (missing value : 0)", latitude_end_min);
    Dialog.addChoice("ENDING LATITUDE (N/S)    ", latitude_ns);
    Dialog.addNumber("ENDING LONGITUDE (degree) (missing value : 99999)", longitude_end_deg);
    Dialog.addNumber("ENDING LONGITUDE (minute) (missing value : 0)", longitude_end_min);
    Dialog.addChoice("ENDING LONGITUDE (E/W)    ", longitude_ew);
    Dialog.addMessage("-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
    Dialog.addString("Ship ", ship);
    Dialog.addString("CTD reference (filename) ", ctdref);
    Dialog.addMessage("-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
    Dialog.addNumber("Number of tows in the sample jar ", townb);
    Dialog.addNumber("         Total filtered volume (m3), (sum of the nets), 99999 if unknown)", vol);
    vol_qc_liste = newArray(" ", "1 : RECORDED volume (flowmeter)", "2 : CALCULATED volume (using the mean volume of other nets)", "3 : ESTIMATED volume (net AREA x towed DISTANCE)"); //,"0 : to be LATER documented");
    val = parseInt(vol_qc);
    //	if (val == 0) val = 4;
    vol_qc_val = vol_qc_liste[val];
    vol_qc_liste[0] = vol_qc_val;
    Dialog.addChoice("Quality Flag of the filtered volume of the net ", vol_qc_liste);
    Dialog.addString("Add sample comment ", sample_comment);
    Dialog.addNumber("Nb of jars for the sample, 9999 if not documented", parseInt(nb_jar));
    Dialog.addString("BARCODE (separated by ''_'' if many) ", barcode);
    if (czz == true) {
        Dialog.addString("CCP location code ", otherref);
    } else {
        Dialog.addString("Other reference ", otherref);
    }

    sampleqc_air = parseInt(substring(sample_qc, 0, 1));
    sampleqc_rich = parseInt(substring(sample_qc, 1, 2));
    sampleqc_cond = parseInt(substring(sample_qc, 2, 3));
    sampleqc_dist = parseInt(substring(sample_qc, 3, 4));

    jar_air_qc_liste = newArray(" ", "1 : JAR airtighness OK", "2 : JAR airtighness NOK"); //,"0 : to be LATER documented");
    aa = jar_air_qc_liste[sampleqc_air];
    jar_air_qc_liste[0] = aa;
    Dialog.addChoice("JAR airtighness ", jar_air_qc_liste);

    jar_richness_liste = newArray(" ", "1 : NORMAL richness", "2 : VERY RICH sample", "3 : NO PLANKTON (almost) in sample"); // ,"0 : to be LATER documented");
    aa = jar_richness_liste[sampleqc_rich];
    jar_richness_liste[0] = aa;
    Dialog.addChoice("SAMPLE richness ", jar_richness_liste);

    jar_condition_liste = newArray(" ", "1 : GOOD conditionning", "2 : DRYED (no remaining liquid)", "3 : ROTTEN (loss of fixative)"); //,"0 : to be LATER documented");
    aa = jar_condition_liste[sampleqc_cond];
    jar_condition_liste[0] = aa;
    Dialog.addChoice("SAMPLE conditionning ", jar_condition_liste);

    jar_disturb_liste = newArray(" ", "1 : NO disturbing elements", "2 : ONE or FEW very large objects present in the jar", "3 : SOUP (phytoplankton - organic matter - clay/mud/mineral)"); //,"0 : to be LATER documented");
    aa = jar_disturb_liste[sampleqc_dist];
    jar_disturb_liste[0] = aa;
    Dialog.addChoice("SAMPLE content ", jar_disturb_liste);
    Dialog.addMessage("-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");

    Dialog.show;

    latitude_deg = Dialog.getNumber();
    if (indexOf(toString(latitude_deg), ".") >= 0) {
        message = message + "Latitude (degree) is not an integer \n ";
        check = 1;
    }
    if (latitude_deg > 90 && latitude_deg != 99999) {
        message = message + "Latitude (degree) > 90 \n ";
        check = 1;
    }
    if (latitude_deg < 0) {
        message = message + "Latitude (degree) must not be signed \n ";
        check = 1;
    }

    latitude_min = Dialog.getNumber();
    if (latitude_min > 60) {
        message = message + "Latitude (minute) > 60 \n ";
        check = 1;
    }
    if (latitude_min > floor(latitude_min)) {
        aa = toString(latitude_min, 5);
        array = split(aa, ".");
        aaa = array[0];
        if (lengthOf(aaa) == 1) {
            latitude_min = "0" + aaa + array[1];
        } else {
            latitude_min = aaa + array[1];
        }
    } // if
    latitude_end = toString(latitude_deg) + "." + latitude_min;

    latitude_ns = Dialog.getChoice();
    if (latitude_ns == "S") latitude_end = "-" + latitude_end;

    longitude_deg = Dialog.getNumber();
    if (indexOf(toString(longitude_deg), ".") >= 0) {
        message = message + "Longitude (degree) is not an integer \n ";
        check = 1;
    }
    if (longitude_deg > 180 && longitude_deg != 99999) {
        message = message + "Longitude (degree) > 180 \n ";
        check = 1;
    }
    if (longitude_deg < 0) {
        message = message + "Longitude (degree) must not be signed \n ";
        check = 1;
    }

    longitude_min = Dialog.getNumber();
    if (longitude_min > 60) {
        message = message + "Latitude (minute) > 60 \n ";
        check = 1;
    }
    if (longitude_min > floor(longitude_min)) {
        aa = toString(longitude_min, 5);
        array = split(aa, ".");
        aaa = array[0];
        if (lengthOf(aaa) == 1) {
            longitude_min = "0" + aaa + array[1];
        } else {
            longitude_min = aaa + array[1];
        }
    } // if
    longitude_end = toString(longitude_deg) + "." + longitude_min;

    longitude_ew = Dialog.getChoice();
    if (longitude_ew == "E") longitude_end = "-" + longitude_end;

    Ship = Dialog.getString();
    a = lengthOf(Ship);
    if (a == 0) {
        message = message + "Zooscan Operator empty \n";
        check = 1;
    } // if
    ind = indexOf(Ship, " ");
    if (ind != -1) {
        Ship = replace(Ship, " ", "_");
    }
    ship = Ship;

    CTDref = Dialog.getString();
    a = lengthOf(CTDref);
    if (a == 0) {
        message = message + "CTDref empty \n";
        check = 1;
    } // if
    ind = indexOf(CTDref, " ");
    if (ind != -1) {
        CTDref = replace(CTDref, " ", "_");
    }
    ctdref = CTDref;

    Townb = Dialog.getNumber();
    if (Townb == 0) {
        message = message + "The Townb is not a number or Townb set to 0   \n  ";
        check = 1;
    } // if
    townb = Townb;

    Vol = Dialog.getNumber();
    if (Vol == 0) {
        message = message + "The filtered volume is not a number or set to 0   \n  ";
        check = 1;
    } // if
    vol = Vol;

    Vol_qc = Dialog.getChoice();
    if (Vol_qc == " ") {
        message = message + "VOLUME QC = '' '', select correct criteria   \n  ";
        check = 1;
    } // if
    vol_qc = substring(Vol_qc, 0, 1);

    sample_comment = Dialog.getString();
    sample_comment = toLowerCase(sample_comment);
    sample_comment = replace(sample_comment, " ", "_");
    sample_comment = replace(sample_comment, ".", "_");
    sample_comment = replace(sample_comment, ";", "_");
    sample_comment = replace(sample_comment, "=", "_");
    sample_comment = replace(sample_comment, "+", "_");
    sample_comment = replace(sample_comment, "/", "_");
    sample_comment = replace(sample_comment, "-", "_");

    nb_jar = Dialog.getNumber();

    barcode = Dialog.getString();
    barcode = toLowerCase(barcode);
    barcode = replace(barcode, " ", "_");
    barcode = replace(barcode, ".", "_");
    barcode = replace(barcode, ";", "_");
    barcode = replace(barcode, "=", "_");
    barcode = replace(barcode, "+", "_");
    barcode = replace(barcode, "/", "_");
    barcode = replace(barcode, "-", "_");

    Otherref = Dialog.getString();
    a = lengthOf(Otherref);
    if (a == 0) {
        message = message + "Other reference empty \n";
        check = 1;
    } // if
    ind = indexOf(Otherref, " ");
    if (ind != -1) {
        Otherref = replace(Otherref, " ", "_");
    }
    otherref = Otherref;

    Jar_air_qc_liste = Dialog.getChoice();
    sample_qc1 = substring(Jar_air_qc_liste, 0, 1);

    Jar_richness_liste = Dialog.getChoice();
    sample_qc2 = substring(Jar_richness_liste, 0, 1);

    Jar_condition_liste = Dialog.getChoice();
    sample_qc3 = substring(Jar_condition_liste, 0, 1);

    Jar_disturb_liste = Dialog.getChoice();
    sample_qc4 = substring(Jar_disturb_liste, 0, 1);

    sample_qc = sample_qc1 + sample_qc2 + sample_qc3 + sample_qc4;

    if (longitude_end == "0.0" && latitude_end == "0.0") {
        check = getBoolean("The ending latitude and longituide are 0.0. \nDid you really sample at this position ? \n \nPlease consider documenting this fields by pressing YES. \nPress NO otherwise.");
    }
    if (check == 1) {
        message = message + " \nEnter values again              ";
        showMessage(message);
    } // if

} // while


// ------------------- FIN ---------------------------
texte = sample + " " + scanop + " " + ship + " " + scientificprog + " " + stationId + " " + date + " " + latitude + " " + longitude + " " + depth + " " + ctdref + " " + otherref + " " + townb + " " + towtype + " " + nettype + " " + netmesh + " " + netsurf + " " + zmax + " " + zmin + " " + vol + " " + sample_comment + " " + vol_qc + " " + depth_qc + " " + sample_qc + " " + barcode + " " + latitude_end + " " + longitude_end + " " + net_duration + " " + ship_speed_knots + " " + cable_length + " " + cable_angle + " " + cable_speed + " " + nb_jar;
return texte;
// ---------------------------- Process images calibrage UVP5 ----------------------------------
date = "2011/01/19";
version = "7.05";

// ---------------------------- Initialisation ------------------------------------------------------------
run("Input/Output...", "jpeg=80 gif=-1 file=.xls");
while (nImages() > 0) {
    selectImage(nImages());
    run("Close");
} // while	
threshold = 21;
smzoo = 2;
ratio = 5;
indexvignette = 0;
selectlarger = true;
process = 0;
run("Set Measurements...", "area mean centroid bounding area_fraction limit redirect=None decimal=0");
textanalyse = "size=" + smzoo + "0-Infinity circularity=0.00-1.00 show=Nothing display clear include";
setBatchMode(true);
run("Input/Output...", "jpeg=100 gif=-1 file=.xls");

// ------------- fermeture Results et Log ---------------------------------------
if (isOpen("Results")) {
    selectWindow("Results");
    run('Close');
} // if
if (isOpen("Log")) {
    selectWindow("Log");
    run('Close');
} // if

// ---------------------------- Entete ---------------------------------------------------------
print("i;Image;Area1;Area1r;Mean1;X1;Y1;Area2;Area2r;Mean2;X2;Y2");

// ---------------------------- Choix du r�pertoire contenant run -----------------------
//	getDirectory("Select Images directory");
dirvig = "K:\\uvp5_calibration_sn002\\raw\\";

// -------------- Liste des casts ---------------------
filehdrlist = getFileList(dirvig);
listhdr = newArray(filehdrlist.length);
h = 0;
for (i = 0; i < filehdrlist.length; i++) {
    nomrep = filehdrlist[i];
    if (startsWith(nomrep, "HDR")) {
        //		getBoolean(nomrep);
        rr = filehdrlist[i];
        listhdr[h] = rr;
        h++;
    } // if
} // for
if (h >= 1) {
    listhdrfin = newArray(h);
    for (i = 0; i < h; i++) {
        rr = listhdr[i];
        listhdrfin[i] = rr;
    } // for
} // if
else {
    getBoolean("No folder in " + dirvig + "\nPress Cancel to abort and select another folder !    ");
} // else

// -------------- Boucle sur les casts ---------------------
for (m = 1; m < h; m++) {
    // -------------- Nom du cast -------------------------------
    castname = listhdrfin[m];
    long = lengthOf(castname);
    filename = substring(castname, 0, long - 1);
    //--------------- Selection des fichiers  -------------------
    filelist = getFileList(dirvig + filename + "\\");
    g = 0;
    pos = 0;
    list = newArray(filelist.length);
    for (i = 0; i < filelist.length; i++) {
        nomvig = filelist[i];
        pos = endsWith(nomvig, ".bmp");
        size = File.length(dirvig + filename + "\\" + nomvig);
        size = parseInt(size);
        if (pos == true && size >= 1000000) {
            rr = filelist[i];
            list[g] = rr;
            g++;
        } // if
    } // for
    if (g >= 1) {
        listimg = newArray(g);
        for (i = 0; i < g; i++) {
            rr = list[i];
            listimg[i] = rr;
        } // for
    } // if
    //---------------------Test de la presence de fichiers dans le repertoire-----------------------------------------------------------------------	
    if (g == 0) {
        configpres = 0;
        getBoolean("No file in " + dirvig + "  \nPress Cancel to end !          ");
    } //
    else { // --------------------- Creation r�pertoire vignettes ----------------------------
        dirresultvig = dirvig + filename + "\\vignettes_calib\\";
        File.makeDirectory(dirresultvig);
        //	getBoolean(dirresultvig);
        //		g = 15;
        // --------------------- Process images ---------------------------------------------	
        for (img = 0; img < g; img++) {
            image = listimg[img];
            open(dirvig + filename + "\\" + image);
            rename("image");
            if (indexvignette / 1000 == floor(indexvignette / 1000) && indexvignette != 0) {
                while (nImages() > 0) {
                    selectImage(nImages());
                    run("Close");
                } // while	
                for (b = 0; b < 4; b++) {
                    run("free memory");
                    wait(1000);
                } // for	
            } // if	
            if (img / 50 == floor(img / 50) && img != 0) {
                // ------------- Fermeture image sum-----------------------------------------------------
                text = dirresultvig + "\\somme_" + img + ".bmp";
                selectImage("source");
                //				run("Invert");
                saveAs("BMP", text);
                close();
                process = 1;
            } // if	
            // --------------- Ouverture image -----------
            Larg = getWidth();
            Haut = getHeight();
            long = lengthOf(image);
            imagered = replace(image, "_", ".");
            imagered = substring(imagered, 0, long - 4);
            setThreshold(threshold, 255);
            run("Convert to Mask");
            if (img == 0 || process == 1) {
                run("Duplicate...", "title=source");
            } // if
            selectImage("image");
            run("Image Calculator...", "image1=source operation=Add image2=image");
            // -------------- Analyse particules > SMZOO --------------------------
            selectImage("image");
            run("Analyze Particles...", textanalyse);
            counterfin = nResults;

            if (selectlarger == true && counterfin != 0) {
                ligne = 0;
                gg = 0;
                // ---------------------- Si probleme de vignette blanche -----------------------------------
                areainit = getResult("Area", ligne);
                while (gg < counterfin) {
                    area = getResult("Area", gg);
                    if (area > areainit) ligne = gg;
                    areainit = maxOf(area, areainit);
                    gg++;
                } // for
                counterfin = 1;
            } // if

            // ------------ extraction vignettes � partir image segment�e -------------------------------		
            if (counterfin != 0) {
                for (j = 0; j < counterfin; j++) { // 
                    if (selectlarger == true && counterfin != 0) {
                        hh = ligne;
                    } // if
                    else {
                        hh = j;
                    } // else
                    Bx = getResult("BX", hh);
                    //		getBoolean(counterfin+"    "+j+"    "+ligne);
                    By = getResult("BY", hh);
                    area = getResult("Area", hh);
                    parea = getResult("%Area", hh);
                    mean = getResult("Mean", hh);
                    x = getResult("X", hh);
                    y = getResult("Y", hh);
                    print(indexvignette + ";" + imagered + ";" + area + ";" + parea + ";" + mean + ";" + x + ";" + y + ";" + area + ";" + parea + ";" + mean + ";" + x + ";" + y);
                    L = getResult("Width", j);
                    H = getResult("Height", j);
                    larg = L;
                    haut = H;
                    offsetx = L * (ratio - 1) / 2;
                    offsety = H * (ratio - 1) / 2;
                    //-----------------------------Creation de la vignette--------------------------------
                    Xmin = Bx - offsetx;
                    //---------------Cas Xmin < 0--------------------
                    if (Xmin < 0) {
                        Xa = 0;
                        Lnew = L * ratio / 2;
                    } // if
                    else {
                        Xa = Xmin;
                        Lnew = L * ratio;
                    } // else	
                    Xmax = Xmin + Lnew;
                    // ---------------Cas Xmax > Larg---------------
                    if (Xmax > Larg) {
                        La = Larg - Xa;
                    } // if
                    else {
                        La = Lnew;
                    } // else
                    Ymin = By - offsety;
                    // ----------------Cas Ymin <0--------------------
                    if (Ymin < 0) {
                        Ya = 0;
                        Hnew = (H * ratio / 2) + By;
                    } // if
                    else {
                        Ya = Ymin;
                        Hnew = (H * ratio);
                    } // else
                    Ymax = Ymin + Hnew;
                    //-----------------Cas Ymax > Haut--------------
                    if (Ymax > Haut) {
                        Ha = Haut - Ya;
                    } // if
                    else {
                        Ha = Hnew;
                    } // else
                    //------------------------ Il faut que l'image source soit active-------------------
                    selectImage("image");
                    makeRectangle(Xa, Ya, La, Ha);
                    run("Copy");
                    newImage("vignette", "8-bit White", Lnew, Hnew, 1);
                    makeRectangle(Xa - Xmin, Ya - Ymin, La, Ha);
                    run("Paste");

                    // ----------------------Enregistrement---------------------------------------------------------------
                    no = indexvignette;
                    if (indexvignette < 10) no = "00000" + toString(indexvignette);
                    else if (indexvignette < 100) no = "0000" + toString(indexvignette);
                    else if (indexvignette < 1000) no = "000" + toString(indexvignette);
                    else if (indexvignette < 10000) no = "00" + toString(indexvignette);
                    else if (indexvignette < 100000) no = "0" + toString(indexvignette);
                    imagesv = replace(imagered, "_", ".");
                    text = dirresultvig + "\\" + no + "_" + imagesv + ".bmp";
                    selectImage("vignette");
                    run("Invert");
                    saveAs("BMP", text);
                    //		selectImage(no+"_"+imagesv+".bmp");	
                    close();
                    //-------------------- index vignette ------------------------------------------------
                    indexvignette++;
                } // for objets dans image
            } // if presence objets
            // ------------- Fermeture image -----------------------------------------------------
            selectImage("image");
            close();

        } // for img
        // ------------- Fermeture image sum-----------------------------------------------------
        text = dirresultvig + "\\somme_" + img + ".bmp";
        selectImage("source");
        //		run("Invert");
        saveAs("BMP", text);
        close();
    } // else presence images
} // for boucle sur les r�peroires

// --------------------------- Sauvegarde du fichier donn�es -----------------------------------
dateheure = runMacro("Zooscan_get_time_5");

// -------------------- Enregistrement LOG ----------------------------------
text = "save=" + dirvig + dateheure + "_global.txt";
selectWindow("Log");
run("Text...", text);

// ---------------------- FIN ---------------------------
showMessage("End of image process for calibration !");
ret = "OK";
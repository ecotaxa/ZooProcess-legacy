//---------------------------Zooscan_vignettes_to_work.txt---------------------------------
version = "7.23";
date = "2017/02/03";

// Cette routine ne fonctionne que dans le respect de l'arborescence Zooscan_scan\_work\
//args = getArgument();
//arg = split(args," ");
//chem = 		arg[0];
//projfolder = 	arg[1];


chem = "C:\\Zooscan\\";
projfolder = "G:\\Zooscan_rond_carre_zooprocess_separation_training";

lon = lengthOf(projfolder);
zoosc = indexOf(projfolder,"Zooscan_");
proj = substring(projfolder,zoosc+8,lon);
chemscan = 	projfolder  + "\\Zooscan_scan\\";
chemwork = 	chemscan + "_work\\";
chemmeta = 	projfolder+"\\Zooscan_meta\\";
chemtemp = 	chem + "Zooscan_temp\\";
extract = "vis";
titre = "Hello";		size = 1;		mode = true;
resolution = "2400";	
longline = "1";	
contrast = 1.1;

axesauto = 0;	deb = 0;		header =0;	learnnb = 0;	x1 = 10;		sizeref = 70;
longline = parseFloat(longline);
pidfile = 1;		nbval2 = 0;	minvig = 0;	maxvig = 10000;	start = 0;		Pred = "NO";	testout = 0;	disp1 = 0;	disp2 = 0;	
nb = 4;	duration = 1000;
masksave = "1";
chemin = "unused";
maskout = false;
maskclear = true;
gamma = 	maxOf(gamma,0.5);
gamma = 	minOf(gamma,5);
textgamma = "value="+gamma;
resolution = parseInt(resolution);
if (resolution == 300) {	longline = 5;		} // if
vignettetext = toString(longline);
x2 = x1+longline*resolution/25.4;
pixels = 25.4/resolution;
clean = 1;	legend = 2;	flip = "0";		upper = 243;
format = "jpeg";
legendzooscan = false;

// ---------------------- Ouverture du  SCAN header -------------------
metafile = chemmeta+"zooscan_scan_header_table.csv";
open(metafile);  
wait(100);
metadata_scan = getInfo();
data_scan = split(metadata_scan,"\n");
k = data_scan.length;
run("Close");
// ---------------- Création vecteurs -------------------------------------------------------------------------------------
scanId = newArray(k-1);
for (i=0; i< k-1 ; i++) {
	texte = data_scan[i+1];
	texte = replace(texte,";"," ");
	array = split(texte," ");
	scanId[i]= array[0]; 	
} // for
// ---------------------- Boucle sur les scan -------------------------
for (w=0; w< data_scan.length-1 ; w++) {
	path_work_sample = chemwork + scanId[w]+"\\";	
	if (File.exists(path_work_sample)) {
		if (isOpen("Log")) {		selectWindow("Log"); 	run("Close");					} // if
//	aa = getBoolean("WORK SAMPLE : "+path_work_sample);
		//-------------------------------- Existence du PID et du VIS --------------------------------------
		pidfile = scanId[w]+"_dat1.pid";
		long = 	lengthOf(pidfile);
		rr = 	substring(pidfile,0,long-9);
		imagezip  =  	chemwork+"\\"+rr+"\\"+rr+"_vis1.zip";
		imagejpg = 	chemwork+"\\"+rr+"\\"+rr+"_vis1.jpg";
		imagemsk = 	chemwork+"\\"+rr+"\\"+rr+"_msk1.gif";
		zipexist = File.exists(imagezip);
		jpgexist = File.exists(imagejpg);
		mskexist = File.exists(imagemsk);
		// --------------- OUverture du Pid car images existent -----------
		if ((zipexist == 1 || jpgexist == 1)&& mskexist == 1 ){ 
			openpid = path_work_sample +pidfile;
			open(openpid);
			wait(500);
			config = getInfo();
			pid = split(config,"\n");
			run("Close");
			//-----------------Recherche DATA section--------------------------
			for (i=0; i<pid.length ; i++) {	ctrl1 = indexOf(pid[i],"[Data]");
				if (ctrl1>=0) deb=i+1;
			} // for
			//------------------Detection des N° de colonnes pour les champs-------------
			coltag = 0;
			a= replace(pid[deb],";"," ");
			entete = split(a,"\ ");
			for (i=0; i<entete.length ; i++) {	v = entete[i];
				if (v=="Tag") { 	coltag = i;		} //if
			} // for
			valeur = entete[0];
			pligne = valeur;
			long = entete.length - 1;
			for (j=1; j<long+1; j++) {	valeur =  entete[j];	pligne = pligne + ";"+ valeur;		} // if
			print(pligne); 
			// ------------------------ Boucle sur les lignes---------------------------------
			start = deb+1;
			if (header ==0) { start = deb;				header =1;		} // if
			showStatus("Loading "+pidfile);
			nbval = 	pid.length-deb;		// -1;
			identligne = 	newArray(nbval);
			indexmat = 	0;
			for (i=start; i<pid.length; i++)	{
				mat = pid[i];
				mat = replace(mat,";"," ");
				item = split(mat,"\ ");
					// --------------------Boucle sur les items----------------------------------
					valeur = item[0];
					pligne = valeur;
					Nbb = parseInt(valeur);
					long = item.length;
					//----------------Suppression des TAG = 0 et Tag = 2 (dernier colonne) ----------------------------------------
					//	if (coltag> 0) 
					long = entete.length - 1;
					for (j=1; j<long+1; j++) {	valeur =  item[j];	pligne = pligne + ";"+ valeur;		} // if
					// ---------- On n'imprime que les donnees tag = 1. On supprime donc les doublons du PID ainsi que les Tag = 0 ---------------
					if (coltag == 0 ) { 
						if (Nbb >= minvig && Nbb <= maxvig) {		print(pligne);	learnnb++;		} // if	
					} // if
					else { TAG = item[coltag];	
						if (TAG==1 && Nbb>= minvig && Nbb <= maxvig) {print(pligne);	learnnb++;	} // if	
					} // else	
			} // for (boucle sur les lignes)
		} // if image existe
		else { bilan = bilan+"\n"+rr;	} // else
	} // if

	//--------------------------------Sauvegarde d'un fichier "Learning" dans le "temp"-----------------------------------------
	openfile = chemtemp + "trainPID.txt";
	if (isOpen("Log")) {	selectWindow("Log");	sauve = "save=" + openfile;	run("Text...",sauve);		} // if
	open(openfile);
	wait(1000);
	config = getInfo();
	dataline = split(config,"\n");
	run("Close");
	//-----------------Recherche Type de separateur ( tabs, ; ou space)--------------------------
	sep = "tabs";
	ctrl1 = indexOf(dataline[0],";");
	if (ctrl1>=0) { 	print("'';'' separator");			sep = "dotcoma";	} // if
	ctrl1 = indexOf(dataline[0]," ");
	if (ctrl1>=0) { 	print("''space'' separator");		sep = "space";	} // if
	//------------------Creation des vecteurs---------------------------------
	long = dataline.length;
	print("Vignettes to extract  = ",long-1);
	nbval = long-0-1;
	identligne = 	newArray(nbval);		// source
	sortedligne = 	newArray(nbval);		// triee
	//------------------Detection des N° de colonnes pour les champs-------------
	if (sep == "dotcoma") {	a= replace(dataline[0],";"," ");	ligne = split(a,"\ ");		} // if
	else if (sep == "tabs") {	a = dataline[0];			ligne = split(a,"\t");		} // if
	else {	getBoolean("Your file is not OK (no '';'', no tabs)            \nPress Cancel to abort                     ");	} // else
	colident =0;	collabel = 0;	colbx = 0;		colby = 0;		
	colarea = 0;	colwidth = 0;	colheight = 0;	colno = 0;
	colpred = 0;
	for (i=0; i<ligne.length ; i++) {	
		v = ligne[i];	
		if (v=="Label") { 	collabel = i;		} //if	Nom de l image source
		if (v=="BX") { 	colbx = i;			} //if
		if (v=="BY") { 	colby = i;			} //if
		if (v=="Area") { 	colarea = i;		} //if
		if (v=="Width") { 	colwidth = i;		} //if
		if (v=="Height") { 	colheight = i;		} //if
		if (v=="!Item") { 	colno = i;			} //if
		ctrlpred = startsWith(v,"pred_");
		if (ctrlpred==1) { 	colpred = i;		} // if
	} // for
	if (collabel ==0 || colbx ==0 || colby==0 || colwidth==0 || colheight==0 ) { 	showMessage("The file did not contain all the required fields    (check ''pred_'')              ") ;	} // if
	else  { 	test = 1;		} // else
	//------------------Lecture des valeurs et ecriture des vecteurs------------------------------------
	for (i=0+1; i<long ; i++) {
		if (sep != "tabs") {	a= replace(dataline[i],";"," ");	ligne = split(a,"\ ");		} // if
		else {	a= dataline[i];		ligne = split(a,"\t");		} // if
		ind = 	i-0-1;
		No = 	ligne[colno];
		Label = 	ligne[collabel];
		Area = 	ligne[colarea];
		Bx = 	ligne[colbx];
		By = 	ligne[colby];
		Width = 	ligne[colwidth];
		Height = 	ligne[colheight];
		Smm = 	parseInt(Area);
		Smm = 	Smm * pixels * pixels;
		Smm = 	Smm /3.1416 ;
		Esd = 	2* pow(Smm,0.5);
		if (extract == "vis") {		Pred = "VIS";		} // if	
		messagelist = " No      Image                   Pred.          Area     ESD       Bx     By     Width     Height" ;
		b = No+"     "+Label+" "+Pred+"     "+Area+"     "+Esd+"     "+Bx+"     "+By+"     "+Width+"     "+Height;	
		identligne[ind] = b;
		//	print("ind= ",ind," b= ",b);
	} // for
	colimg = 1;	colpred = 2;	colbx = 5;	colby = 6;	colwidth = 7;	colheight = 8;	
	//------------------------------TRI des vignettes image par image pour accelerer l'identification par la suite--------------------------------------------------------
	index = 0;	col = 0;		deb = 0;
	sortedligne = 	newArray(nbval);		
	vignettesname = 	newArray(nbval);
	sortedvignettes = 	newArray(nbval);
	nbtotvignettes = 	nbval;
	// --------------------------- Recopie des valeurs dans une nouvelle matrice vignettelist ----------------------------
	vignetteslist = 	newArray(nbval);
	for (k=deb; k<nbtotvignettes ; k++) {	vignette = 	identligne[k];	vignetteslist[k] = vignette;		} // for
	// --------------------------- Liste des images source d'au moins une vignette -------------------------------------------
	listimages = 	newArray(3000);
	debimage =	newArray(3000);
	image =	"ZZZZZZ";
	indimg = 0;
	for (k=0; k<nbtotvignettes ; k++) {
		vigligne = 		split(vignetteslist[k]," ");
		vigimage =	vigligne[1];
		if (vigimage != image && vigimage !="ZZZZZZZZZZ" ) { 
			listimages[indimg] = 	vigimage;
			vignetteslist[k] =		"Z ZZZZZZZZZZ Z Z Z Z Z Z Z";
			for (g=0; g<nbtotvignettes ; g++) {
				// -------------------- Mise a ZZZZZZZZZZ des images du meme nom --------------
				vig = 	split(vignetteslist[g]," ");
				if (vigimage == vig[1]) { vignetteslist[g] = "Z ZZZZZZZZZZ Z Z Z Z Z Z Z";	} // if
			} // for
			indimg++;	
		} // if
	} //  for
	// ---------------------- Sauvegarde ----------------------------------------------
	if (isOpen("Log")) {		selectWindow("Log");	run("Close");		} // if
	for (r=0;r<indimg;r++) { 	image = 	listimages[r]; 	print("Image= ",image);	} // for
	if (isOpen("Log")) {		selectWindow("Log");	sauve = "save=" + chemtemp + "Image_list.txt";	run("Text...",sauve);		run("Close");	} // if
	// ------------------------- Boucle de TRI --------------------------------------------
	for (r=0;r<indimg;r++) { 	
		imageref = 	listimages[r]; 
		showStatus("Image = "+imageref+"  WAIT !");
		for (k=deb; k<nbtotvignettes ; k++) {//---------------Trouvons tous les champs de cette valeur----------------
			ligneval = identligne[k];
			val = split(ligneval,"\ ");
			image = 	val[1];
			if (image == imageref ) { 
				sorted = identligne[k];
				sortedvignettes[index] = sorted;
				index++;
			} // if
		}  // for
	} // for	
	//--------------------------------Sauvegarde d'un fichier dans le "temp"-----------------------------------------
	if (isOpen("Log")) {	selectWindow("Log");	run("Close");	} // if
	for (k=deb; k<nbtotvignettes ; k++) {		print(sortedvignettes[k]);		} // for
	if (isOpen("Log")) {	selectWindow("Log");	sauve = "save=" + chemtemp + "sortedvignettes.txt";	run("Text...",sauve);		run("Close");	} // if

	// --------------------- Copie de la matrice -----------------------------------------------------------------------------------------------
	for (k=deb; k<identligne.length ; k++) {	oo = sortedvignettes[k];	identligne[k] = oo;		} // for
	
	//--------------------------Extraction des vignettes-------------------------------------------------------------------------------------------------------------------------------------------------
	setFont("SansSerif", 9);	f = 10;		visdata =0;	openimg = 0;	data = "          ";		message2 = "               ";
	chemscan = projfolder  + "\\Zooscan_scan\\";
	run("Colors...", "foreground=black background=white selection=black");
	valeur = "saturated="+contrast;
	
	//--------------------------------Sauvegarde d'un fichier dans le "temp"-----------------------------------------
	if (isOpen("Log")) {	selectWindow("Log");	run("Close");	} // if
	for (lig = 0;lig< identligne.length;lig++) { 
		ligne =  		identligne[lig];
		ligne = 		split(ligne,"\ ");
		titrered = 	ligne[colimg];
		prediction = 	ligne[colpred];
		No =		ligne[0];
		Bx   = 		ligne[colbx];
		By   = 		ligne[colby];
		Width	= 	ligne[colwidth];
		Height	= 	ligne[colheight];
		//path_work_sample = 	chemwork+titrered+"\\";
		nomvignette =	titrered+"_"+No;
		print(lig+" "+No+" "+titrered+" "+prediction+" "+ Bx+" "+ By+" "+ Width+" "+Height);
	} // for
	if (isOpen("Log")) {	selectWindow("Log");	sauve = "save=" + chemtemp + "Identligne.txt";	run("Text...",sauve);		run("Close");	} // if
	
	//-----------          De la premiere a la derniere ligne du fichier trie par image        -----------------------------------
	imageref = "          ";		total = 0;
	if (mode == true) 	setBatchMode(true); 
	for (lig = 0;lig< identligne.length;lig++) { 
		//-------------------Gestion de l'image source-----------------------------------------------------------
		ligne =  		identligne[lig];
		ligne = 		split(ligne,"\ ");
		titrered = 	ligne[colimg];
		prediction = 	ligne[colpred];
		No =		ligne[0];
		Nbb = 		parseInt(No);
		if (Nbb >= minvig && Nbb <= maxvig) { 
			Bx   = 		ligne[colbx];
			By   = 		ligne[colby];
			Width	= 	ligne[colwidth];
			Height	= 	ligne[colheight];
			//	chemwork = 	chemwork+titrered+"\\";
			nomvignette =	titrered+"_"+No;
			L = 	parseInt(Width);
			H = 	parseInt(Height);
			Bx = 	parseInt(Bx);
			By = 	parseInt(By);
			x1 = 	parseFloat(x1);
			larg = 	L;
			haut = 	H;
			ctrl = 		isOpen(titrered+"_vis1.jpg");
			ctrlzip = 		isOpen(titrered+"_vis1.tif");
			if (ctrl==1) { 	selectImage(titrered+"_vis1.jpg");	flagi = 1;	titre = 	titrered+"_vis1.jpg";	text = path_work_sample+titrered+"_vis1.jpg";		} // if 
			if (ctrlzip==1) { 	selectImage(titrered+"_vis1.tif");	flagi = 1;	titre = 	titrered+"_vis1.tif";		text = path_work_sample+titrered+"_vis1.tif";		} // if 
			//--------------------------------Ouverture de l'image si elle n'est pas ouverte---------------------------
			if (ctrl != 1 && ctrlzip != 1 ) {
				//------Fermeture de l'image precedente puisque ce n'est pas la meme---------------
				while (nImages()>0) {selectImage(nImages());  		close();		} // while	
				for (i=0; i<nb; i++) {	showStatus("Free memory");	run("free memory");	progress = (i+1)/nb;	showProgress(progress);	wait(duration);	} // for
				text = 		path_work_sample+titrered+"_vis1.jpg";
				exist = 		File.exists(text);
				dif = 	1;
				if (exist == 1 ) { size = 		File.length(text);		dif = 		sizeref*1000000 - size;				} // if 
				textzip = 	path_work_sample+titrered+"_vis1.zip";
				existzip = 	File.exists(textzip);
				if ((exist == 1&& dif > 0) || existzip == true) {		vig = 0;
					print("-----------OPEN-------------------------------------------------------");
					if (lig != 0) print("Extracted vignettes = "+total+" / "+identligne.length);
					imageref = titrered;	
					if (existzip == 1) {	open(textzip);	titre = 	titrered+"_vis1.tif";		openimg = 1;			message2 = textzip +" OPEN";			} // if
					else { 		open(text);	print("Image size = ",size);		titre = 	titrered+"_vis1.jpg";	openimg = 1;		message2 = text +" OPEN";	} // else
					saveAs("Tiff",chemtemp+"raw.tif");	close();
					run("free memory");		wait(1000);
					open(chemtemp+"raw.tif");
					rename(titre);
					print(message2);
					flagi = 1;
					setColor(0);
					selectImage(titre);
					setVoxelSize(1,1,1,"pixel");
					Larg = getWidth();
					Haut = getHeight();
					//---------------------CLEAR BACKGROUND -----------------------------------------
					if (maskclear == 1) {openfile = path_work_sample+ titrered+"_msk1.gif";
						testclear = File.exists(openfile);
						if (testclear  == 1) { 
							print("Clear background");
							open(openfile);
							test = 1;	
							rename("MASK");
							text =  "image1=MASK operation=Add image2="+titre;
							run("Image Calculator...", text);
							if (isOpen(titre)) 		{	selectImage(titre);	close();	run("free memory");		wait(3000);	} // if
							rename (titre);
						} // if	
						else { message = "No msk1.gif  file available for the selected image.              " ;	print(message);		} // else	
					} // if
				} // if
				else if ( exist == 0 && titrered != imageref)	{ message2 = text+ " NOT FOUND";		showStatus("Wait");		imageref = titrered;	flagi = 0;		disp1 = 1;		print("Image size = ",size);	print(message2);	} // else
				else if ( size >= sizeref && titrered != imageref)	{ message2 = text+ " TOO LARGE";		showStatus("Wait");		imageref = titrered;	flagi = 0;		disp2 = 1;		print("Image size = ",size);	print(message2);	} // else
				run("free memory");		wait(3000);
			} // if 
			if (flagi==1) { //---------------------l image est alors ouverte---------------------------------
				//			if (vig/100 == floor(vig/100) ) {	showStatus("Item  : "+lig+" /"+identligne.length+"  => Release PC now ");	run("free memory");	wait(500);	} // if
				vig++;
				argum = chem+" "+resolution+" "+longline+" "+x1+" "+x1 +" "+titre+" "+titrered+" "+No+" "+Bx+" "+By+" "+Width+" "+Height+" "+maskout+" "+gamma+" "+vignettetext+" "+masksave+" "+path_work_sample+" "+path_work_sample+" "+format+" "+clean+" "+flip+" "+legend+" "+legendzooscan+" "+upper;
				ret = runMacro("Zooscan_vignette_extract",argum);
				flag=toString(ret);
				l= lengthOf(flag);
				if (l==1)  { 	showMessage("Error message : "+No+" vignette extraction failed                       "); 		} // if
				else {	fic = 1;		
					if (masksave != 1) { run("free memory");
						wait(50);	
						saveAs("Jpeg",chemtemp+"vignette");
						rename(nomvignette);
					} // if
				} // else
				close();		
				total++;
			} // if
		} // if No
	} // for
	while (nImages()>0) {selectImage(nImages());  		close();		} // while

}
	if (disp1 == 1) { 	showMessage("------- END of ''Extract vignette to folders'' tool --------                    \nSome images were missing, check LOG                  ");	} // if
	if (disp2 == 1) {  	showMessage("------- END of ''Extract vignette to folders'' tool --------                    \nSome images were too large, check LOG                  ");	} // if
	if (disp1 !=1 && disp2 != 1)  showMessage("------- END of ''Extract vignette to folders'' tool --------                    ");	

print("-------------------------------------------------------------------------");
print("Extracted vignettes = ",total);
print("-------------------------------------------------------------------------");
if (bilan !=" ") print("Images not found :"+ bilan);
print("-------------------------------------------------------------------------");
if (isOpen("Log")) { selectWindow("Log");	sauve = "save=" + chemtemp + "Extract_for_train_log.txt";	run("Text...",sauve);			} // if
print("Log saved as ''Extract_for_train_log.txt'' in the Zooscan_temp folder.");
if (mode == true) 	setBatchMode(false); 

ret = titre;
return ret;



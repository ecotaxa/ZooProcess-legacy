//---------------------------Zooscan_extract_vignette_to_folders---------------------------------
version =	 "7.21";
date =	 "2015/10/13";

// TOUS LES TYPES DE TAG sont AUTORISES pour l'extraction des vignettes

// Cette routine ne fonctionne que dans le respect de l'arborescence Zooscan_scan\_work\ pour les fichiers image
// Le nom du fichier image est lu dans une colonne du fichier (Label)
// Une colonne identification peut etre utilisee, dans ce cas, l'identification est affichee
// Fonctionne avec des fichiers dont le separateur est tabs, espace ou ;
// Les colonnes !Item,Label,Area,Feret,Mean,Bx,By,Width et Height doivent absolument etre presentes quelque soit leur ordre
// Une prediction doit exister en derniere colonne (TANAGRA)
// 2015/09/01 : Ouverture possible des vis1.tif

print("------------Zooscan_extract_vignette_to_folders------------------------------------------------");

args = 		getArgument();
arg = 		split(args," ");
chem = 		arg[0];
projfolder = 	arg[1];

text_run = chem+"batch_run.txt";
text_stop = chem+"batch_stop.txt";

lon = lengthOf(projfolder);
zoosc = indexOf(projfolder,"Zooscan_");
proj = substring(projfolder,zoosc+8,lon);
drive = substring(projfolder,0,1);
total = 0;			sizeref =  	70;		// ATTENTION, taille compressee ! Il faudrait lire la vraie taille dans le LOG ou le PID
titre ="        ";		resolution = "2400";		resmessage = "Resolution differs from settings in files : ";
printres = 0;		jpeg = 100;			text= "jpeg="+jpeg+" file=.xls";
run("Input/Output...",text);
deb = 0;			longline = "1";			contrast = 1.1;		fic = 0;		x1 = 10;	volmin = 0;	volmax = 1000000;
vignettetext = longline;	longline = parseFloat(longline);
savedata = false;		learnnb = 0;			header = 0;		masksave = 0;	test = 0;
disp1 = 0;		disp2 = 0;			testout =0;	nbvig = 0;
nb = 4;	duration = 1000;	esdmin = 0.001;
masksave = "1";
chemin = "unused";
instrum = "zooscan";
mode_batch = true;
setBatchMode(true); 

paramlist = newArray("IMAGE NAME","IDENTIFICATION","PREDICTION","N° of organism/Image","BX","BY","Width","Height");
chemresults = 		projfolder  + "\\Zooscan_results\\";
chemsorted = 		projfolder+"\\"+"\\PID_process\\"+"\\Sorted_vignettes\\";
chemsortedval = 	projfolder+"\\"+"\\PID_process\\"+"\\Sorted_vignettes_validated\\";
pathpidresults = 	projfolder+"\\"+"\\PID_process\\"+"\\Pid_results\\";
pathpidpredicted = 	projfolder+"\\"+"\\PID_process\\"+"\\prediction\\";
chemtemp = 		chem + "Zooscan_temp\\";
chemwork = 		projfolder+"\\"+"\\Zooscan_scan\\"+"\\_work\\";
chemconfig = 		projfolder + "\\Zooscan_config\\";
pathdat1extracted = 	projfolder+"\\"+"\\PID_process\\"+"\\Pid_results\\"+"\\Dat1_extracted\\";
if (File.exists(pathdat1extracted) == false) {		File.makeDirectory(pathdat1extracted); 		} // if
pathdat1validated = 	projfolder+"\\"+"\\PID_process\\"+"\\Pid_results\\"+"\\Dat1_validated\\";
if (File.exists(pathdat1validated) == false) {		File.makeDirectory(pathdat1validated); 		} // if

// ---------------------- USER / ADVANCED -----------------------------------
mode_user = chemconfig+"mode_file_user.txt";
mode_advanced = chemconfig+"mode_file_advanced.txt";

// ------------------------ CHOIX predicted/validated ----------------------------------------------------------------------------------
Dialog.create("EXTRACT VIGNETTES into folders     version "+version+"  date : "+date);
Dialog.addMessage( "---------------------------------------------------------------------------------------------------------------");
Dialog.addMessage( "Project  :  "+proj);
Dialog.addMessage( "---------------------------------------------------------------------------------------------------------------");
optiondirs = newArray("Use NEW PREDICTION Files from ''prediction'' folder","Use PREDICTION files from ''pid_results'' folder","Use VALIDATED files from ''dat1_validated'' folder");
Dialog.addChoice("       Select method  ", optiondirs);
Dialog.addMessage( "---------------------------------------------------------------------------------------------------------------");Dialog.show();
optionfolder = 		Dialog.getChoice();
if (optionfolder == optiondirs[2]) { 
	pathpidresults = pathdat1validated; 	
	method = "_from_dat1_validated";	
	title = "VALIDATED DATA";	
	chemsorted = chemsortedval;
	// -------------- Changement de repertoire -------------------------------------------------------------------------------
	if (File.exists(chemsortedval) == false) {		File.makeDirectory(chemsortedval); 		} // if
} // if
else if (optionfolder == optiondirs[1]) {   	method = "_to_validate";	title = "PREDICTED DATA";						}// else
else if (optionfolder == optiondirs[0]) {	method = "_to_validate";	title = "PREDICTED DATA";	pathpidresults =  pathpidpredicted;
	aa = getBoolean("WARNING : \n \nThis option added in v7.15 will extract vignettes from all *dat1.txt files in the prediction folder. \nManually delete the file that you already extracted using previous versions. \nALL dat1.txt extracted files will be renamed *.dat.ext.");
}//

//--------------------------------- Affichage de l'heure---------------------------------------
dateheure =	runMacro("Zooscan_get_time_5");

//---------------------------Verification de l'existence du repertoire dans lequel ouvrir le fichier et lire les vignettes------------------
sizeidentlist = 0;	
pidresultsfolder = 		File.exists(pathpidresults);	
if (pidresultsfolder == 1) {	fileresults = getFileList(pathpidresults);	sizeresults = fileresults.length;		} // if
if (pidresultsfolder == 0 )   {	getBoolean("The "+pathpidresults+" folder doesn't exists or there is no csv or txt file in it.                  	\nPress Cancel to abort.              "             );	} // if
if (pidresultsfolder == 1){ 	
	//----------------------------Liste des fichiers TXT ou CSV du projet a completer----------------------------------------------
	j = 0;	h = 0;	flag4 = 0;	
	list = 		newArray(sizeresults);
	listautres = 	newArray(sizeresults);
	messageident = " ";
	for (i=0; i<fileresults.length ; i++) {	
		ctrl1 = endsWith(fileresults[i],".csv");
		ctrl2 = endsWith(fileresults[i],".txt");
		ctrl4 = endsWith(fileresults[i],"_dat1.txt");
		if (ctrl4 == true) flag4 =1;
		if (ctrl1 == true || ctrl2== true || ctrl4 == true)	{	rr = fileresults[i]; 	list[j] = rr;	j = j + 1;		} // if
		if ((ctrl1== true || ctrl2== true) && ctrl4 == false )	{rr = fileresults[i]; 	listautres[h] = rr;	h++;		} // if
	} // for	
	//---------------------Test de la presence de fichiers dans le repertoire-----------------------------------------------------------------------
	if (j==0) { print("No valid results file in "+pathpidresults);
		configpres = 0;
		getBoolean("Project : "+proj+"\n \nNo valid results (txt or csv) file in "+pathpidresults+"      \nPlace pid files in the ''Pid_results'' folder and restart tool ! \n \nPress Cancel to abort !          ");
	} //
	else { 	//---------------- Purger les fichiers vides de la listautres !--------------------------------------------------
		if (flag4 == 1) {	
//			listaff = newArray(h+1);
			listaff = newArray(j+1);
//			for (i=0; i<h ; i++) {	rr = listautres[i];		listaff[i+1] = rr;	} // for
			for (i=0; i<j ; i++) {	rr = list[i];		listaff[i+1] = rr;	} // for
			//	listaff[0] = "UPDATE all dat1.txt files in Pid_results folder  ";
			listaff[0] = "Extract vignettes from all dat1.txt files in folder  ";

		} // if flag4
		else{	listaff = newArray(h);	
			for (i=0; i<h ; i++) {	rr = listautres[i];	listaff[i] = rr;	} // for
		} // else  flag4

		// ---------------------- LOG des extractions -----------------------------------------------------------------------------
		extractlog = newArray(1000);		

		//---------------Ouverture de fichiers jusqu a ce que le contenu soit OK------------------------------------------
		while (test ==0) { 
			//--------------------Ouverture controlee du TXT -----------------------
			Dialog.create("EXTRACT VIGNETTES                                                                    "+title+"                                                                      version "+version+"  date : "+date);
			Dialog.addMessage( "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			Dialog.addMessage( "Project  :  "+proj);
			Dialog.addMessage( "The datafile can include as many additional identification columns. Last one will be utilized. File header must include the column names. ''pred_*''  ");
			Dialog.addMessage( "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			aff2 = newArray("Extract all vignettes","Select vignette number range","Random extraction of vignettes");
			Dialog.addChoice("Select method  ", aff2);
			folderchoice = newArray("Create a folder for each dat1.txt file","Create a Unique folder for all processed dat1.txt files");
			Dialog.addChoice("                                       Select folder option (Unique folder automatically selected if dat1.txt no selected below) ", folderchoice);	
//			Dialog.addMessage( "Open   TEXT or CSV file or select ''UPDATE all dat1.txt files in Pid_results folder'' option. Image name must be inside the data file.      \nOnly tabs, '';'' or ''space'' separators are allowed in files. ''tabs'' separated files can size up to 1500 rows while '' ; '' ones can size more than 60 000 rows !   ");
			Dialog.addChoice("      Select files to be processed ", listaff);	
			aff = newArray(2400,4800,1200,600,300);
			Dialog.addChoice("                      Select Image resolution (dpi)   ", aff);
			if (optionfolder == optiondirs[0] || optionfolder == optiondirs[1]) {
				Dialog.addCheckbox("Add detailled folders for validation using list in config folder ?       ",true);
			} // if
			Dialog.addCheckbox("Force to keep old style vignettes (new ones are compatible with old ones for classification) ?", false);
			Dialog.addMessage( "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			Dialog.addCheckbox("Size selection ?", false);
			formatlist = newArray("jpeg","bmp","tif");
			if (File.exists(mode_advanced) == true) {
				if (flag4 == true)	Dialog.addCheckbox("Save all data as a unique datafile named data_"+dateheure+".txt ?   (if ''Extract vignettes from all dat1.txt files in folder  '' is selected.)   ", true);
				Dialog.addCheckbox("Convert all predicted Id to lowercase ?   ", true);
				Dialog.addCheckbox("Add outlines ?", false);
				Dialog.addCheckbox("Clear outside outlines ?", true);
				Dialog.addMessage("- If gamma > 1=> contrast enhanced          - If gamma < 1=> image smoothed           - If gamma = 1=> No gamma correction              ");
				Dialog.addNumber("Gamma value (0.5 - 5) ",contrast);
				Dialog.addMessage( "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				Dialog.addCheckbox("Fast extraction (images not displayed) ? ", true);
				Dialog.addCheckbox("Remove legend and corners ? ", false);
				Dialog.addCheckbox("Keep only selected object and clean outside (threshold= 243)? ", false);
				Dialog.addCheckbox("Flip image vertically ? ", false);
				Dialog.addCheckbox("Replace ''Gamma'' info by ''Zooscan CNRS'' text ?", false);
				Dialog.addChoice("            Vignette output format (jpeg requested for PKId)   ", formatlist);
			} //
			else {	Dialog.addMessage("Select ADVANCED mode for more options !");		} // 
			Dialog.addMessage( "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			Dialog.show();
			extract = "pred";
			extractvig = 		Dialog.getChoice();
			folderopt =		Dialog.getChoice();
			newfolder = 		true;
			if (folderopt == folderchoice[0])	newfolder = false;
			datafile = 		Dialog.getChoice();
			// ---------------------- Pas de tri par echantillon si fichier TXT ou CSV globaux ---------------------------------------------------------------------------
			if (datafile != "Extract vignettes from all dat1.txt files in folder  " && endsWith(datafile,"_dat1.txt") == false ) newfolder = true;
			resolution = 		Dialog.getChoice();					
			Resolution = 	resolution;
			detailled = false;
			if (optionfolder == optiondirs[0] || optionfolder == optiondirs[1]) {	detailled = 	Dialog.getCheckbox();		} // if
			old_style_vignette = 	Dialog.getCheckbox();
			vigsize = 			Dialog.getCheckbox();
			if (File.exists(mode_advanced) == true) {
				if(flag4 == true)	savedata = Dialog.getCheckbox();
				lowerconv = 		Dialog.getCheckbox();
				maskout = 		Dialog.getCheckbox();
				maskclear = 		Dialog.getCheckbox();
				gamma = 		Dialog.getNumber();
				mode = 			Dialog.getCheckbox();
				legendremove = 		Dialog.getCheckbox();
				completeclean = 	Dialog.getCheckbox();
				flipvig = 		Dialog.getCheckbox();
				legendzooscan = 	Dialog.getCheckbox();
				format = 		Dialog.getChoice();
			} // 
			else {
				if(flag4 == true)	savedata = true;
				lowerconv = 		true;
				maskout = 		false;
				maskclear = 		true;
				gamma = 		contrast;
				mode = 			true;
				legendremove = 		false;
				completeclean = 	false;
				flipvig = 		false;
				legendzooscan = 	false;
				format = 		formatlist[0];
			} // else
				
			gamma = 	maxOf(gamma,0.5);
			gamma = 	minOf(gamma,5);
			textgamma = "value="+gamma;
			resolution = parseInt(resolution);
			if (resolution == 300) {	longline = 5;		vignettetext = 5;	} // if
			x2 = x1+longline;
			print("Resolution= ",resolution);
			pixels = 25.4/resolution;
				// --------------------- Choix du fichier texte de liste ---------------------
				if (detailled == true && optionfolder != optiondirs[2]) {
					filelist  = 	getFileList(chemconfig);
					t = 0;
					list = newArray(filelist.length);
					for (i=0; i<filelist.length ; i++) {	
						ctrl = startsWith(filelist[i],instrum);
						ctrl1 = endsWith(filelist[i],".txt");
						if (ctrl == 1 && ctrl1==1 )		{rr = filelist[i]; 	list[t] = rr;	t = t + 1;		} // if
					} // for	
					listafftexte = newArray(t);
					if ( t == 0) { getBoolean("No text file list for the instrument selected ! \n \nCreate a file in "+chemconfig+"\nfile name must start with the instrument name. \nPress Cancel to abort !");	} // if
					else {
						// ------------------------ Purger les fichiers vides de la liste ! -----------------------------------
						listafftexte = newArray(t);
						for (i=0; i<listafftexte.length ; i++) {	rr = list[i];		listafftexte[i] = rr;	} // for
						if ( t == 1) {	file = listafftexte[0];	} //if
						else {
							Dialog.create("SELECT liste of GROUPS ");
							Dialog.addMessage("--------------------------------------------------------------------------------------------------------------------------------------      ");
							message = "SELECT file containing the list of GROUPS for the detailled sorting.          " ;
							Dialog.addMessage(message);
							Dialog.addChoice("       ", listafftexte);
							Dialog.show();
							file = 		Dialog.getChoice();
						} // else
					} // else
					// ---------------------------- Lecture fichier existant -----------------------------------------------
					openconfig = chemconfig +"\\"+file;
					open(openconfig);
					wait(100);
					config = getInfo();
					run("Close");
					conf  = split(config,"\n");
				
			}// if detailled
			// ---------------------- Synthese -----------------------------------------
			clean = 0;	legend = "2";	flip = "0";		upper = 243;
			if (old_style_vignette == true) legend = "1";
			if (completeclean == true) {
				maskout = 	false;
				maskclear = 	false;
				clean = 		"1";
				upper = getNumber("Modify threshold accordingly to the value in the PID file   ",upper);
				upper = toString(upper);
			} // if 

			if (legendremove == true) 	legend = "0";
			if (flipvig == true)		flip = 	"1";

			minvig = 0;
			maxvig = 9999;

			// --------------- Si on choisit le tri sur la taille ---------------------------------------------------------
			if (vigsize == true) { 
				Dialog.create("Object volume  or ESD  ")
				Dialog.addNumber("- Minimum object ESD (mm) ",esdmin);
				Dialog.addNumber("- Minimum object volume (mm3) (ellipse from Major & Minor) ",0);
				Dialog.addNumber("- Maximum object volume (mm3) (ellipse from Major & Minor) ",1000);
				Dialog.show();
				esdmin = Dialog.getNumber();
				volmin = Dialog.getNumber();
				volmax = Dialog.getNumber();
				volmin = minOf(volmin,volmax);
				volmax = maxOf(volmin,volmax);
			} // if
			// --------------- Si on choisit new folder ---------------------------------------------------------
			if (newfolder == true && extract == "pred" ) {
				// --------------------------Affichage de la date et de l'heure ---------------------------------------------
				dateheure =	runMacro("Zooscan_get_time_5");
				Dialog.create("Enter new-sub folder name    ")
				Dialog.addString("Folder name : ", dateheure+method) ;
				Dialog.show();
				subfolder = Dialog.getString();
				subfolder = toLowerCase(subfolder);
				subfolder = replace(subfolder," ","_");
				subfolder = replace(subfolder,".","_");
				subfolder = replace(subfolder,"/","_");
				subfolder = replace(subfolder,";","_");
				subfolder = replace(subfolder,"!","_");
				chemsorted = 		projfolder+"\\"+"\\PID_process\\"+"\\Sorted_vignettes\\"+"\\"+subfolder+"\\";
				File.makeDirectory(chemsorted);
			} // if
			// --------------- Si on choisit de selectionner les N° de vignettes ---------------------------------
			if (extractvig == "Select vignette number range") {
				Dialog.create("Vignette range    ")
				Dialog.addNumber("- Minimum vignette number  ",1);
				Dialog.addNumber("- Maximum vignette number ",10000);
				Dialog.show();
				minvig = Dialog.getNumber();
				maxvig = Dialog.getNumber();
				minvig--;
				maxvig++;
			} // if
			// ------------------ Random -----------------------------------------------------
			if (extractvig == "Random extraction of vignettes" && datafile == "Extract vignettes from all dat1.txt files in folder  ")  {
				Dialog.create("Vignette Random Extraction    ")
				Dialog.addNumber("- Number of vignettes to be extracted from each image ",50);
				Dialog.show();
				nbvig = Dialog.getNumber();
			} // if

			// ----------------------- LIste des images deja traitees ------------------------------------------
			if (optionfolder != optiondirs[0]) {
			if (optionfolder != aff2[2] && (datafile == "Extract vignettes from all dat1.txt files in folder  " || endsWith(datafile,"_dat1.txt") == true) ) {	
				// ----------------------- LIste des images deja traitees ------------------------------------------	
				extractedlist = getFileList(pathdat1extracted);	
				sizeextracted = extractedlist.length;
				list = 		newArray(sizeextracted);
				j = 0;	h = 0;	flag4 = 0;	
				for (i=0; i<extractedlist.length ; i++) {	ctrl = endsWith(extractedlist[i],"_dat1.txt");
					if (ctrl == true )	{	rr = extractedlist[i]; 	list[j] = rr;	j = j + 1;		} // if
				} // for	
				// ------------------------- Ouverture successive pour recherche N° image -------------------------------
				listdat1 = newArray(j);	
				for (i=0; i<j ; i++) {	
					dat1file = list[i];	
					opendat1 = pathdat1extracted +dat1file;
					open(opendat1);
			
					wait(500);
					config = getInfo();
					pid = split(config,"\n");
					run("Close");
					//---------------- Recherche DATA section et NOM IMAGE source --------------------------
					for (d=0; d<pid.length ;d++) {	dat = pid[d];
						if (startsWith(dat,"[Data]")) {	deb=d+1;			} // if
					} // for
					// --------------- Separateur et colonne -----------------------------------------------------------
					sep = "tabs";
					ctrl1 = indexOf(pid[deb],";");
					if (ctrl1>=0) { 		sep = "dotcoma";	} // if
					ctrl1 = indexOf(pid[deb]," ");
					if (ctrl1>=0) { 		sep = "space";		} // if
					if (sep == "dotcoma") 	{	a= replace(pid[deb],";"," ");		entete = split(a,"\ ");	} // if
					if (sep == "tabs") 	{	a = pid[deb];			entete = split(a,"\t");		} // if
					if (sep == "space") 	{	a = pid[deb];			entete = split(a,"\ ");		} // if
					for (b=0;b<entete.length ;b++) {	v = entete[b];
						if (v=="Label") { 	collabel = b;		} //if	Nom de l image source	
					} // for
					if (sep == "dotcoma") {	a= replace(pid[deb+1],";"," ");		entete = split(a,"\ ");		} // if
					if (sep == "tabs") {	a = pid[deb+1];			entete = split(a,"\t");		} // if
					if (sep == "space") {	a = pid[deb+1];			entete = split(a,"\ ");		} // if
					// ------------------- Image ----------------------------------------------------------------------------------
					imagedat = entete[collabel];
					listdat1[i] = imagedat;
				} // for
			} // if
			}//

			// ------------------ lecture des fichiers dat1.txt -------------------------------------------------------
			if (datafile == "Extract vignettes from all dat1.txt files in folder  " || endsWith(datafile,"_dat1.txt") == true ) {			
				// ---------------------- liste des fichiers ---------------------------
				j = 0;	
				// -------------------- Cas extraction fichier unique -------------------------------------------
				if (endsWith(datafile,"_dat1.txt") == true) {
					sizeresults = 1;
					fileresults = newArray(1);
					fileresults[0] = datafile;
				} // if unique
				// --------------------- Cas général, inclus unique ---------------------------------------------
				list = newArray(sizeresults);
				messageident = " ";
				for (i=0; i<fileresults.length ; i++) {	
					ctrl1 = endsWith(fileresults[i],"_dat1.txt");
					if ( ctrl1==true ) {
						rr = fileresults[i];
						postot = true;		
						if (optionfolder == aff2[0]) {
							// -------------------------- Verification si pas deja extrait -------------------------------------
							for (m=0; m<listdat1.length ; m++) {	
								dat1file =listdat1[m];
								// --------------------- dat1file dans pidfile ??? ---------------------------------------
								pos = endsWith(rr,dat1file+"_dat1.txt");
								if (pos == true) {
									postot = getBoolean(rr+" file already extracted. \n \nEXTRACT AGAIN ?   ");
								} // if
							} // for
						} // if
						if (postot == true ) 	{		list[j] = rr;		j = j + 1;				} // if	
					} // if
				} // for	
				//---------------------Test de la presence de fichiers dans le repertoire-----------------------------------------------------------------------	
				if (j==0) { print("No valid results file in "+pathpidresults);
					configpres = 0;
					getBoolean("No valid ''*dat1.txt'' file in "+pathpidresults+"            \n \nPress CANCEL to ABORT !     ");
				} //
				else { 	// -------------------------- Liste reduite des fichiers a extraires (hors doublons) -----------------------------------
					listpidlearn= newArray(j);
					for (i=0; i<j ; i++) {	rr = list[i];	listpidlearn[i] = rr;	} // for
				} // else


				// ----------------------- Copie du ou des fichiers DAT1.txt ---------------
				if (isOpen("Log")) {		selectWindow("Log");	run("Close");	} // if
				for (k=0;k<listpidlearn.length;k++) { 
					pidfile = listpidlearn[k];
					openpid = pathpidresults +pidfile;
					open(openpid);
					wait(500);
					config = getInfo();
					pid = split(config,"\n");
					run("Close");
					// ----------------- Impression et nom de fichier -----------
					//---------------- Recherche DATA section et NOM IMAGE source --------------------------
					for (d=0; d<pid.length ;d++) {	dat = pid[d];
						if (startsWith(dat,"[Data]")) {	deb=d+1;			} // if
					} // for
					// --------------- Separateur et colonne -----------------------------------------------------------
					sep = "tabs";
					ctrl1 = indexOf(pid[deb],";");
					if (ctrl1>=0) { 		sep = "dotcoma";	} // if
					ctrl1 = indexOf(pid[deb]," ");
					if (ctrl1>=0) { 		sep = "space";		} // if
					if (sep == "dotcoma") 	{	a= replace(pid[deb],";"," ");		entete = split(a,"\ ");	} // if
					if (sep == "tabs") 	{	a = pid[deb];			entete = split(a,"\t");		} // if
					if (sep == "space") 	{	a = pid[deb];			entete = split(a,"\ ");		} // if
					for (b=0;b<entete.length ;b++) {	v = entete[b];
						if (v=="Label") { 	collabel = b;		} //if	Nom de l image source	
					} // for
					if (sep == "dotcoma") {	a= replace(pid[deb+1],";"," ");		entete = split(a,"\ ");		} // if
					if (sep == "tabs") {	a = pid[deb+1];			entete = split(a,"\t");		} // if
					if (sep == "space") {	a = pid[deb+1];			entete = split(a,"\ ");		} // if
					// ------------------- Image ----------------------------------------------------------------------------------
					imagedat = entete[collabel];
					for (i=0; i<pid.length ; i++) {	
						dat = pid[i];
						if (dat == "Image_Process" ) 		{	dat = "[Image_Process]";	}
						else if (dat == "Particules_Process" ) {	dat = "[Particules_Process]";	}
						print(dat);			
					} // 
					// ---------- Enregistrement -----------------
					if (isOpen("Log")) {	selectWindow("Log");
						if (newfolder == false) chemsorted = projfolder+"\\"+"\\PID_process\\"+"\\Sorted_vignettes\\"+imagedat+"_"+dateheure+method+"\\";
						File.makeDirectory(chemsorted);
						sauve = "save=" + chemsorted + "\\"+pidfile;	run("Text...",sauve);	
						sauve = "save=" + pathdat1extracted + "\\"+pidfile;	run("Text...",sauve);
						run("Close");	
					} // if
				} // for

				// ----------------------- Chargement des données et création de la matrice ---------------
				if (isOpen("Log")) {		selectWindow("Log");	run("Close");	} // if
				for (k=0;k<listpidlearn.length;k++) { 
					header ==0;
					pidfile = listpidlearn[k];
					openpid = pathpidresults +pidfile;
					open(openpid);
					wait(500);
					config = getInfo();
					pid = split(config,"\n");
					run("Close");
					wait(1000);
					// --------------- Fichier renommé si dat1.txt ----------------------------------
					if (endsWith(openpid,"dat1.txt") && method == "_to_validate"){
						longueur = lengthOf(openpid);
						samplename = substring(openpid,0,longueur - 4);
						aa= File.rename(openpid,samplename+".ext");						
					}// if

					//---------------- Recherche DATA section & Resolution --------------------------
					for (i=0; i<pid.length ; i++) {	dat = pid[i];
						if (startsWith(dat,"[Data]")) {	deb=i+1;			} // if
						if (startsWith(dat,"Resolution=")) {	data = split(dat,"\ ");	Resolution = data[1];	Resolution = parseInt(Resolution);	} // if
					} // for

					// --------------- Controle de la resolution ---------------------------------------------
					if (Resolution != resolution) {	resmessage = resmessage+"\n "+pidfile+"    file resolution : "+Resolution;	printres = 1;	
						getBoolean(resmessage+ "\nPress Cancel to Abort.  \nPress YES to process other files !    ");
					} // if
					//------------------ Detection des N° de colonnes pour les champs ----------------------------
					coltag = 0;	colminor = 0;	colmajor = 0;	colarea = 0;	vol = volmax; 	esd = esdmin;
					//----------------- Recherche Type de separateur ( tabs, ; ou space)--------------------------
					sep = "tabs";
					ctrl1 = indexOf(pid[deb],";");
					if (ctrl1>=0) { 		sep = "dotcoma";	} // if
					ctrl1 = indexOf(pid[deb]," ");
					if (ctrl1>=0) { 		sep = "space";	} // if
					if (sep == "dotcoma") {	a= replace(pid[deb],";"," ");		entete = split(a,"\ ");		} // if
					if (sep == "tabs") {		a = pid[deb];			entete = split(a,"\t");		} // if
					if (sep == "space") {	a = pid[deb];			entete = split(a,"\ ");		} // if
					for (i=0; i<entete.length ; i++) {	v = entete[i];
						if (v=="Tag") { 		coltag = i;		} //if
						if (v=="Minor") { 	colminor = i;			} //if
						if (v=="Major") { 	colmajor = i;			} //if
						if (v=="Area") { 	colarea = i;			} //if
						if (v=="!Item") { 	colno = i;	colitem = i;			} //if
						if (v=="Label") { 	collabel = i;		} //if	Nom de l image source
						if (v=="BX") { 	colbx = i;			} //if
						if (v=="BY") { 	colby = i;			} //if
						if (v=="Width") { 	colwidth = i;		} //if
						if (v=="Height") { 	colheight = i;		} //if
						if (startsWith(v,"pred_") ||startsWith(v,"Pred_")) {	colpred = i;		} // if
					} // for
					// ------------------------ Boucle sur les lignes ---------------------------------
					start = deb+1;
						if (k==0) 	start = deb;
						showStatus("Loading "+pidfile);
						nbval = 	pid.length-deb;		// -1;
						identligne = 	newArray(nbval);
						indexmat = 	0;
						for (i=start; i<pid.length; i++)	{	mat = pid[i];
							if (sep == "dotcoma") {	a= replace(pid[i],";"," ");	item = split(a,"\ ");		} // if
							if (sep == "tabs") {	a = pid[i];			item = split(a,"\t");		} // if
							if (sep == "space") {	a = pid[i];			item = split(a,"\ ");		} // if
							pligne = item[0];
							long = item.length;
							// ----------- Calcul de la taille ------------------------
							if (vigsize == true && i !=deb ) { 	minor = item[colminor];
								minor = parseFloat(minor);	minor = minor*pixels;
								major = item[colmajor];		major = parseFloat(major);	
								major = major*pixels;
								vol = 3.1416*major*minor*minor/6;
								area = item[colarea];
								Smm = 	parseInt(area);
								Smm = 	Smm * pixels * pixels;
								Smm = 	Smm /3.1416 ;
								esd = 	2* pow(Smm,0.5);
							} // if
							// ------------- No de vignette --------------------------
							No =		pligne;
							Nbb = 		parseInt(No);
//							for (j=1; j<long; j++) {	valeur =  item[j];	pligne = pligne + ";"+ valeur;	}//
							pligne = item[colitem]+ ";"+item[collabel]+ ";"+item[colarea]+ ";"+item[colmajor]+ ";"+item[colminor]+ ";"+item[colbx]+ ";"+item[colby]+ ";"+item[colwidth]+ ";"+item[colheight]+ ";"+item[coltag]+ ";"+item[colpred];
							// ------------------ Entete ------------------------------
							if (k == 0 && i == start && extractvig == "Random extraction of vignettes" ) 	{
		//						pligne = pligne+";Random";
								print("!Item;Label;Area;Minor;Major;BX;BY;Width;Height;Tag;Pred_;Random");
							}// if
							if (k == 0 && i == start) {
		//						print(pligne);	
								print("!Item;Label;Area;Minor;Major;BX;BY;Width;Height;Tag;Pred_");
							} // if		
							// ------------ Boucle sur les lignes -------------------
							else { 
//								getBoolean("esdmin= "+esdmin+"   esd= "+esd);
//								if ((coltag == 0 || item[coltag] == "1") && vol > volmin && vol <= volmax && Nbb > minvig && Nbb < maxvig && esd >= esdmin) {	
								if ( vol > volmin && vol <= volmax && Nbb > minvig && Nbb < maxvig && esd >= esdmin) {	
									identligne[indexmat] = pligne;	indexmat++;	learnnb++;	
								} // if
							} // else 
						} // for	
					// ------------------------ Ajout Random RANDOM et TRI ---------------------------------
					if (extractvig == "Random extraction of vignettes" && datafile == "Extract vignettes from all dat1.txt files in folder  ")  {
						for (i=0; i<indexmat; i++)	{	ligne = identligne[i]+";"+random;	 identligne[i] = ligne;		} // for
						sortedligne = 	newArray(indexmat);
						aff = 		newArray(indexmat);
						index = 0;
						while (index < indexmat) {
							showStatus("SORTING "+pidfile+" index = "+index+" / "+indexmat+",  WAIT !");
							minval = 100000000000;
							for (u=0; u<indexmat ; u++) {
								ligneval = identligne[u];
								mat = replace(ligneval,";"," ");
								val = split(mat,"\ ");
								long = val.length;
								data = val[long-1];
								data = parseFloat(data);
								minval = minOf(data,minval);
							} // for
							for (u=0; u<indexmat ; u++) {
								//---------------Trouvons tous les champs de cette valeur----------------
								ligneval = identligne[u];
								mat = replace(ligneval,";"," ");
								val = split(mat,"\ ");
								long = val.length;
								data = val[long-1];
								data = parseFloat(data);
								if (data == minval ) {
									sorted = identligne[u];
									sortedligne[index] = sorted;
									index++;
									ligne = "10000000000";
									for (t=0;t<long-2;t++) {ligne = ligne + " 10000000000";	} // for
									ligne = ligne + " 10";
									identligne[u] = 	ligne;			
								} // if
							} // for
						} // while
						//-------------Inversement de l'ordre---------------------
						for (u=0; u<indexmat; u++) { ind = indexmat-u-1;	Aff = sortedligne[ind];	aff[u] = Aff;		} // for
						// ------------- Impression des nbvig premiers ----------------------
						listp = minOf(nbvig,indexmat); 
						for (u=0;u<listp;u++) {		pligne = aff[u];		print(pligne);				} // for
					} // if random
					// ----------------------- NON random ------------------------------------------------------------------
					else {
						for (i=0; i<indexmat; i++)	{	ligne = identligne[i];	print(ligne);			} // for
					} // else
				} // for next PID
				//--------------------------------Sauvegarde d'un fichier dans le "temp"-----------------------------------------
				if (isOpen("Log")) {		selectWindow("Log");	sauve = "save=" + chemtemp + "ResPID.txt";			run("Text...",sauve);	} // if
				if (savedata == true) {	selectWindow("Log");	sauve = "save=" + pathpidresults + "data_"+dateheure+".txt";	run("Text...",sauve);	} // if
				
			} // if datafile txt
			// ------------------- Lecture du fichier des donnees, soit source, soit composite a partir des dat1.txt -------------------------------
			deb = 0;
			openfile = pathpidresults +datafile;
			if (datafile == "Extract vignettes from all dat1.txt files in folder  " || endsWith(datafile,"_dat1.txt") == true )  openfile = chemtemp + "ResPID.txt";
			
			open(openfile);
			wait(1000);
			config = getInfo();
			dataline = split(config,"\n");
			run("Close");

			// -------------- Copie du fichier ----------------------
			if (datafile != "Extract vignettes from all dat1.txt files in folder  " && endsWith(datafile,"_dat1.txt") == false) {
				if (isOpen("Log")) {		selectWindow("Log");	run("Close");	} // if
				// ----------------- Impression -----------
				for (i=0; i<dataline.length ; i++) {	dat = dataline[i];			print(dat);			} // 
				// ---------- Enregistrement -----------------
				if (isOpen("Log")) {	selectWindow("Log");	
					File.makeDirectory(chemsorted);
					sauve = "save=" + chemsorted + "\\"+datafile;	
					run("Text...",sauve);	
					sauve = "save=" + pathdat1extracted + "\\"+datafile;	
					run("Text...",sauve);
					selectWindow("Log");	
					run("Close");
				} // if
			} // if
			print("Sizeref (Mo) = ",sizeref );
			//-----------------Recherche Type de separateur ( tabs, ; ou space)--------------------------
			sep = "tabs";
			ctrl1 = indexOf(dataline[deb],";");
			if (ctrl1>=0) { 	print("'';'' separator");			sep = "dotcoma";	} // if
			ctrl1 = indexOf(dataline[deb]," ");
			if (ctrl1>=0) { 	print("''space'' separator");		sep = "space";	} // if
			//------------------Creation des vecteurs---------------------------------
			long = dataline.length;
			print("Vignettes to extract  = ",long-1);
			if (long == 1) getBoolean("No vignette to extract.       \nPress CANCEL to ABORT !      ");
			nbval = long-deb-1;
			identligne = 	newArray(nbval);		// source
			sortedligne = 	newArray(nbval);		// triee
			//------------------Detection des N° de colonnes pour les champs-------------
			if (sep == "dotcoma") {	a= replace(dataline[deb],";"," ");	ligne = split(a,"\ ");		} // if
			else if (sep == "tabs") {	a = dataline[deb];		ligne = split(a,"\t");		} // if
			else {	getBoolean("Your file is not OK (no '';'', no tabs)            \nPress Cancel to abort                     ");	} // else
			colident =0;	collabel = 0;	colbx = 0;	colby = 0;	colarea = 0;	colwidth = 0;	colheight = 0;	colno = 0;	colpred = 0;
			colminor = 0;	colmajor = 0;	vol = 10000000;
			for (i=0; i<ligne.length ; i++) {	
				v = ligne[i];	
				if (v=="Label") { 	collabel = i;		} //if	Nom de l image source
				if (v=="BX") { 	colbx = i;			} //if
				if (v=="BY") { 	colby = i;			} //if
				if (v=="Area") { 	colarea = i;		} //if
				if (v=="Width") { 	colwidth = i;		} //if
				if (v=="Height") { 	colheight = i;		} //if
				if (v=="!Item") { 	colno = i;			} //if
				if (startsWith(v,"pred") || startsWith(v,"Pred")) {	colpred = i;		} // if
				if (v=="Minor") { 	colminor = i;			} //if
				if (v=="Major") { 	colmajor = i;			} //if
			} // for
			if (colpred== 0 && extract == "pred" ) { 	
				longline = "1";		
				fic = 0;		x1 = 10;		header = 0;
				vignettetext = longline;
				longline = parseFloat(longline);
				showMessage("NO PREDICTION DATA                   \nPress OK and \nSelect another file.       ");				
			} // if
			else if (collabel ==0 || colbx ==0 || colby==0 || colwidth==0 || colheight==0 ||colminor == 0 || colmajor == 0 || colarea == 0) { 	longline = "1";	fic = 0;		x1 = 10;		header = 0;
				vignettetext = longline;
				showMessage("The file did not contain all the required fields.             ") ;	
			} // if
			else if (printres ==1) {	showMessage(resmessage) ;		} // if
			else  { 	test = 1;						} // else
		} // while

//------------------Lecture des valeurs et ecriture des vecteurs------------------------------------
long = dataline.length;
for (i=deb+1; i<long; i++) {
	if (sep == "dotcoma") {		a= replace(dataline[i],";"," ");	a= replace(a,",",".");		ligne = split(a,"\ ");		} // if
	else if (sep == "space") {	a= dataline[i];			a= replace(a,",",".");		ligne = split(a,"\ ");		} // if
	else {				a= dataline[i];			a= replace(a,",",".");		ligne = split(a,"\t");		} // if
	ind = 	i-deb-1;
	No = 	ligne[colno];
	Label = 	ligne[collabel];
	Area = 	ligne[colarea];
	Bx = 	ligne[colbx];
	By = 	ligne[colby];
	Width = 	ligne[colwidth];
	Height = 	ligne[colheight];
	Smm = 	parseInt(Area);
	Smm = 	Smm * pixels * pixels;
	Smm = 	Smm /3.1416 ;
	Esd = 	2* pow(Smm,0.5);
	minor = ligne[colminor];		
	major = ligne[colmajor];
	minor = parseFloat(minor);	
	major = parseFloat(major);	
	minor = minor * pixels;
	major = major * pixels;
	vol = 3.1416*major*minor*minor/6;	Vol = toString(vol);
	if (extract == "pred") {	Pred = 	ligne[colpred];	} // if
	if (extract == "vis") {		Pred = "VIS";		} // if	
	messagelist = " No      Image                   Pred.          Area     ESD       Bx     By     Width     Height    Vol" ;
	b = No+"     "+Label+" "+Pred+"     "+Area+"     "+Esd+"     "+Bx+"     "+By+"     "+Width+"     "+Height+"     "+Vol;	
	identligne[ind] = b;
	print("ind= ",ind," b= ",b);
} // for
	//--------------------------------Sauvegarde d'un fichier dans le "temp"-----------------------------------------
	if (isOpen("Log")) {	selectWindow("Log");		run("Close");	} // if
	for (k=deb; k<identligne.length ; k++) {	print(identligne[k]);	} // for
	if (isOpen("Log")) {	selectWindow("Log");	sauve = "save=" + chemtemp + "ResPIDext.txt";	run("Text...",sauve);		} // if
	if (isOpen("Log")) {	selectWindow("Log");		run("Close");	} // if
	colimg = 1;	colpred = 2;	colbx = 5;	colby = 6;	colwidth = 7;	colheight = 8;	colvol = 9;	
	//------------------------------TRI des vignettes image par image pour accelerer l'identification par la suite--------------------------------------------------------
	index = 0;	col = 0;		deb = 0;
	sortedligne = 	newArray(nbval);		// triee
	vignettesname = 	newArray(nbval);
	sortedvignettes = 	newArray(nbval);
	nbtotvignettes = 	nbval;
	// --------------------------- Recopie des valeurs dans une nouvelle matrice vignettelist ----------------------------
	vignetteslist = 	newArray(nbval);
	for (k=deb; k<nbtotvignettes ; k++) {	vignette = 	identligne[k];	vignetteslist[k] = vignette;		} // for
	// --------------------------- Liste des images source d'au moins une vignette -------------------------------------------
	listimages = 	newArray(3000);
	debimage =	newArray(3000);
	image =	"ZZZZZZ";
	indimg = 0;
	for (k=0; k<nbtotvignettes ; k++) {
		vigligne = 		split(vignetteslist[k]," ");
		vigimage =	vigligne[1];
		if (vigimage != image && vigimage !="ZZZZZZZZZZ" ) { 
			listimages[indimg] = 	vigimage;
			vignetteslist[k] =		"Z ZZZZZZZZZZ Z Z Z Z Z Z Z";
			for (g=0; g<nbtotvignettes ; g++) {
				// -------------------- Mise a ZZZZZZZZZZ des images du meme nom --------------
				vig = 	split(vignetteslist[g]," ");
				if (vigimage == vig[1]) { vignetteslist[g] = "Z ZZZZZZZZZZ Z Z Z Z Z Z Z";	} // if
			} // for
			indimg++;	
		} // if
	} //  for
	// ---------------------- Sauvegarde ----------------------------------------------
	if (isOpen("Log")) {		selectWindow("Log");	run("Close");		} // if
	for (r=0;r<indimg;r++) { 	image = 	listimages[r]; 	print("Image= ",image);	} // for
	if (isOpen("Log")) {		selectWindow("Log");	sauve = "save=" + chemtemp + "Image_list.txt";	run("Text...",sauve);		run("Close");	} // if
	// ------------------------- Boucle de TRI --------------------------------------------
	for (r=0;r<indimg;r++) { 	
		imageref = 	listimages[r]; 
		showStatus("Image = "+imageref+"  WAIT !");
		for (k=deb; k<nbtotvignettes ; k++) {//---------------Trouvons tous les champs de cette valeur----------------
			ligneval = identligne[k];
			val = split(ligneval,"\ ");
			image = 	val[1];
			if (image == imageref ) { 		sorted = identligne[k];		sortedvignettes[index] = sorted;		index++;		} // if
		}  // for
	} // for	
	//--------------------------------Sauvegarde d'un fichier dans le "temp"-----------------------------------------
	if (isOpen("Log")) {	selectWindow("Log");	run("Close");	} // if
	for (k=deb; k<nbtotvignettes ; k++) {		print(sortedvignettes[k]);		} // for
	if (isOpen("Log")) {	selectWindow("Log");	sauve = "save=" + chemtemp + "sortedvignettes.txt";	run("Text...",sauve);		run("Close");	} // if

// --------------------- Copie de la matrice -----------------------------------------------------------------------------------------------
for (k=deb; k<identligne.length ; k++) {	oo = sortedvignettes[k];	identligne[k] = oo;		} // for

//--------------------------Extraction des vignettes-------------------------------------------------------------------------------------------------------------------------------------------------
run("free memory");	wait(1000);
run("free memory");	wait(1000);
run("free memory");	wait(1000);
run("free memory");	wait(1000);
setFont("SansSerif", 9);
f = 10;	visdata =0;	openimg = 0;	data = "          ";	message2 = "               ";
chemscan = projfolder  + "\\Zooscan_scan\\";
chemwork1 = chemscan + "_work\\";
run("Colors...", "foreground=black background=white selection=black");
valeur = "saturated="+contrast;

//--------------------------------Sauvegarde d'un fichier dans le "temp"-----------------------------------------
if (isOpen("Log")) {	selectWindow("Log");	run("Close");	} // if
for (lig = 0;lig< identligne.length;lig++) { 
	ligne =  		identligne[lig];
	ligne = 		split(ligne,"\ ");
	titrered = 	ligne[colimg];
	prediction = 	ligne[colpred];
	No =		ligne[0];
	Bx   = 		ligne[colbx];
	By   = 		ligne[colby];
	Width	= 	ligne[colwidth];
	Height	= 	ligne[colheight];
	chemwork = 	chemwork1+titrered+"\\";
	nomvignette =	titrered+"_"+No;
	print(lig+" "+No+" "+titrered+" "+prediction+" "+ Bx+" "+ By+" "+ Width+" "+Height);
} // for
if (isOpen("Log")) {	selectWindow("Log");	sauve = "save=" + chemtemp + "Identligne.txt";	run("Text...",sauve);		run("Close");	} // if

//-----------          De la premiere a la derniere ligne du fichier trie par image        -----------------------------------
imageref = "          ";
//	aa = getBoolean("vignettetext = "+vignettetext+ " longline = "+longline);

for (lig = 0;lig< identligne.length;lig++) { 
	//-------------------Gestion de l'image source-----------------------------------------------------------
	ligne =  	identligne[lig]	;
	ligne = 		split(ligne,"\ ");
	titrered = 		ligne[colimg];
	prediction = 	ligne[colpred];
	No =		ligne[0];
	Nbb = 		parseInt(No);
	vol = 		ligne[9];
	vol = 		parseFloat(vol);
	esd = 		ligne[4];
	esd = 		parseFloat(esd);
//	getBoolean("esdmin= "+esdmin+"   esd= "+esd);
	if (Nbb > minvig && Nbb < maxvig && vol > volmin && vol <= volmax && esd >= esdmin) {
		Bx   = 		ligne[colbx];
		By   = 		ligne[colby];
		Width	= 	ligne[colwidth];
		Height	= 	ligne[colheight];
		chemwork = 	chemwork1+titrered+"\\";
		if (lowerconv == true) prediction = toLowerCase(prediction);
		if (newfolder == false) 		chemsorted = projfolder+"\\"+"\\PID_process\\"+"\\Sorted_vignettes\\"+titrered+"_"+dateheure+method+"\\";
		chemsortpred = 	chemsorted+prediction+"\\";
		File.makeDirectory(chemsorted);
		File.makeDirectory(chemsortpred);
		nomvignette =	titrered+"_"+No;
		L = 	parseInt(Width);
		H = 	parseInt(Height);
		Bx = 	parseInt(Bx);
		By = 	parseInt(By);
		x1 = 	parseFloat(x1);
		larg = 	L;
		haut = 	H;
	ctrl = 		isOpen(titrered+"_vis1.jpg");
	ctrlzip = 	isOpen(titrered+"_vis1.tif");
	if (ctrl==1) { 		selectImage(titrered+"_vis1.jpg");	flagi = 1;	titre = 	titrered+"_vis1.jpg";		text = chemwork+titrered+"_vis1.jpg";		} // if 
	if (ctrlzip==1) { 	selectImage(titrered+"_vis1.tif");	flagi = 1;	titre = 	titrered+"_vis1.tif";		text = chemwork+titrered+"_vis1.tif";		} // if 

	//--------------------------------Ouverture de l'image si elle n'est pas ouverte---------------------------
	if (ctrl != 1 && ctrlzip != 1 ) {
		//------Fermeture de l'image precedente puisque ce n'est pas la meme---------------
		while (nImages()>0) {selectImage(nImages());  	close();		} // while	
			run("free memory");		wait(2500);	
			run("free memory");		wait(2500);	
			run("free memory");		wait(2500);	
			run("free memory");		wait(2500);	
		text = 		chemwork+titrered+"_vis1.jpg";
		exist = 		File.exists(text);
		dif = 		0;		size = 		0;
		if (exist == 1 ) { size = 	File.length(text);		dif = 	sizeref*1000000 - size;			} // if 
		textzip = 	chemwork+titrered+"_vis1.zip";
		existzip = 	File.exists(textzip);
		texttif = 	chemwork+titrered+"_vis1.tif";
		existtif = 	File.exists(texttif);
		if ((exist == 1 && dif > 0) || existzip == 1 || existtif == 1) {		vig = 0;
			print("----------- "+ titrered + "-------------------------------------------------------");
			if (lig != 0) 	print("Line= ",lig);
			if (total !=0) 	print("Extracted vignettes = "+total+"/"+ identligne.length);
//			if (isOpen("Log")) { 	selectWindow("Log");	sauve = "save=" + chemsorted + "Extract_to_folders_log.txt";	run("Text...",sauve);			} // if
			// ---------------- Création des répertoires selon liste ----------------------
			if (detailled == true && optionfolder == optiondirs[0]) {
				for (i=0; i<conf.length; i++)	{ 	File.makeDirectory(chemsorted+"\\"+conf[i]);		}//for
			} // if
			imageref = titrered;	
			if (existzip == 1) {	open(textzip);	titre = 	titrered+"_vis1.tif";		openimg = 1;		message2 = textzip +" OPEN";				} // if	
			else if (existtif == 1) {	open(texttif);	titre = 	titrered+"_vis1.tif";		openimg = 1;		message2 = textzip +" OPEN";				} // if
			else { 	open(text);		print("Image size = ",size);		titre = 	titrered+"_vis1.jpg";	openimg = 1;	message2 = text +" OPEN";		} // else
			saveAs("Tiff",chemtemp+"raw.tif");	close();
			run("free memory");	wait(1000);
			run("free memory");	wait(1000);
			run("free memory");	wait(1000);
			run("free memory");	wait(1000);
			open(chemtemp+"raw.tif");
			rename(titre);
			print(message2);
			flagi = 1;
			setColor(0);
			selectImage(titre);
			setVoxelSize(1,1,1,"pixel");
			Larg = getWidth();
			Haut = getHeight();
			//---------------------CLEAR BACKGROUND -----------------------------------------
			if (maskclear == 1) {	// --------------------- Ouverturte MSK1------------------------------------------
				openfile = chemwork+ titrered+"_msk1.gif";
				testclear = File.exists(openfile);
				if (testclear  == 1) { print("Clear background");
					open(openfile);
					test = 1;	
					rename("MASK");
					text =  "image1=MASK operation=Add image2="+titre;
					run("Image Calculator...", text);
					if (isOpen(titre)) 		{	selectImage(titre);	close();	run("free memory");		wait(1000);	} // if
					rename (titre);
				} // if	
				else { message = "No msk1.gif  file available for the selected image.              " ;	print(message);		} // else	
			} // if
			//---------------------Ouverture des outlines -----------------------------------------
			if (maskout == 1) {	openfile = chemwork+ titrered+"_out1.gif";
				testout = File.exists(openfile);
				print("Add outlines");
				if (testout  == 1) { open(openfile);	test = 1;		rename("Contours");	} // if	
				else { message = "No out1.gif file available for the selected image.              " ;	print(message);		} // else	
				saveAs("Tiff",chemtemp+"raw.tif");		close();
				run("free memory");			wait(1000);
				open(chemtemp+"raw.tif");
				rename("Contours");
				selectImage(titre);
				run("Invert");
				text =  "image1=Contours operation=Add image2="+titre;
				run("Image Calculator...", text);
				selectImage(titre);	
				close();	
				run("Invert");
				rename(titre);
			} // if
		} // if
		else if ( exist == 0 && titrered != imageref)	{ message2 = text+ " NOT FOUND";		showStatus("Wait");		imageref = titrered;	flagi = 0;		disp1 = 1;		print("------------------------------------------------------------");	print("Image size = ",size);	print(message2);	} // else
		else if ( size >= sizeref && titrered != imageref)	{ message2 = text+ " TOO LARGE";		showStatus("Wait");		imageref = titrered;	flagi = 0;		disp2 = 1;	print("------------------------------------------------------------");	print("Image size = ",size);	print(message2);	} // else	
		else {getBoolean(titrered+" image problem (Not found ?). \nPress Cancel to abort and check files !");	} // else
	} // if 
	 if (flagi==1) { //---------------------l image est alors ouverte---------------------------------
		if (vig/100 == floor(vig/100) ) {	showStatus("Item  : "+lig+" /"+identligne.length+"  => Release PC now ");	run("free memory");	wait(500);	} // if
		vig++;
		//----------------------------------------Enregistrement de la vignette dans son repertoire d'identification--------------------------------------
		argum = chem+" "+resolution+" "+longline+" "+x1+" "+x1 +" "+titre+" "+titrered+" "+No+" "+Bx+" "+By+" "+Width+" "+Height+" "+"2"+" "+gamma+" "+vignettetext+" "+masksave+" "+chemwork+" "+chemsortpred+" "+format+" "+clean+" "+flip+" "+legend+" "+legendzooscan+" "+upper;
		ret = runMacro("Zooscan_vignette_extract",argum);
		flag=toString(ret);
		l= lengthOf(flag);
		if (l==1)  { 	showMessage("Error message : "+No+" vignette extraction failed                       "); 		} // if
		else {	fic = 1;		
			if (masksave != 1) { run("free memory");
				wait(100);	
				saveAs("Jpeg",chemtemp+"vignette");
				rename(nomvignette);
			} // if
		} // else
		close();	
		total++;
	} // if
	} // if No
} // for

} // else presence de fichiers TXT ou CSV	
} // else sur l'exitence du repertoire des vignettes dans le projet

while (nImages()>0) {selectImage(nImages());  	close();		} // while

print("-------------------------------------------------------------------------");
print("Extracted vignettes = ",total);
print("-------------------------------------------------------------------------");
if (disp1 == 1) print("Some images were missing, check LOG                  ");
//	if (isOpen("Log")) { 	selectWindow("Log");	sauve = "save=" + chemsorted + "Extract_to_folders_log.txt";	run("Text...",sauve);	} // if

if (disp1 == 1) 	showMessage("------- END of ''Extract vignette to folders'' tool --------                    \nSome images were missing, check LOG                  ");	
if (disp1 !=1 && disp2 != 1)  showMessage("------- END of ''Extract vignette to folders'' tool --------");	

// ------------------- FIN -----------------------------
if (mode == true) 	setBatchMode(false); 
ret = titre;
return ret;


